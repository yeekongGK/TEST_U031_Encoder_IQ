
PWR_SHUTDOWN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a0  080049a0  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049a0  080049a0  000059a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049a8  080049a8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080049b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000006c  08004a1c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004a1c  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000e3c0  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000cf  00000000  00000000  00014454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000c8fd  00000000  00000000  00014523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000208e  00000000  00000000  00020e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  00022eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009e7a1  00000000  00000000  00023878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000077f  00000000  00000000  000c2019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001910c  00000000  00000000  000c2798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000db8a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002690  00000000  00000000  000db8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004844 	.word	0x08004844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08004844 	.word	0x08004844

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000648:	f000 fbf2 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	@ (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	@ (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000672:	f003 fc7b 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f000 f80f 	bl	8000698 <main>

0800067a <LoopForever>:

LoopForever:
  b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000688:	080049b0 	.word	0x080049b0
  ldr r2, =_sbss
 800068c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000690:	2000027c 	.word	0x2000027c

08000694 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC_COMP1_IRQHandler>
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fbf3 	bl	8000e88 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Configure LED4 */
  BSP_LED_Init(LED4);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fa8c 	bl	8000bc0 <BSP_LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f848 	bl	800073c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* User push-button (EXTI_Line13) will be used to wakeup the system from Stop mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006ac:	2101      	movs	r1, #1
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fb2a 	bl	8000d08 <BSP_PB_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  // MX_GPIO_Init();
  MX_USART2_UART_Init();
 80006b4:	f000 f8a0 	bl	80007f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <main+0x90>)
 80006ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <main+0x90>)
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0549      	lsls	r1, r1, #21
 80006c2:	430a      	orrs	r2, r1
 80006c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <main+0x90>)
 80006c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	055b      	lsls	r3, r3, #21
 80006ce:	4013      	ands	r3, r2
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <main+0x90>)
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <main+0x90>)
 80006da:	4914      	ldr	r1, [pc, #80]	@ (800072c <main+0x94>)
 80006dc:	400a      	ands	r2, r1
 80006de:	609a      	str	r2, [r3, #8]

  UART_Printf("main start\r\n");
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <main+0x98>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f95e 	bl	80009a4 <UART_Printf>
  uint8_t index = 0;
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Insert 5 second delay */
    UART_Printf("%d\r\n",index);
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <main+0x9c>)
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 f954 	bl	80009a4 <UART_Printf>
    index++;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	3201      	adds	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <main+0xa0>)
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fc3b 	bl	8000f84 <HAL_Delay>
    /* Turn off LED4 */
    BSP_LED_Off(LED4);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fab6 	bl	8000c80 <BSP_LED_Off>

  /* Suspend tick */
   HAL_SuspendTick();
 8000714:	f000 fc5a 	bl	8000fcc <HAL_SuspendTick>
   HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 ffd3 	bl	80016c4 <HAL_PWREx_EnterSTOP2Mode>
    /* ... STOP 1 mode ... */

    /* Re-configure the system clock to 48 MHz based on MSI, enable and
       select PLL as system clock source (PLL is disabled in STOP mode) */

    SYSCLKConfig_STOP();
 800071e:	f000 f8b9 	bl	8000894 <SYSCLKConfig_STOP>
    UART_Printf("%d\r\n",index);
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	e7e3      	b.n	80006ee <main+0x56>
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	ffff7fff 	.word	0xffff7fff
 8000730:	0800485c 	.word	0x0800485c
 8000734:	0800486c 	.word	0x0800486c
 8000738:	00000bb8 	.word	0x00000bb8

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b097      	sub	sp, #92	@ 0x5c
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	2410      	movs	r4, #16
 8000744:	193b      	adds	r3, r7, r4
 8000746:	0018      	movs	r0, r3
 8000748:	2348      	movs	r3, #72	@ 0x48
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f003 fbff 	bl	8003f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000752:	003b      	movs	r3, r7
 8000754:	0018      	movs	r0, r3
 8000756:	2310      	movs	r3, #16
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 fbf8 	bl	8003f50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	0018      	movs	r0, r3
 8000766:	f000 ff41 	bl	80015ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800076a:	0021      	movs	r1, r4
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2210      	movs	r2, #16
 8000770:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	22b0      	movs	r2, #176	@ 0xb0
 8000782:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2202      	movs	r2, #2
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2201      	movs	r2, #1
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2270      	movs	r2, #112	@ 0x70
 8000794:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2210      	movs	r2, #16
 800079a:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	0292      	lsls	r2, r2, #10
 80007a2:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	0492      	lsls	r2, r2, #18
 80007aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	0592      	lsls	r2, r2, #22
 80007b2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 ffb8 	bl	800172c <HAL_RCC_OscConfig>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007c0:	f000 f91c 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	003b      	movs	r3, r7
 80007c6:	2207      	movs	r2, #7
 80007c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2203      	movs	r2, #3
 80007ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	003b      	movs	r3, r7
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 fb89 	bl	8001ef8 <HAL_RCC_ClockConfig>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007ea:	f000 f907 	bl	80009fc <Error_Handler>
  }
}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b017      	add	sp, #92	@ 0x5c
 80007f4:	bd90      	pop	{r4, r7, pc}
	...

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_USART2_UART_Init+0x94>)
 80007fe:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <MX_USART2_UART_Init+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000804:	22e1      	movs	r2, #225	@ 0xe1
 8000806:	0252      	lsls	r2, r2, #9
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_USART2_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_USART2_UART_Init+0x94>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_USART2_UART_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USART2_UART_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fd48 	bl	80032d8 <HAL_UART_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800084c:	f000 f8d6 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f003 fa61 	bl	8003d1c <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085e:	f000 f8cd 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000864:	2100      	movs	r1, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f003 fa98 	bl	8003d9c <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000870:	f000 f8c4 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000876:	0018      	movs	r0, r3
 8000878:	f003 fa16 	bl	8003ca8 <HAL_UARTEx_DisableFifoMode>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 f8bc 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000088 	.word	0x20000088
 8000890:	40004400 	.word	0x40004400

08000894 <SYSCLKConfig_STOP>:
  *         and select PLL as system clock source.
  * @param  None
  * @retval None
  */
static void SYSCLKConfig_STOP(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b099      	sub	sp, #100	@ 0x64
 8000898:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	2350      	movs	r3, #80	@ 0x50
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2310      	movs	r3, #16
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f003 fb53 	bl	8003f50 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	2408      	movs	r4, #8
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2348      	movs	r3, #72	@ 0x48
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f003 fb4b 	bl	8003f50 <memset>
  uint32_t pFLatency = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <SYSCLKConfig_STOP+0xa4>)
 80008c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <SYSCLKConfig_STOP+0xa4>)
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	0549      	lsls	r1, r1, #21
 80008c8:	430a      	orrs	r2, r1
 80008ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <SYSCLKConfig_STOP+0xa4>)
 80008ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	055b      	lsls	r3, r3, #21
 80008d4:	4013      	ands	r3, r2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /* Get the Oscillators configuration according to the internal RCC registers */
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fcb5 	bl	800224c <HAL_RCC_GetOscConfig>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2202      	movs	r2, #2
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 ff1b 	bl	800172c <HAL_RCC_OscConfig>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <SYSCLKConfig_STOP+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f87f 	bl	80009fc <Error_Handler>
  }

  /* Get the Clocks configuration according to the internal RCC registers */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	2450      	movs	r4, #80	@ 0x50
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fd86 	bl	8002418 <HAL_RCC_GetClockConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK;
 800090c:	0021      	movs	r1, r4
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2203      	movs	r2, #3
 8000918:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	187b      	adds	r3, r7, r1
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fae9 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <SYSCLKConfig_STOP+0x9a>
  {
    Error_Handler();
 800092a:	f000 f867 	bl	80009fc <Error_Handler>
  }
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b019      	add	sp, #100	@ 0x64
 8000934:	bd90      	pop	{r4, r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  if (TimingDelay != 0)
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_SYSTICK_Callback+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d005      	beq.n	8000954 <HAL_SYSTICK_Callback+0x18>
  {
    TimingDelay--;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_SYSTICK_Callback+0x2c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_SYSTICK_Callback+0x2c>)
 8000950:	601a      	str	r2, [r3, #0]
  {
    /* Toggle LED4 */
    BSP_LED_Toggle(LED4);
    TimingDelay = LED_TOGGLE_DELAY;
  }
}
 8000952:	e005      	b.n	8000960 <HAL_SYSTICK_Callback+0x24>
    BSP_LED_Toggle(LED4);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f9b5 	bl	8000cc4 <BSP_LED_Toggle>
    TimingDelay = LED_TOGGLE_DELAY;
 800095a:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <HAL_SYSTICK_Callback+0x2c>)
 800095c:	2264      	movs	r2, #100	@ 0x64
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	2000011c 	.word	0x2000011c

0800096c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	0002      	movs	r2, r0
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BUTTON_USER_PIN)
 8000978:	1dbb      	adds	r3, r7, #6
 800097a:	881a      	ldrh	r2, [r3, #0]
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	019b      	lsls	r3, r3, #6
 8000980:	429a      	cmp	r2, r3
 8000982:	d108      	bne.n	8000996 <HAL_GPIO_EXTI_Falling_Callback+0x2a>
  {
    /* Reconfigure LED4 */
    BSP_LED_Init(LED4);
 8000984:	2000      	movs	r0, #0
 8000986:	f000 f91b 	bl	8000bc0 <BSP_LED_Init>
   /* Toggle LED4 */
    BSP_LED_Toggle(LED4);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f99a 	bl	8000cc4 <BSP_LED_Toggle>
    TimingDelay = LED_TOGGLE_DELAY;
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8000992:	2264      	movs	r2, #100	@ 0x64
 8000994:	601a      	str	r2, [r3, #0]
  }
}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	2000011c 	.word	0x2000011c

080009a4 <UART_Printf>:

void UART_Printf(char *format, ...)
{
 80009a4:	b40f      	push	{r0, r1, r2, r3}
 80009a6:	b590      	push	{r4, r7, lr}
 80009a8:	b0c3      	sub	sp, #268	@ 0x10c
 80009aa:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 80009ac:	238a      	movs	r3, #138	@ 0x8a
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2108      	movs	r1, #8
 80009b2:	185b      	adds	r3, r3, r1
 80009b4:	19db      	adds	r3, r3, r7
 80009b6:	607b      	str	r3, [r7, #4]
  vsnprintf(str, sizeof(str), format, args);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2288      	movs	r2, #136	@ 0x88
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	1852      	adds	r2, r2, r1
 80009c0:	19d2      	adds	r2, r2, r7
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0049      	lsls	r1, r1, #1
 80009c8:	2408      	movs	r4, #8
 80009ca:	1938      	adds	r0, r7, r4
 80009cc:	f003 fab4 	bl	8003f38 <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fb98 	bl	8000108 <strlen>
 80009d8:	0003      	movs	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	2301      	movs	r3, #1
 80009de:	425b      	negs	r3, r3
 80009e0:	1939      	adds	r1, r7, r4
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <UART_Printf+0x54>)
 80009e4:	f002 fcce 	bl	8003384 <HAL_UART_Transmit>
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b043      	add	sp, #268	@ 0x10c
 80009ee:	bc90      	pop	{r4, r7}
 80009f0:	bc08      	pop	{r3}
 80009f2:	b004      	add	sp, #16
 80009f4:	4718      	bx	r3
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	20000088 	.word	0x20000088

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* Suspend tick */
  HAL_SuspendTick();
 8000a00:	f000 fae4 	bl	8000fcc <HAL_SuspendTick>

  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 f919 	bl	8000c3c <BSP_LED_On>
  while (1)
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	e7fd      	b.n	8000a0a <Error_Handler+0xe>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0549      	lsls	r1, r1, #21
 8000a20:	430a      	orrs	r2, r1
 8000a22:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	055b      	lsls	r3, r3, #21
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	661a      	str	r2, [r3, #96]	@ 0x60
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b099      	sub	sp, #100	@ 0x64
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	234c      	movs	r3, #76	@ 0x4c
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fa70 	bl	8003f50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	2414      	movs	r4, #20
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2338      	movs	r3, #56	@ 0x38
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f003 fa68 	bl	8003f50 <memset>
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <HAL_UART_MspInit+0xb8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d13e      	bne.n	8000b08 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fd53 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa2:	f7ff ffab 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0xbc>)
 8000aa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_UART_MspInit+0xbc>)
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	0289      	lsls	r1, r1, #10
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <HAL_UART_MspInit+0xbc>)
 8000ab6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <HAL_UART_MspInit+0xbc>)
 8000ac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <HAL_UART_MspInit+0xbc>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_UART_MspInit+0xbc>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ada:	214c      	movs	r1, #76	@ 0x4c
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2207      	movs	r2, #7
 8000af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	187a      	adds	r2, r7, r1
 8000afc:	23a0      	movs	r3, #160	@ 0xa0
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fb9a 	bl	800123c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b019      	add	sp, #100	@ 0x64
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40021000 	.word	0x40021000

08000b18 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 fa0c 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000b34:	f000 fb36 	bl	80011a4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fd1c 	bl	8001584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	@ (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f003 f9ec 	bl	8003f60 <__errno>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	425b      	negs	r3, r3
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	18d2      	adds	r2, r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <_sbrk+0x64>)
 8000ba4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b006      	add	sp, #24
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20002000 	.word	0x20002000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	20000280 	.word	0x20000280

08000bc0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led != LED4)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <BSP_LED_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	425b      	negs	r3, r3
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bde:	e023      	b.n	8000c28 <BSP_LED_Init+0x68>
  }
  else
  {
    LED4_GPIO_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <BSP_LED_Init+0x74>)
 8000be2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <BSP_LED_Init+0x74>)
 8000be6:	2101      	movs	r1, #1
 8000be8:	430a      	orrs	r2, r1
 8000bea:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <BSP_LED_Init+0x74>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2203      	movs	r2, #3
 8000c12:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <BSP_LED_Init+0x78>)
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	58d3      	ldr	r3, [r2, r3]
 8000c1e:	187a      	adds	r2, r7, r1
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fb0a 	bl	800123c <HAL_GPIO_Init>
  }
  return ret;
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b00a      	add	sp, #40	@ 0x28
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	40021000 	.word	0x40021000
 8000c38:	20000000 	.word	0x20000000

08000c3c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]

  if (Led != LED4)
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <BSP_LED_On+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c54:	2302      	movs	r3, #2
 8000c56:	425b      	negs	r3, r3
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e009      	b.n	8000c70 <BSP_LED_On+0x34>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <BSP_LED_On+0x40>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	58d3      	ldr	r3, [r2, r3]
 8000c66:	2120      	movs	r1, #32
 8000c68:	2201      	movs	r2, #1
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fc52 	bl	8001514 <HAL_GPIO_WritePin>
  }

  return ret;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	20000000 	.word	0x20000000

08000c80 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	0002      	movs	r2, r0
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]

  if (Led != LED4)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <BSP_LED_Off+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e009      	b.n	8000cb4 <BSP_LED_Off+0x34>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <BSP_LED_Off+0x40>)
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	58d3      	ldr	r3, [r2, r3]
 8000caa:	2120      	movs	r1, #32
 8000cac:	2200      	movs	r2, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fc30 	bl	8001514 <HAL_GPIO_WritePin>
  }

  return ret;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]

  if (Led != LED4)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <BSP_LED_Toggle+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	425b      	negs	r3, r3
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e009      	b.n	8000cf8 <BSP_LED_Toggle+0x34>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <BSP_LED_Toggle+0x40>)
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	58d3      	ldr	r3, [r2, r3]
 8000cee:	2220      	movs	r2, #32
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fc2b 	bl	800154e <HAL_GPIO_TogglePin>
  }

  return ret;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000000 	.word	0x20000000

08000d08 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	1c0a      	adds	r2, r1, #0
 8000d18:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000d1a:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <BSP_PB_Init+0xec>)
 8000d1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d1e:	4b35      	ldr	r3, [pc, #212]	@ (8000df4 <BSP_PB_Init+0xec>)
 8000d20:	2104      	movs	r1, #4
 8000d22:	430a      	orrs	r2, r1
 8000d24:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d26:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <BSP_PB_Init+0xec>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin   = BUTTON_PIN [Button];
 8000d32:	2380      	movs	r3, #128	@ 0x80
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	001a      	movs	r2, r3
 8000d38:	210c      	movs	r1, #12
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2201      	movs	r2, #1
 8000d42:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000d4a:	1dbb      	adds	r3, r7, #6
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10d      	bne.n	8000d6e <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <BSP_PB_Init+0xf0>)
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	58d3      	ldr	r3, [r2, r3]
 8000d62:	187a      	adds	r2, r7, r1
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 fa68 	bl	800123c <HAL_GPIO_Init>
 8000d6c:	e03d      	b.n	8000dea <BSP_PB_Init+0xe2>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000d6e:	210c      	movs	r1, #12
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2284      	movs	r2, #132	@ 0x84
 8000d74:	0392      	lsls	r2, r2, #14
 8000d76:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <BSP_PB_Init+0xf0>)
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	58d3      	ldr	r3, [r2, r3]
 8000d82:	187a      	adds	r2, r7, r1
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 fa58 	bl	800123c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	0013      	movs	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	189b      	adds	r3, r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4a18      	ldr	r2, [pc, #96]	@ (8000dfc <BSP_PB_Init+0xf4>)
 8000d9a:	1898      	adds	r0, r3, r2
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <BSP_PB_Init+0xf8>)
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	58d3      	ldr	r3, [r2, r3]
 8000da6:	0019      	movs	r1, r3
 8000da8:	f000 fa35 	bl	8001216 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	0013      	movs	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	189b      	adds	r3, r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <BSP_PB_Init+0xf4>)
 8000dba:	1898      	adds	r0, r3, r2
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <BSP_PB_Init+0xfc>)
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	58d3      	ldr	r3, [r2, r3]
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f000 f9f2 	bl	80011b2 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000dce:	2007      	movs	r0, #7
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <BSP_PB_Init+0x100>)
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	0019      	movs	r1, r3
 8000dde:	f000 f9af 	bl	8001140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000de2:	2307      	movs	r3, #7
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 f9c0 	bl	800116a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b008      	add	sp, #32
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	20000124 	.word	0x20000124
 8000e00:	08004874 	.word	0x08004874
 8000e04:	20000008 	.word	0x20000008
 8000e08:	2000000c 	.word	0x2000000c

08000e0c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0002      	movs	r2, r0
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fff1 	bl	8000e0c <BSP_PB_Callback>
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <SystemInit+0x50>)
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	0512      	lsls	r2, r2, #20
 8000e3c:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8000e3e:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <SystemInit+0x54>)
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	58d3      	ldr	r3, [r2, r3]
 8000e44:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <SystemInit+0x54>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	4013      	ands	r3, r2
 8000e54:	d010      	beq.n	8000e78 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	22ff      	movs	r2, #255	@ 0xff
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2bcc      	cmp	r3, #204	@ 0xcc
 8000e5e:	d00b      	beq.n	8000e78 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	22ff      	movs	r2, #255	@ 0xff
 8000e64:	4013      	ands	r3, r2
 8000e66:	2baa      	cmp	r3, #170	@ 0xaa
 8000e68:	d006      	beq.n	8000e78 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <SystemInit+0x54>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SystemInit+0x54>)
 8000e70:	2180      	movs	r1, #128	@ 0x80
 8000e72:	02c9      	lsls	r1, r1, #11
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 f80f 	bl	8000eb8 <HAL_InitTick>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e001      	b.n	8000eaa <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea6:	f7ff fdb3 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0U)
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_InitTick+0x88>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d02b      	beq.n	8000f28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <HAL_InitTick+0x8c>)
 8000ed2:	681c      	ldr	r4, [r3, #0]
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_InitTick+0x88>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	0019      	movs	r1, r3
 8000eda:	23fa      	movs	r3, #250	@ 0xfa
 8000edc:	0098      	lsls	r0, r3, #2
 8000ede:	f7ff f925 	bl	800012c <__udivsi3>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	f7ff f920 	bl	800012c <__udivsi3>
 8000eec:	0003      	movs	r3, r0
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 f94b 	bl	800118a <HAL_SYSTICK_Config>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d112      	bne.n	8000f1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d80a      	bhi.n	8000f14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2301      	movs	r3, #1
 8000f02:	425b      	negs	r3, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 f91a 	bl	8001140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_InitTick+0x90>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e00d      	b.n	8000f30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e008      	b.n	8000f30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e003      	b.n	8000f30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b005      	add	sp, #20
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	20000018 	.word	0x20000018
 8000f44:	20000010 	.word	0x20000010
 8000f48:	20000014 	.word	0x20000014

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	001a      	movs	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	18d2      	adds	r2, r2, r3
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	20000130 	.word	0x20000130

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	@ (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	20000130 	.word	0x20000130

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff0 	bl	8000f70 <HAL_GetTick>
 8000f90:	0003      	movs	r3, r0
 8000f92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	001a      	movs	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	189b      	adds	r3, r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	f7ff ffe0 	bl	8000f70 <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	20000018 	.word	0x20000018

08000fcc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_SuspendTick+0x18>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_SuspendTick+0x18>)
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	438a      	bics	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffa:	d809      	bhi.n	8001010 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	231f      	movs	r3, #31
 8001004:	401a      	ands	r2, r3
 8001006:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <__NVIC_EnableIRQ+0x30>)
 8001008:	2101      	movs	r1, #1
 800100a:	4091      	lsls	r1, r2
 800100c:	000a      	movs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	0002      	movs	r2, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001030:	d828      	bhi.n	8001084 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001032:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <__NVIC_SetPriority+0xd4>)
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b25b      	sxtb	r3, r3
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	33c0      	adds	r3, #192	@ 0xc0
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	589b      	ldr	r3, [r3, r2]
 8001042:	1dfa      	adds	r2, r7, #7
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	0011      	movs	r1, r2
 8001048:	2203      	movs	r2, #3
 800104a:	400a      	ands	r2, r1
 800104c:	00d2      	lsls	r2, r2, #3
 800104e:	21ff      	movs	r1, #255	@ 0xff
 8001050:	4091      	lsls	r1, r2
 8001052:	000a      	movs	r2, r1
 8001054:	43d2      	mvns	r2, r2
 8001056:	401a      	ands	r2, r3
 8001058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	22ff      	movs	r2, #255	@ 0xff
 8001060:	401a      	ands	r2, r3
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	0018      	movs	r0, r3
 8001068:	2303      	movs	r3, #3
 800106a:	4003      	ands	r3, r0
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001070:	481f      	ldr	r0, [pc, #124]	@ (80010f0 <__NVIC_SetPriority+0xd4>)
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	430a      	orrs	r2, r1
 800107c:	33c0      	adds	r3, #192	@ 0xc0
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001082:	e031      	b.n	80010e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001084:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <__NVIC_SetPriority+0xd8>)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	0019      	movs	r1, r3
 800108c:	230f      	movs	r3, #15
 800108e:	400b      	ands	r3, r1
 8001090:	3b08      	subs	r3, #8
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3306      	adds	r3, #6
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	18d3      	adds	r3, r2, r3
 800109a:	3304      	adds	r3, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0011      	movs	r1, r2
 80010a4:	2203      	movs	r2, #3
 80010a6:	400a      	ands	r2, r1
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	21ff      	movs	r1, #255	@ 0xff
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	401a      	ands	r2, r3
 80010b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	22ff      	movs	r2, #255	@ 0xff
 80010bc:	401a      	ands	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	2303      	movs	r3, #3
 80010c6:	4003      	ands	r3, r0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	4809      	ldr	r0, [pc, #36]	@ (80010f4 <__NVIC_SetPriority+0xd8>)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	001c      	movs	r4, r3
 80010d4:	230f      	movs	r3, #15
 80010d6:	4023      	ands	r3, r4
 80010d8:	3b08      	subs	r3, #8
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	430a      	orrs	r2, r1
 80010de:	3306      	adds	r3, #6
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	18c3      	adds	r3, r0, r3
 80010e4:	3304      	adds	r3, #4
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b003      	add	sp, #12
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	1e5a      	subs	r2, r3, #1
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	045b      	lsls	r3, r3, #17
 8001108:	429a      	cmp	r2, r3
 800110a:	d301      	bcc.n	8001110 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110c:	2301      	movs	r3, #1
 800110e:	e010      	b.n	8001132 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <SysTick_Config+0x44>)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	3a01      	subs	r2, #1
 8001116:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2103      	movs	r1, #3
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff ff7c 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SysTick_Config+0x44>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <SysTick_Config+0x44>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	210f      	movs	r1, #15
 800114c:	187b      	adds	r3, r7, r1
 800114e:	1c02      	adds	r2, r0, #0
 8001150:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	187b      	adds	r3, r7, r1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	0002      	movs	r2, r0
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff33 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ffaf 	bl	80010f8 <SysTick_Config>
 800119a:	0003      	movs	r3, r0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011a8:	f7ff fbc8 	bl	800093c <HAL_SYSTICK_Callback>
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	200b      	movs	r0, #11
 80011be:	183b      	adds	r3, r7, r0
 80011c0:	1c0a      	adds	r2, r1, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c4:	2317      	movs	r3, #23
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80011cc:	183b      	adds	r3, r7, r0
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d010      	beq.n	80011f6 <HAL_EXTI_RegisterCallback+0x44>
 80011d4:	dc13      	bgt.n	80011fe <HAL_EXTI_RegisterCallback+0x4c>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HAL_EXTI_RegisterCallback+0x2e>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d007      	beq.n	80011ee <HAL_EXTI_RegisterCallback+0x3c>
 80011de:	e00e      	b.n	80011fe <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
      break;
 80011ec:	e00c      	b.n	8001208 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
      break;
 80011f4:	e008      	b.n	8001208 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
      break;
 80011fc:	e004      	b.n	8001208 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80011fe:	2317      	movs	r3, #23
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
      break;
 8001206:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001208:	2317      	movs	r3, #23
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b006      	add	sp, #24
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e003      	b.n	8001232 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001230:	2300      	movs	r3, #0
  }
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e14d      	b.n	80014e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x28>
 8001262:	e13e      	b.n	80014e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	2201      	movs	r2, #1
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d017      	beq.n	800131a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2207      	movs	r2, #7
 8001338:	4013      	ands	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2107      	movs	r1, #7
 8001352:	400b      	ands	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x174>
 80013ae:	e098      	b.n	80014e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013b0:	4a53      	ldr	r2, [pc, #332]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3318      	adds	r3, #24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	589b      	ldr	r3, [r3, r2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	220f      	movs	r2, #15
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	23a0      	movs	r3, #160	@ 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	429a      	cmp	r2, r3
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x1d6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a48      	ldr	r2, [pc, #288]	@ (8001504 <HAL_GPIO_Init+0x2c8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x1d2>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a47      	ldr	r2, [pc, #284]	@ (8001508 <HAL_GPIO_Init+0x2cc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x1ce>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a46      	ldr	r2, [pc, #280]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x1ca>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a45      	ldr	r2, [pc, #276]	@ (8001510 <HAL_GPIO_Init+0x2d4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x1c6>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001402:	2306      	movs	r3, #6
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001412:	2300      	movs	r3, #0
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	2103      	movs	r1, #3
 8001418:	400a      	ands	r2, r1
 800141a:	00d2      	lsls	r2, r2, #3
 800141c:	4093      	lsls	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001424:	4936      	ldr	r1, [pc, #216]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3318      	adds	r3, #24
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	035b      	lsls	r3, r3, #13
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001456:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	039b      	lsls	r3, r3, #14
 8001474:	4013      	ands	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001486:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001488:	2384      	movs	r3, #132	@ 0x84
 800148a:	58d3      	ldr	r3, [r2, r3]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43da      	mvns	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ac:	4914      	ldr	r1, [pc, #80]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80014ae:	2284      	movs	r2, #132	@ 0x84
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014b4:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	58d3      	ldr	r3, [r2, r3]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014da:	4909      	ldr	r1, [pc, #36]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	40da      	lsrs	r2, r3
 80014f0:	1e13      	subs	r3, r2, #0
 80014f2:	d000      	beq.n	80014f6 <HAL_GPIO_Init+0x2ba>
 80014f4:	e6aa      	b.n	800124c <HAL_GPIO_Init+0x10>
  }
}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b006      	add	sp, #24
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021800 	.word	0x40021800
 8001504:	50000400 	.word	0x50000400
 8001508:	50000800 	.word	0x50000800
 800150c:	50000c00 	.word	0x50000c00
 8001510:	50001400 	.word	0x50001400

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	0008      	movs	r0, r1
 800151e:	0011      	movs	r1, r2
 8001520:	1cbb      	adds	r3, r7, #2
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	1c7b      	adds	r3, r7, #1
 8001528:	1c0a      	adds	r2, r1, #0
 800152a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	1c7b      	adds	r3, r7, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	1cbb      	adds	r3, r7, #2
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	000a      	movs	r2, r1
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001562:	1cbb      	adds	r3, r7, #2
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	041a      	lsls	r2, r3, #16
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	1cb9      	adds	r1, r7, #2
 8001572:	8809      	ldrh	r1, [r1, #0]
 8001574:	400b      	ands	r3, r1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b004      	add	sp, #16
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	0002      	movs	r2, r0
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001590:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	1dba      	adds	r2, r7, #6
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	4013      	ands	r3, r2
 800159a:	d008      	beq.n	80015ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800159c:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800159e:	1dba      	adds	r2, r7, #6
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80015a4:	1dbb      	adds	r3, r7, #6
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f815 	bl	80015d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	1dba      	adds	r2, r7, #6
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	4013      	ands	r3, r2
 80015b8:	d008      	beq.n	80015cc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015bc:	1dba      	adds	r2, r7, #6
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015c2:	1dbb      	adds	r3, r7, #6
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff f9d0 	bl	800096c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021800 	.word	0x40021800

080015d8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	0002      	movs	r2, r0
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d137      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fe:	4b27      	ldr	r3, [pc, #156]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	23c0      	movs	r3, #192	@ 0xc0
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	401a      	ands	r2, r3
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d040      	beq.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001616:	401a      	ands	r2, r3
 8001618:	4b20      	ldr	r3, [pc, #128]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	0089      	lsls	r1, r1, #2
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2232      	movs	r2, #50	@ 0x32
 8001628:	4353      	muls	r3, r2
 800162a:	491f      	ldr	r1, [pc, #124]	@ (80016a8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800162c:	0018      	movs	r0, r3
 800162e:	f7fe fd7d 	bl	800012c <__udivsi3>
 8001632:	0003      	movs	r3, r0
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001638:	e002      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b01      	subs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	401a      	ands	r2, r3
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	429a      	cmp	r2, r3
 8001650:	d102      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	401a      	ands	r2, r3
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	429a      	cmp	r2, r3
 8001668:	d113      	bne.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e012      	b.n	8001694 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	23c0      	movs	r3, #192	@ 0xc0
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	401a      	ands	r2, r3
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	429a      	cmp	r2, r3
 800167e:	d008      	beq.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001686:	401a      	ands	r2, r3
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	00c9      	lsls	r1, r1, #3
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40007000 	.word	0x40007000
 80016a0:	fffff9ff 	.word	0xfffff9ff
 80016a4:	20000010 	.word	0x20000010
 80016a8:	000f4240 	.word	0x000f4240

080016ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_PWREx_GetVoltageRange+0x14>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	23c0      	movs	r3, #192	@ 0xc0
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4013      	ands	r3, r2
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	0002      	movs	r2, r0
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80016d6:	4913      	ldr	r1, [pc, #76]	@ (8001724 <HAL_PWREx_EnterSTOP2Mode+0x60>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 80016dc:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2207      	movs	r2, #7
 80016e2:	4393      	bics	r3, r2
 80016e4:	001a      	movs	r2, r3
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80016e8:	2102      	movs	r1, #2
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 80016f4:	2104      	movs	r1, #4
 80016f6:	430a      	orrs	r2, r1
 80016f8:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001702:	bf30      	wfi
 8001704:	e002      	b.n	800170c <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001706:	bf40      	sev
    __WFE();
 8001708:	bf20      	wfe
    __WFE();
 800170a:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8001712:	2104      	movs	r1, #4
 8001714:	438a      	bics	r2, r1
 8001716:	611a      	str	r2, [r3, #16]
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40007000 	.word	0x40007000
 8001724:	ffffbfff 	.word	0xffffbfff
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b5b0      	push	{r4, r5, r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001734:	4bc8      	ldr	r3, [pc, #800]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2238      	movs	r2, #56	@ 0x38
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173e:	4bc6      	ldr	r3, [pc, #792]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2203      	movs	r2, #3
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2210      	movs	r2, #16
 800174e:	4013      	ands	r3, r2
 8001750:	d100      	bne.n	8001754 <HAL_RCC_OscConfig+0x28>
 8001752:	e0ee      	b.n	8001932 <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_RCC_OscConfig+0x3e>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b18      	cmp	r3, #24
 800175e:	d000      	beq.n	8001762 <HAL_RCC_OscConfig+0x36>
 8001760:	e093      	b.n	800188a <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d000      	beq.n	800176a <HAL_RCC_OscConfig+0x3e>
 8001768:	e08f      	b.n	800188a <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176a:	4bbb      	ldr	r3, [pc, #748]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d006      	beq.n	8001782 <HAL_RCC_OscConfig+0x56>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f000 fbae 	bl	8001ede <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001786:	4bb4      	ldr	r3, [pc, #720]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2108      	movs	r1, #8
 800178c:	400b      	ands	r3, r1
 800178e:	d004      	beq.n	800179a <HAL_RCC_OscConfig+0x6e>
 8001790:	4bb1      	ldr	r3, [pc, #708]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	21f0      	movs	r1, #240	@ 0xf0
 8001796:	400b      	ands	r3, r1
 8001798:	e005      	b.n	80017a6 <HAL_RCC_OscConfig+0x7a>
 800179a:	49af      	ldr	r1, [pc, #700]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800179c:	2394      	movs	r3, #148	@ 0x94
 800179e:	58cb      	ldr	r3, [r1, r3]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	21f0      	movs	r1, #240	@ 0xf0
 80017a4:	400b      	ands	r3, r1
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d225      	bcs.n	80017f6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fe5c 	bl	800246c <RCC_SetFlashLatencyFromMSIRange>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d002      	beq.n	80017be <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f000 fb90 	bl	8001ede <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017be:	4ba6      	ldr	r3, [pc, #664]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4ba5      	ldr	r3, [pc, #660]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	2108      	movs	r1, #8
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	4ba3      	ldr	r3, [pc, #652]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	22f0      	movs	r2, #240	@ 0xf0
 80017d0:	4393      	bics	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d8:	4b9f      	ldr	r3, [pc, #636]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017de:	4b9e      	ldr	r3, [pc, #632]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a9e      	ldr	r2, [pc, #632]	@ (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	021a      	lsls	r2, r3, #8
 80017ee:	4b9a      	ldr	r3, [pc, #616]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	e027      	b.n	8001846 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f6:	4b98      	ldr	r3, [pc, #608]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b97      	ldr	r3, [pc, #604]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	2108      	movs	r1, #8
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	4b95      	ldr	r3, [pc, #596]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	22f0      	movs	r2, #240	@ 0xf0
 8001808:	4393      	bics	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001810:	4b91      	ldr	r3, [pc, #580]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001816:	4b90      	ldr	r3, [pc, #576]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a90      	ldr	r2, [pc, #576]	@ (8001a5c <HAL_RCC_OscConfig+0x330>)
 800181c:	4013      	ands	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	021a      	lsls	r2, r3, #8
 8001826:	4b8c      	ldr	r3, [pc, #560]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	0018      	movs	r0, r3
 8001838:	f000 fe18 	bl	800246c <RCC_SetFlashLatencyFromMSIRange>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d002      	beq.n	8001846 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	f000 fb4c 	bl	8001ede <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001846:	f000 fc43 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800184a:	0001      	movs	r1, r0
 800184c:	4b82      	ldr	r3, [pc, #520]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800184e:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	220f      	movs	r2, #15
 8001854:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001856:	4a82      	ldr	r2, [pc, #520]	@ (8001a60 <HAL_RCC_OscConfig+0x334>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185a:	001a      	movs	r2, r3
 800185c:	231f      	movs	r3, #31
 800185e:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001860:	000a      	movs	r2, r1
 8001862:	40da      	lsrs	r2, r3
 8001864:	4b7f      	ldr	r3, [pc, #508]	@ (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001866:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001868:	4b7f      	ldr	r3, [pc, #508]	@ (8001a68 <HAL_RCC_OscConfig+0x33c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	250f      	movs	r5, #15
 800186e:	197c      	adds	r4, r7, r5
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fb21 	bl	8000eb8 <HAL_InitTick>
 8001876:	0003      	movs	r3, r0
 8001878:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d056      	beq.n	8001930 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 8001882:	197b      	adds	r3, r7, r5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f000 fb2a 	bl	8001ede <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d034      	beq.n	80018fc <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b70      	ldr	r3, [pc, #448]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001898:	2101      	movs	r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189e:	f7ff fb67 	bl	8000f70 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb62 	bl	8000f70 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e311      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ba:	4b67      	ldr	r3, [pc, #412]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f1      	beq.n	80018a8 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c4:	4b64      	ldr	r3, [pc, #400]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	2108      	movs	r1, #8
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	4b61      	ldr	r3, [pc, #388]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	22f0      	movs	r2, #240	@ 0xf0
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018de:	4b5e      	ldr	r3, [pc, #376]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a5c      	ldr	r2, [pc, #368]	@ (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	021a      	lsls	r2, r3, #8
 80018f4:	4b58      	ldr	r3, [pc, #352]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	e01a      	b.n	8001932 <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018fc:	4b56      	ldr	r3, [pc, #344]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b55      	ldr	r3, [pc, #340]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001908:	f7ff fb32 	bl	8000f70 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001912:	f7ff fb2d 	bl	8000f70 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e2dc      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001924:	4b4c      	ldr	r3, [pc, #304]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x1e6>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001930:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x212>
 800193c:	e065      	b.n	8001a0a <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b10      	cmp	r3, #16
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x224>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b18      	cmp	r3, #24
 8001948:	d10e      	bne.n	8001968 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	4013      	ands	r3, r2
 800195a:	d055      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2dc>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d151      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2ba      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x258>
 8001974:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800197a:	2180      	movs	r1, #128	@ 0x80
 800197c:	0249      	lsls	r1, r1, #9
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e013      	b.n	80019ac <HAL_RCC_OscConfig+0x280>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	23a0      	movs	r3, #160	@ 0xa0
 800198a:	02db      	lsls	r3, r3, #11
 800198c:	429a      	cmp	r2, r3
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x274>
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001996:	21a0      	movs	r1, #160	@ 0xa0
 8001998:	02c9      	lsls	r1, r1, #11
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e005      	b.n	80019ac <HAL_RCC_OscConfig+0x280>
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	4931      	ldr	r1, [pc, #196]	@ (8001a6c <HAL_RCC_OscConfig+0x340>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d014      	beq.n	80019de <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fadc 	bl	8000f70 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019be:	f7ff fad7 	bl	8000f70 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	@ 0x64
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e286      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x292>
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fac7 	bl	8000f70 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fac2 	bl	8000f70 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	@ 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e271      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	029b      	lsls	r3, r3, #10
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2bc>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
 8001a14:	e073      	b.n	8001afe <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2fc>
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d128      	bne.n	8001a74 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d125      	bne.n	8001a74 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_OscConfig+0x314>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e24e      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_RCC_OscConfig+0x344>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	061a      	lsls	r2, r3, #24
 8001a50:	4b01      	ldr	r3, [pc, #4]	@ (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a56:	e052      	b.n	8001afe <HAL_RCC_OscConfig+0x3d2>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	ffff00ff 	.word	0xffff00ff
 8001a60:	08004878 	.word	0x08004878
 8001a64:	20000010 	.word	0x20000010
 8001a68:	20000014 	.word	0x20000014
 8001a6c:	fffaffff 	.word	0xfffaffff
 8001a70:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d026      	beq.n	8001aca <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7c:	4bc7      	ldr	r3, [pc, #796]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4bc6      	ldr	r3, [pc, #792]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	0049      	lsls	r1, r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fa71 	bl	8000f70 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a94:	f7ff fa6c 	bl	8000f70 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e21b      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa6:	4bbd      	ldr	r3, [pc, #756]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	4bba      	ldr	r3, [pc, #744]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4aba      	ldr	r2, [pc, #744]	@ (8001da0 <HAL_RCC_OscConfig+0x674>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061a      	lsls	r2, r3, #24
 8001ac2:	4bb6      	ldr	r3, [pc, #728]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	e019      	b.n	8001afe <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4bb4      	ldr	r3, [pc, #720]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4bb3      	ldr	r3, [pc, #716]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001ad0:	49b4      	ldr	r1, [pc, #720]	@ (8001da4 <HAL_RCC_OscConfig+0x678>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fa4b 	bl	8000f70 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fa46 	bl	8000f70 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1f5      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af2:	4baa      	ldr	r3, [pc, #680]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2208      	movs	r2, #8
 8001b04:	4013      	ands	r3, r2
 8001b06:	d051      	beq.n	8001bac <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d031      	beq.n	8001b74 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001b18:	4aa0      	ldr	r2, [pc, #640]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b1a:	2394      	movs	r3, #148	@ 0x94
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	499f      	ldr	r1, [pc, #636]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	4393      	bics	r3, r2
 8001b24:	2294      	movs	r2, #148	@ 0x94
 8001b26:	508b      	str	r3, [r1, r2]
 8001b28:	e007      	b.n	8001b3a <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001b2a:	4a9c      	ldr	r2, [pc, #624]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b2c:	2394      	movs	r3, #148	@ 0x94
 8001b2e:	58d3      	ldr	r3, [r2, r3]
 8001b30:	499a      	ldr	r1, [pc, #616]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	4313      	orrs	r3, r2
 8001b36:	2294      	movs	r2, #148	@ 0x94
 8001b38:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3a:	4a98      	ldr	r2, [pc, #608]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b3c:	2394      	movs	r3, #148	@ 0x94
 8001b3e:	58d3      	ldr	r3, [r2, r3]
 8001b40:	4996      	ldr	r1, [pc, #600]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	4313      	orrs	r3, r2
 8001b46:	2294      	movs	r2, #148	@ 0x94
 8001b48:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa11 	bl	8000f70 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa0c 	bl	8000f70 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b11      	cmp	r3, #17
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1bb      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b66:	4a8d      	ldr	r2, [pc, #564]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b68:	2394      	movs	r3, #148	@ 0x94
 8001b6a:	58d3      	ldr	r3, [r2, r3]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x428>
 8001b72:	e01b      	b.n	8001bac <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b74:	4a89      	ldr	r2, [pc, #548]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b76:	2394      	movs	r3, #148	@ 0x94
 8001b78:	58d3      	ldr	r3, [r2, r3]
 8001b7a:	4988      	ldr	r1, [pc, #544]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4393      	bics	r3, r2
 8001b80:	2294      	movs	r2, #148	@ 0x94
 8001b82:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f9f4 	bl	8000f70 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f9ef 	bl	8000f70 <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b11      	cmp	r3, #17
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e19e      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ba0:	4a7e      	ldr	r2, [pc, #504]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001ba2:	2394      	movs	r3, #148	@ 0x94
 8001ba4:	58d3      	ldr	r3, [r2, r3]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d100      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x48c>
 8001bb6:	e10d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb8:	201f      	movs	r0, #31
 8001bba:	183b      	adds	r3, r7, r0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8001bc0:	4b76      	ldr	r3, [pc, #472]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001bc2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	055b      	lsls	r3, r3, #21
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d110      	bne.n	8001bee <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b73      	ldr	r3, [pc, #460]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001bce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bd0:	4b72      	ldr	r3, [pc, #456]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001bd2:	2180      	movs	r1, #128	@ 0x80
 8001bd4:	0549      	lsls	r1, r1, #21
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bda:	4b70      	ldr	r3, [pc, #448]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001bdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	055b      	lsls	r3, r3, #21
 8001be2:	4013      	ands	r3, r2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be8:	183b      	adds	r3, r7, r0
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	4b6e      	ldr	r3, [pc, #440]	@ (8001da8 <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bfa:	4b6b      	ldr	r3, [pc, #428]	@ (8001da8 <HAL_RCC_OscConfig+0x67c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001da8 <HAL_RCC_OscConfig+0x67c>)
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	0049      	lsls	r1, r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c08:	f7ff f9b2 	bl	8000f70 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7ff f9ad 	bl	8000f70 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e15c      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c24:	4b60      	ldr	r3, [pc, #384]	@ (8001da8 <HAL_RCC_OscConfig+0x67c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d01e      	beq.n	8001c78 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d010      	beq.n	8001c66 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c44:	4a55      	ldr	r2, [pc, #340]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c46:	2390      	movs	r3, #144	@ 0x90
 8001c48:	58d3      	ldr	r3, [r2, r3]
 8001c4a:	4954      	ldr	r1, [pc, #336]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	2290      	movs	r2, #144	@ 0x90
 8001c52:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c54:	4a51      	ldr	r2, [pc, #324]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c56:	2390      	movs	r3, #144	@ 0x90
 8001c58:	58d3      	ldr	r3, [r2, r3]
 8001c5a:	4950      	ldr	r1, [pc, #320]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	2290      	movs	r2, #144	@ 0x90
 8001c62:	508b      	str	r3, [r1, r2]
 8001c64:	e018      	b.n	8001c98 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c66:	4a4d      	ldr	r2, [pc, #308]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c68:	2390      	movs	r3, #144	@ 0x90
 8001c6a:	58d3      	ldr	r3, [r2, r3]
 8001c6c:	494b      	ldr	r1, [pc, #300]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4313      	orrs	r3, r2
 8001c72:	2290      	movs	r2, #144	@ 0x90
 8001c74:	508b      	str	r3, [r1, r2]
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c78:	4a48      	ldr	r2, [pc, #288]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c7a:	2390      	movs	r3, #144	@ 0x90
 8001c7c:	58d3      	ldr	r3, [r2, r3]
 8001c7e:	4947      	ldr	r1, [pc, #284]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	4393      	bics	r3, r2
 8001c84:	2290      	movs	r2, #144	@ 0x90
 8001c86:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c88:	4a44      	ldr	r2, [pc, #272]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c8a:	2390      	movs	r3, #144	@ 0x90
 8001c8c:	58d3      	ldr	r3, [r2, r3]
 8001c8e:	4943      	ldr	r1, [pc, #268]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	4393      	bics	r3, r2
 8001c94:	2290      	movs	r2, #144	@ 0x90
 8001c96:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d04f      	beq.n	8001d40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f966 	bl	8000f70 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff f961 	bl	8000f70 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8001dac <HAL_RCC_OscConfig+0x680>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e10f      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	4a37      	ldr	r2, [pc, #220]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001cc0:	2390      	movs	r3, #144	@ 0x90
 8001cc2:	58d3      	ldr	r3, [r2, r3]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0ef      	beq.n	8001caa <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2280      	movs	r2, #128	@ 0x80
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d01a      	beq.n	8001d0a <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cd4:	4a31      	ldr	r2, [pc, #196]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001cd6:	2390      	movs	r3, #144	@ 0x90
 8001cd8:	58d3      	ldr	r3, [r2, r3]
 8001cda:	4930      	ldr	r1, [pc, #192]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	2290      	movs	r2, #144	@ 0x90
 8001ce2:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f943 	bl	8000f70 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8001dac <HAL_RCC_OscConfig+0x680>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0f1      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cfa:	4a28      	ldr	r2, [pc, #160]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001cfc:	2390      	movs	r3, #144	@ 0x90
 8001cfe:	58d2      	ldr	r2, [r2, r3]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x5ba>
 8001d08:	e059      	b.n	8001dbe <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d0a:	4a24      	ldr	r2, [pc, #144]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d0c:	2390      	movs	r3, #144	@ 0x90
 8001d0e:	58d3      	ldr	r3, [r2, r3]
 8001d10:	4922      	ldr	r1, [pc, #136]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	4393      	bics	r3, r2
 8001d16:	2290      	movs	r2, #144	@ 0x90
 8001d18:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f928 	bl	8000f70 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <HAL_RCC_OscConfig+0x680>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0d6      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d30:	4a1a      	ldr	r2, [pc, #104]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d32:	2390      	movs	r3, #144	@ 0x90
 8001d34:	58d2      	ldr	r2, [r2, r3]
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1ee      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5f0>
 8001d3e:	e03e      	b.n	8001dbe <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f916 	bl	8000f70 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff f911 	bl	8000f70 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4a15      	ldr	r2, [pc, #84]	@ (8001dac <HAL_RCC_OscConfig+0x680>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0bf      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d60:	2390      	movs	r3, #144	@ 0x90
 8001d62:	58d3      	ldr	r3, [r2, r3]
 8001d64:	2202      	movs	r2, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d1ef      	bne.n	8001d4a <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d6c:	2390      	movs	r3, #144	@ 0x90
 8001d6e:	58d3      	ldr	r3, [r2, r3]
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	4013      	ands	r3, r2
 8001d74:	d023      	beq.n	8001dbe <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d76:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d78:	2390      	movs	r3, #144	@ 0x90
 8001d7a:	58d3      	ldr	r3, [r2, r3]
 8001d7c:	4907      	ldr	r1, [pc, #28]	@ (8001d9c <HAL_RCC_OscConfig+0x670>)
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	4393      	bics	r3, r2
 8001d82:	2290      	movs	r2, #144	@ 0x90
 8001d84:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7ff f8f2 	bl	8000f70 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_RCC_OscConfig+0x680>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d90b      	bls.n	8001db0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0a0      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	80ffffff 	.word	0x80ffffff
 8001da4:	fffffeff 	.word	0xfffffeff
 8001da8:	40007000 	.word	0x40007000
 8001dac:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001db2:	2390      	movs	r3, #144	@ 0x90
 8001db4:	58d2      	ldr	r2, [r2, r3]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1e4      	bne.n	8001d88 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001dca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dcc:	4b46      	ldr	r3, [pc, #280]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001dce:	4947      	ldr	r1, [pc, #284]	@ (8001eec <HAL_RCC_OscConfig+0x7c0>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d100      	bne.n	8001dde <HAL_RCC_OscConfig+0x6b2>
 8001ddc:	e07e      	b.n	8001edc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dde:	4b42      	ldr	r3, [pc, #264]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2238      	movs	r2, #56	@ 0x38
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b18      	cmp	r3, #24
 8001de8:	d100      	bne.n	8001dec <HAL_RCC_OscConfig+0x6c0>
 8001dea:	e075      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d156      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001dfa:	493d      	ldr	r1, [pc, #244]	@ (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8b6 	bl	8000f70 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff f8b1 	bl	8000f70 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e060      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a31      	ldr	r2, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x7c8>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e54:	431a      	orrs	r2, r3
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	0549      	lsls	r1, r1, #21
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0449      	lsls	r1, r1, #17
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f87a 	bl	8000f70 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff f875 	bl	8000f70 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e024      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	049b      	lsls	r3, r3, #18
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x756>
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001ea8:	4911      	ldr	r1, [pc, #68]	@ (8001ef0 <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f85f 	bl	8000f70 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff f85a 	bl	8000f70 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e009      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_RCC_OscConfig+0x7bc>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	049b      	lsls	r3, r3, #18
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x78c>
 8001ed6:	e001      	b.n	8001edc <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b008      	add	sp, #32
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	efffffff 	.word	0xefffffff
 8001ef0:	feffffff 	.word	0xfeffffff
 8001ef4:	11c1808c 	.word	0x11c1808c

08001ef8 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f02:	4b6c      	ldr	r3, [pc, #432]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d911      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f10:	4b68      	ldr	r3, [pc, #416]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2207      	movs	r2, #7
 8001f16:	4393      	bics	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b64      	ldr	r3, [pc, #400]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0bb      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d100      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x48>
 8001f3e:	e064      	b.n	800200a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f48:	4b5b      	ldr	r3, [pc, #364]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	4013      	ands	r3, r2
 8001f52:	d138      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0a9      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f60:	4b55      	ldr	r3, [pc, #340]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d12c      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e09d      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f78:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e092      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	d115      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e086      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa6:	4a44      	ldr	r2, [pc, #272]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	2394      	movs	r3, #148	@ 0x94
 8001faa:	58d3      	ldr	r3, [r2, r3]
 8001fac:	2202      	movs	r2, #2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07a      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	4a40      	ldr	r2, [pc, #256]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	2390      	movs	r3, #144	@ 0x90
 8001fba:	58d3      	ldr	r3, [r2, r3]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e072      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2207      	movs	r2, #7
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fda:	f7fe ffc9 	bl	8000f70 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e009      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe ffc4 	bl	8000f70 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	4a33      	ldr	r2, [pc, #204]	@ (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e059      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2238      	movs	r2, #56	@ 0x38
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	429a      	cmp	r2, r3
 8002008:	d1ec      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a29      	ldr	r2, [pc, #164]	@ (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2207      	movs	r2, #7
 800202e:	4013      	ands	r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d211      	bcs.n	800205a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2207      	movs	r2, #7
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2207      	movs	r2, #7
 800204e:	4013      	ands	r3, r2
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e028      	b.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2204      	movs	r2, #4
 8002060:	4013      	ands	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <HAL_RCC_ClockConfig+0x1cc>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002078:	f000 f82a 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800207c:	0001      	movs	r1, r0
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	220f      	movs	r2, #15
 8002086:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002088:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <HAL_RCC_ClockConfig+0x1d0>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208c:	001a      	movs	r2, r3
 800208e:	231f      	movs	r3, #31
 8002090:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002092:	000a      	movs	r2, r1
 8002094:	40da      	lsrs	r2, r3
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_RCC_ClockConfig+0x1d4>)
 8002098:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800209a:	250b      	movs	r5, #11
 800209c:	197c      	adds	r4, r7, r5
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe ff0a 	bl	8000eb8 <HAL_InitTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80020a8:	197b      	adds	r3, r7, r5
 80020aa:	781b      	ldrb	r3, [r3, #0]
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bdb0      	pop	{r4, r5, r7, pc}
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	00001388 	.word	0x00001388
 80020c0:	fffff0ff 	.word	0xfffff0ff
 80020c4:	ffff8fff 	.word	0xffff8fff
 80020c8:	08004878 	.word	0x08004878
 80020cc:	20000010 	.word	0x20000010

080020d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020de:	4b46      	ldr	r3, [pc, #280]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2238      	movs	r2, #56	@ 0x38
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e8:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4013      	ands	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x34>
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b18      	cmp	r3, #24
 80020fc:	d125      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d122      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002104:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2208      	movs	r2, #8
 800210a:	4013      	ands	r3, r2
 800210c:	d107      	bne.n	800211e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800210e:	4a3a      	ldr	r2, [pc, #232]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8002110:	2394      	movs	r3, #148	@ 0x94
 8002112:	58d3      	ldr	r3, [r2, r3]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	220f      	movs	r2, #15
 8002118:	4013      	ands	r3, r2
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
 800211c:	e005      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800211e:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	220f      	movs	r2, #15
 8002126:	4013      	ands	r3, r2
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	2b0b      	cmp	r3, #11
 800212e:	d901      	bls.n	8002134 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8002134:	4b31      	ldr	r3, [pc, #196]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	58d3      	ldr	r3, [r2, r3]
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11b      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002148:	e018      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d102      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002150:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	e012      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x134>)
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	e00c      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b20      	cmp	r3, #32
 8002166:	d103      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002168:	23fa      	movs	r3, #250	@ 0xfa
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	e005      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b28      	cmp	r3, #40	@ 0x28
 8002174:	d102      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b18      	cmp	r3, #24
 8002180:	d135      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002182:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	2207      	movs	r2, #7
 8002194:	4013      	ands	r3, r2
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d003      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xd8>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0xde>
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 80021aa:	61fb      	str	r3, [r7, #28]
        break;
 80021ac:	e005      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x134>)
 80021b0:	61fb      	str	r3, [r7, #28]
        break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	61fb      	str	r3, [r7, #28]
        break;
 80021b8:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	227f      	movs	r2, #127	@ 0x7f
 80021c2:	4013      	ands	r3, r2
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	4353      	muls	r3, r2
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7fd ffae 	bl	800012c <__udivsi3>
 80021d0:	0003      	movs	r3, r0
 80021d2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x128>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0f5b      	lsrs	r3, r3, #29
 80021da:	2207      	movs	r2, #7
 80021dc:	4013      	ands	r3, r2
 80021de:	3301      	adds	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68b8      	ldr	r0, [r7, #8]
 80021e6:	f7fd ffa1 	bl	800012c <__udivsi3>
 80021ea:	0003      	movs	r3, r0
 80021ec:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80021ee:	6a3b      	ldr	r3, [r7, #32]
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b00a      	add	sp, #40	@ 0x28
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08004890 	.word	0x08004890
 8002200:	00f42400 	.word	0x00f42400
 8002204:	003d0900 	.word	0x003d0900

08002208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <HAL_RCC_GetHCLKFreq+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	20000010 	.word	0x20000010

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8002220:	f7ff fff2 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002224:	0001      	movs	r1, r0
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0b1b      	lsrs	r3, r3, #12
 800222c:	2207      	movs	r2, #7
 800222e:	4013      	ands	r3, r2
 8002230:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	001a      	movs	r2, r3
 8002236:	231f      	movs	r3, #31
 8002238:	4013      	ands	r3, r2
 800223a:	40d9      	lsrs	r1, r3
 800223c:	000b      	movs	r3, r1
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	08004888 	.word	0x08004888

0800224c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	221f      	movs	r2, #31
 8002258:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_CRRCR_HSI48ON */
  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800225a:	4b6e      	ldr	r3, [pc, #440]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	02db      	lsls	r3, r3, #11
 8002262:	401a      	ands	r2, r3
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	02db      	lsls	r3, r3, #11
 8002268:	429a      	cmp	r2, r3
 800226a:	d104      	bne.n	8002276 <HAL_RCC_GetOscConfig+0x2a>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	22a0      	movs	r2, #160	@ 0xa0
 8002270:	02d2      	lsls	r2, r2, #11
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	e010      	b.n	8002298 <HAL_RCC_GetOscConfig+0x4c>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8002276:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	401a      	ands	r2, r3
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	025b      	lsls	r3, r3, #9
 8002284:	429a      	cmp	r2, r3
 8002286:	d104      	bne.n	8002292 <HAL_RCC_GetOscConfig+0x46>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	0252      	lsls	r2, r2, #9
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e002      	b.n	8002298 <HAL_RCC_GetOscConfig+0x4c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8002298:	4b5e      	ldr	r3, [pc, #376]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	401a      	ands	r2, r3
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d104      	bne.n	80022b4 <HAL_RCC_GetOscConfig+0x68>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	0052      	lsls	r2, r2, #1
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetOscConfig+0x6e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  }
  RCC_OscInitStruct->HSICalibrationValue = ((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 80022ba:	4b56      	ldr	r3, [pc, #344]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0e1b      	lsrs	r3, r3, #24
 80022c0:	227f      	movs	r2, #127	@ 0x7f
 80022c2:	401a      	ands	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]

  /* Get the MSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSION) == RCC_CR_MSION)
 80022c8:	4b52      	ldr	r3, [pc, #328]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d103      	bne.n	80022dc <HAL_RCC_GetOscConfig+0x90>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	61da      	str	r2, [r3, #28]
 80022da:	e002      	b.n	80022e2 <HAL_RCC_GetOscConfig+0x96>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 80022e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	22ff      	movs	r2, #255	@ 0xff
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80022f0:	4b48      	ldr	r3, [pc, #288]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	22f0      	movs	r2, #240	@ 0xf0
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the LSE configuration -----------------------------------------------*/
  /* Get BDCR register */
  regval = RCC->BDCR;
 80022fc:	4a45      	ldr	r2, [pc, #276]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80022fe:	2390      	movs	r3, #144	@ 0x90
 8002300:	58d3      	ldr	r3, [r2, r3]
 8002302:	60fb      	str	r3, [r7, #12]
  if (READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8002304:	4a43      	ldr	r2, [pc, #268]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 8002306:	2390      	movs	r3, #144	@ 0x90
 8002308:	58d3      	ldr	r3, [r2, r3]
 800230a:	2204      	movs	r2, #4
 800230c:	4013      	ands	r3, r2
 800230e:	2b04      	cmp	r3, #4
 8002310:	d10f      	bne.n	8002332 <HAL_RCC_GetOscConfig+0xe6>
  {
    if (((regval & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_RCC_GetOscConfig+0xde>
        && ((regval & RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	4013      	ands	r3, r2
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetOscConfig+0xde>
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2285      	movs	r2, #133	@ 0x85
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e01c      	b.n	8002364 <HAL_RCC_GetOscConfig+0x118>
    }
    else
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e018      	b.n	8002364 <HAL_RCC_GetOscConfig+0x118>
    }
  }
  else if (READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8002332:	4a38      	ldr	r2, [pc, #224]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 8002334:	2390      	movs	r3, #144	@ 0x90
 8002336:	58d3      	ldr	r3, [r2, r3]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10e      	bne.n	800235e <HAL_RCC_GetOscConfig+0x112>
  {
    if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN)
 8002340:	4a34      	ldr	r2, [pc, #208]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 8002342:	2390      	movs	r3, #144	@ 0x90
 8002344:	58d3      	ldr	r3, [r2, r3]
 8002346:	2280      	movs	r2, #128	@ 0x80
 8002348:	4013      	ands	r3, r2
 800234a:	2b80      	cmp	r3, #128	@ 0x80
 800234c:	d103      	bne.n	8002356 <HAL_RCC_GetOscConfig+0x10a>
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2281      	movs	r2, #129	@ 0x81
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e006      	b.n	8002364 <HAL_RCC_GetOscConfig+0x118>
    }
    else
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e002      	b.n	8002364 <HAL_RCC_GetOscConfig+0x118>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if (READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8002364:	4a2b      	ldr	r2, [pc, #172]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 8002366:	2394      	movs	r3, #148	@ 0x94
 8002368:	58d3      	ldr	r3, [r2, r3]
 800236a:	2201      	movs	r2, #1
 800236c:	4013      	ands	r3, r2
 800236e:	2b01      	cmp	r3, #1
 8002370:	d103      	bne.n	800237a <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	e002      	b.n	8002380 <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
  }

  if ((RCC->CSR & RCC_CSR_LSIPREDIV) == RCC_CSR_LSIPREDIV)
 8002380:	4a24      	ldr	r2, [pc, #144]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 8002382:	2394      	movs	r3, #148	@ 0x94
 8002384:	58d3      	ldr	r3, [r2, r3]
 8002386:	2204      	movs	r2, #4
 8002388:	4013      	ands	r3, r2
 800238a:	2b04      	cmp	r3, #4
 800238c:	d103      	bne.n	8002396 <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV128;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2204      	movs	r2, #4
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	e002      	b.n	800239c <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#endif /* RCC_CRRCR_HSI48ON */
  /* Get the PLL configuration -----------------------------------------------*/
  if (READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	045b      	lsls	r3, r3, #17
 80023a4:	401a      	ands	r2, r3
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	045b      	lsls	r3, r3, #17
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d103      	bne.n	80023b6 <HAL_RCC_GetOscConfig+0x16a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80023b4:	e002      	b.n	80023bc <HAL_RCC_GetOscConfig+0x170>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2203      	movs	r2, #3
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2270      	movs	r2, #112	@ 0x70
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	227f      	movs	r2, #127	@ 0x7f
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct->PLL.PLLQ = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ)));
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	23e0      	movs	r3, #224	@ 0xe0
 80023e8:	051b      	lsls	r3, r3, #20
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct->PLL.PLLR = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR)));
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0f5b      	lsrs	r3, r3, #29
 80023f6:	075a      	lsls	r2, r3, #29
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct->PLL.PLLP = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP)));
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_GetOscConfig+0x1c8>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	23f8      	movs	r3, #248	@ 0xf8
 8002402:	039b      	lsls	r3, r3, #14
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2207      	movs	r2, #7
 8002426:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCC_GetClockConfig+0x4c>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2207      	movs	r2, #7
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_GetClockConfig+0x4c>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	23f0      	movs	r3, #240	@ 0xf0
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_RCC_GetClockConfig+0x4c>)
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	23e0      	movs	r3, #224	@ 0xe0
 8002448:	01db      	lsls	r3, r3, #7
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCC_GetClockConfig+0x50>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2207      	movs	r2, #7
 8002456:	401a      	ands	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	40022000 	.word	0x40022000

0800246c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002478:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800247a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	4013      	ands	r3, r2
 8002482:	d004      	beq.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002484:	f7ff f912 	bl	80016ac <HAL_PWREx_GetVoltageRange>
 8002488:	0003      	movs	r3, r0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e017      	b.n	80024be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002490:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002492:	4b29      	ldr	r3, [pc, #164]	@ (8002538 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002494:	2180      	movs	r1, #128	@ 0x80
 8002496:	0549      	lsls	r1, r1, #21
 8002498:	430a      	orrs	r2, r1
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58
 800249c:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800249e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	055b      	lsls	r3, r3, #21
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024aa:	f7ff f8ff 	bl	80016ac <HAL_PWREx_GetVoltageRange>
 80024ae:	0003      	movs	r3, r0
 80024b0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80024b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80024b8:	4920      	ldr	r1, [pc, #128]	@ (800253c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d111      	bne.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b80      	cmp	r3, #128	@ 0x80
 80024cc:	d91c      	bls.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2bb0      	cmp	r3, #176	@ 0xb0
 80024d2:	d902      	bls.n	80024da <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024d4:	2302      	movs	r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e016      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b90      	cmp	r3, #144	@ 0x90
 80024de:	d902      	bls.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e0:	2301      	movs	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	e010      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e00d      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80024f0:	d902      	bls.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80024f2:	2302      	movs	r3, #2
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	e007      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b70      	cmp	r3, #112	@ 0x70
 80024fc:	d102      	bne.n	8002504 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80024fe:	2301      	movs	r3, #1
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	e001      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002508:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2207      	movs	r2, #7
 800250e:	4393      	bics	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b006      	add	sp, #24
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	40021000 	.word	0x40021000
 800253c:	efffffff 	.word	0xefffffff
 8002540:	40022000 	.word	0x40022000

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800254c:	2313      	movs	r3, #19
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002554:	2312      	movs	r3, #18
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	4013      	ands	r3, r2
 8002566:	d100      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002568:	e0b7      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2011      	movs	r0, #17
 800256c:	183b      	adds	r3, r7, r0
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002574:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	055b      	lsls	r3, r3, #21
 800257a:	4013      	ands	r3, r2
 800257c:	d110      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002582:	4b48      	ldr	r3, [pc, #288]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002584:	2180      	movs	r1, #128	@ 0x80
 8002586:	0549      	lsls	r1, r1, #21
 8002588:	430a      	orrs	r2, r1
 800258a:	659a      	str	r2, [r3, #88]	@ 0x58
 800258c:	4b45      	ldr	r3, [pc, #276]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	055b      	lsls	r3, r3, #21
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	183b      	adds	r3, r7, r0
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a0:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a6:	2180      	movs	r1, #128	@ 0x80
 80025a8:	0049      	lsls	r1, r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ae:	f7fe fcdf 	bl	8000f70 <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b6:	e00b      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fcda 	bl	8000f70 <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d904      	bls.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025c6:	2313      	movs	r3, #19
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2203      	movs	r2, #3
 80025cc:	701a      	strb	r2, [r3, #0]
        break;
 80025ce:	e005      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025d0:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	d0ed      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80025dc:	2313      	movs	r3, #19
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d168      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e6:	4a2f      	ldr	r2, [pc, #188]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e8:	2390      	movs	r3, #144	@ 0x90
 80025ea:	58d2      	ldr	r2, [r2, r3]
 80025ec:	23c0      	movs	r3, #192	@ 0xc0
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01f      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d01a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002604:	4a27      	ldr	r2, [pc, #156]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	2390      	movs	r3, #144	@ 0x90
 8002608:	58d3      	ldr	r3, [r2, r3]
 800260a:	4a28      	ldr	r2, [pc, #160]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800260c:	4013      	ands	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002610:	4a24      	ldr	r2, [pc, #144]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	2390      	movs	r3, #144	@ 0x90
 8002614:	58d3      	ldr	r3, [r2, r3]
 8002616:	4923      	ldr	r1, [pc, #140]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	0252      	lsls	r2, r2, #9
 800261c:	4313      	orrs	r3, r2
 800261e:	2290      	movs	r2, #144	@ 0x90
 8002620:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002622:	4a20      	ldr	r2, [pc, #128]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	2390      	movs	r3, #144	@ 0x90
 8002626:	58d3      	ldr	r3, [r2, r3]
 8002628:	491e      	ldr	r1, [pc, #120]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	4a21      	ldr	r2, [pc, #132]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800262c:	4013      	ands	r3, r2
 800262e:	2290      	movs	r2, #144	@ 0x90
 8002630:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002632:	491c      	ldr	r1, [pc, #112]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002634:	2290      	movs	r2, #144	@ 0x90
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d017      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fc95 	bl	8000f70 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264a:	e00c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe fc90 	bl	8000f70 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d904      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 800265c:	2313      	movs	r3, #19
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2203      	movs	r2, #3
 8002662:	701a      	strb	r2, [r3, #0]
            break;
 8002664:	e005      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002668:	2390      	movs	r3, #144	@ 0x90
 800266a:	58d3      	ldr	r3, [r2, r3]
 800266c:	2202      	movs	r2, #2
 800266e:	4013      	ands	r3, r2
 8002670:	d0ec      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8002672:	2313      	movs	r3, #19
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267c:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	2390      	movs	r3, #144	@ 0x90
 8002680:	58d3      	ldr	r3, [r2, r3]
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002684:	401a      	ands	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	4906      	ldr	r1, [pc, #24]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268c:	4313      	orrs	r3, r2
 800268e:	2290      	movs	r2, #144	@ 0x90
 8002690:	508b      	str	r3, [r1, r2]
 8002692:	e017      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002694:	2312      	movs	r3, #18
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2213      	movs	r2, #19
 800269a:	18ba      	adds	r2, r7, r2
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e010      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
 80026ac:	fffffcff 	.word	0xfffffcff
 80026b0:	fffeffff 	.word	0xfffeffff
 80026b4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	2312      	movs	r3, #18
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2213      	movs	r2, #19
 80026be:	18ba      	adds	r2, r7, r2
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026c4:	2311      	movs	r3, #17
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b84      	ldr	r3, [pc, #528]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80026d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026d2:	4b83      	ldr	r3, [pc, #524]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80026d4:	4983      	ldr	r1, [pc, #524]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d00b      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e4:	4a7e      	ldr	r2, [pc, #504]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80026e6:	2388      	movs	r3, #136	@ 0x88
 80026e8:	58d3      	ldr	r3, [r2, r3]
 80026ea:	2203      	movs	r2, #3
 80026ec:	4393      	bics	r3, r2
 80026ee:	001a      	movs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	497a      	ldr	r1, [pc, #488]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	2288      	movs	r2, #136	@ 0x88
 80026fa:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2202      	movs	r2, #2
 8002702:	4013      	ands	r3, r2
 8002704:	d00b      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002706:	4a76      	ldr	r2, [pc, #472]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002708:	2388      	movs	r3, #136	@ 0x88
 800270a:	58d3      	ldr	r3, [r2, r3]
 800270c:	220c      	movs	r2, #12
 800270e:	4393      	bics	r3, r2
 8002710:	001a      	movs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4972      	ldr	r1, [pc, #456]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	2288      	movs	r2, #136	@ 0x88
 800271c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2210      	movs	r2, #16
 8002724:	4013      	ands	r3, r2
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002728:	4a6d      	ldr	r2, [pc, #436]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800272a:	2388      	movs	r3, #136	@ 0x88
 800272c:	58d3      	ldr	r3, [r2, r3]
 800272e:	4a6e      	ldr	r2, [pc, #440]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002730:	401a      	ands	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	496a      	ldr	r1, [pc, #424]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002738:	4313      	orrs	r3, r2
 800273a:	2288      	movs	r2, #136	@ 0x88
 800273c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2208      	movs	r2, #8
 8002744:	4013      	ands	r3, r2
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002748:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800274a:	2388      	movs	r3, #136	@ 0x88
 800274c:	58d3      	ldr	r3, [r2, r3]
 800274e:	4a67      	ldr	r2, [pc, #412]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002750:	401a      	ands	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4962      	ldr	r1, [pc, #392]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	2288      	movs	r2, #136	@ 0x88
 800275c:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2220      	movs	r2, #32
 8002764:	4013      	ands	r3, r2
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002768:	4a5d      	ldr	r2, [pc, #372]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800276a:	2388      	movs	r3, #136	@ 0x88
 800276c:	58d3      	ldr	r3, [r2, r3]
 800276e:	4a60      	ldr	r2, [pc, #384]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002770:	401a      	ands	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	495a      	ldr	r1, [pc, #360]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	2288      	movs	r2, #136	@ 0x88
 800277c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	4013      	ands	r3, r2
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002788:	4a55      	ldr	r2, [pc, #340]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800278a:	2388      	movs	r3, #136	@ 0x88
 800278c:	58d3      	ldr	r3, [r2, r3]
 800278e:	4a59      	ldr	r2, [pc, #356]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8002790:	401a      	ands	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	4952      	ldr	r1, [pc, #328]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	2288      	movs	r2, #136	@ 0x88
 800279c:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2280      	movs	r2, #128	@ 0x80
 80027a4:	4013      	ands	r3, r2
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a8:	4a4d      	ldr	r2, [pc, #308]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80027aa:	2388      	movs	r3, #136	@ 0x88
 80027ac:	58d3      	ldr	r3, [r2, r3]
 80027ae:	4a52      	ldr	r2, [pc, #328]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80027b0:	401a      	ands	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	494a      	ldr	r1, [pc, #296]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	2288      	movs	r2, #136	@ 0x88
 80027bc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ca:	4a45      	ldr	r2, [pc, #276]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80027cc:	2388      	movs	r3, #136	@ 0x88
 80027ce:	58d3      	ldr	r3, [r2, r3]
 80027d0:	4a4a      	ldr	r2, [pc, #296]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80027d2:	401a      	ands	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4941      	ldr	r1, [pc, #260]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	2288      	movs	r2, #136	@ 0x88
 80027de:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	4013      	ands	r3, r2
 80027ea:	d017      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	055b      	lsls	r3, r3, #21
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d106      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80027f8:	4b39      	ldr	r3, [pc, #228]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80027fe:	2180      	movs	r1, #128	@ 0x80
 8002800:	0249      	lsls	r1, r1, #9
 8002802:	430a      	orrs	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002806:	4a36      	ldr	r2, [pc, #216]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002808:	2388      	movs	r3, #136	@ 0x88
 800280a:	58d3      	ldr	r3, [r2, r3]
 800280c:	4a3c      	ldr	r2, [pc, #240]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	4932      	ldr	r1, [pc, #200]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	2288      	movs	r2, #136	@ 0x88
 800281a:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	019b      	lsls	r3, r3, #6
 8002824:	4013      	ands	r3, r2
 8002826:	d017      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	051b      	lsls	r3, r3, #20
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002834:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	4b29      	ldr	r3, [pc, #164]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800283a:	2180      	movs	r1, #128	@ 0x80
 800283c:	0449      	lsls	r1, r1, #17
 800283e:	430a      	orrs	r2, r1
 8002840:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002842:	4a27      	ldr	r2, [pc, #156]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002844:	2388      	movs	r3, #136	@ 0x88
 8002846:	58d3      	ldr	r3, [r2, r3]
 8002848:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800284a:	401a      	ands	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	4923      	ldr	r1, [pc, #140]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	2288      	movs	r2, #136	@ 0x88
 8002856:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4013      	ands	r3, r2
 8002862:	d017      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	045b      	lsls	r3, r3, #17
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	0449      	lsls	r1, r1, #17
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800287e:	4a18      	ldr	r2, [pc, #96]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002880:	2388      	movs	r3, #136	@ 0x88
 8002882:	58d3      	ldr	r3, [r2, r3]
 8002884:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	4914      	ldr	r1, [pc, #80]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	2288      	movs	r2, #136	@ 0x88
 8002892:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4013      	ands	r3, r2
 800289e:	d017      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	049b      	lsls	r3, r3, #18
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028b2:	2180      	movs	r1, #128	@ 0x80
 80028b4:	0449      	lsls	r1, r1, #17
 80028b6:	430a      	orrs	r2, r1
 80028b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028bc:	2388      	movs	r3, #136	@ 0x88
 80028be:	58d3      	ldr	r3, [r2, r3]
 80028c0:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80028c2:	401a      	ands	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	4905      	ldr	r1, [pc, #20]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	2288      	movs	r2, #136	@ 0x88
 80028ce:	508b      	str	r3, [r1, r2]

  }

  return status;
 80028d0:	2312      	movs	r3, #18
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	40021000 	.word	0x40021000
 80028e4:	efffffff 	.word	0xefffffff
 80028e8:	fffff3ff 	.word	0xfffff3ff
 80028ec:	fffffcff 	.word	0xfffffcff
 80028f0:	ffffcfff 	.word	0xffffcfff
 80028f4:	fffcffff 	.word	0xfffcffff
 80028f8:	fff3ffff 	.word	0xfff3ffff
 80028fc:	ffcfffff 	.word	0xffcfffff
 8002900:	cfffffff 	.word	0xcfffffff
 8002904:	f3ffffff 	.word	0xf3ffffff
 8002908:	feffffff 	.word	0xfeffffff

0800290c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	429a      	cmp	r2, r3
 8002920:	d154      	bne.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002922:	4ad0      	ldr	r2, [pc, #832]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002924:	2390      	movs	r3, #144	@ 0x90
 8002926:	58d2      	ldr	r2, [r2, r3]
 8002928:	23c0      	movs	r3, #192	@ 0xc0
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	23c0      	movs	r3, #192	@ 0xc0
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	429a      	cmp	r2, r3
 8002938:	d039      	beq.n	80029ae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	23c0      	movs	r3, #192	@ 0xc0
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d901      	bls.n	8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002944:	f000 fbf3 	bl	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	429a      	cmp	r2, r3
 8002950:	d006      	beq.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d00f      	beq.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800295c:	f000 fbe7 	bl	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002960:	4ac0      	ldr	r2, [pc, #768]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002962:	2390      	movs	r3, #144	@ 0x90
 8002964:	58d3      	ldr	r3, [r2, r3]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d001      	beq.n	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800296e:	f000 fbe0 	bl	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	61fb      	str	r3, [r7, #28]
        break;
 8002978:	f000 fbdb 	bl	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800297c:	4ab9      	ldr	r2, [pc, #740]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800297e:	2394      	movs	r3, #148	@ 0x94
 8002980:	58d3      	ldr	r3, [r2, r3]
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d001      	beq.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 800298a:	f000 fbd4 	bl	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800298e:	4ab5      	ldr	r2, [pc, #724]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002990:	2394      	movs	r3, #148	@ 0x94
 8002992:	58d3      	ldr	r3, [r2, r3]
 8002994:	2204      	movs	r2, #4
 8002996:	4013      	ands	r3, r2
 8002998:	2b04      	cmp	r3, #4
 800299a:	d103      	bne.n	80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 800299c:	23fa      	movs	r3, #250	@ 0xfa
 800299e:	61fb      	str	r3, [r7, #28]
        break;
 80029a0:	f000 fbc9 	bl	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 80029a4:	23fa      	movs	r3, #250	@ 0xfa
 80029a6:	01db      	lsls	r3, r3, #7
 80029a8:	61fb      	str	r3, [r7, #28]
        break;
 80029aa:	f000 fbc4 	bl	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80029ae:	4bad      	ldr	r3, [pc, #692]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	401a      	ands	r2, r3
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80029c0:	f000 fbbb 	bl	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 80029c4:	4ba8      	ldr	r3, [pc, #672]	@ (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80029c6:	61fb      	str	r3, [r7, #28]
        break;
 80029c8:	f000 fbb7 	bl	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	029b      	lsls	r3, r3, #10
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d100      	bne.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80029d6:	e0f7      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	429a      	cmp	r2, r3
 80029e0:	d901      	bls.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80029e2:	f000 fbac 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	025b      	lsls	r3, r3, #9
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d100      	bne.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80029f0:	e0ea      	b.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d901      	bls.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80029fc:	f000 fb9f 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	01db      	lsls	r3, r3, #7
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d100      	bne.n	8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a0a:	e180      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d901      	bls.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8002a16:	f000 fb92 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d101      	bne.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8002a24:	f000 fb29 	bl	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d901      	bls.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002a32:	f000 fb84 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d100      	bne.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002a40:	e2f0      	b.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8002a4c:	f000 fb77 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d100      	bne.n	8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8002a5a:	e2b8      	b.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002a66:	f000 fb6a 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d100      	bne.n	8002a76 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002a74:	e249      	b.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8002a80:	f000 fb5d 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b80      	cmp	r3, #128	@ 0x80
 8002a88:	d100      	bne.n	8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8002a8a:	e1e1      	b.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b80      	cmp	r3, #128	@ 0x80
 8002a90:	d901      	bls.n	8002a96 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8002a92:	f000 fb54 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d80f      	bhi.n	8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8002aa2:	f000 fb4c 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002aac:	f000 fb47 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	469f      	mov	pc, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b40      	cmp	r3, #64	@ 0x40
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8002ac2:	e191      	b.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 8002ac4:	f000 fb3b 	bl	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002ac8:	4a66      	ldr	r2, [pc, #408]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002aca:	2388      	movs	r3, #136	@ 0x88
 8002acc:	58d3      	ldr	r3, [r2, r3]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d025      	beq.n	8002b26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d82d      	bhi.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d013      	beq.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d827      	bhi.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d005      	beq.n	8002b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 8002af8:	e020      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002afa:	f7ff fb8f 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002afe:	0003      	movs	r3, r0
 8002b00:	61fb      	str	r3, [r7, #28]
            break;
 8002b02:	e020      	b.n	8002b46 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 8002b04:	f7ff fae4 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	61fb      	str	r3, [r7, #28]
            break;
 8002b0c:	e01b      	b.n	8002b46 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b0e:	4b55      	ldr	r3, [pc, #340]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	401a      	ands	r2, r3
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d10f      	bne.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002b22:	61fb      	str	r3, [r7, #28]
            break;
 8002b24:	e00c      	b.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b26:	4a4f      	ldr	r2, [pc, #316]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b28:	2390      	movs	r3, #144	@ 0x90
 8002b2a:	58d3      	ldr	r3, [r2, r3]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d107      	bne.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	61fb      	str	r3, [r7, #28]
            break;
 8002b3a:	e003      	b.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	e2ff      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002b40:	46c0      	nop			@ (mov r8, r8)
 8002b42:	e2fd      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002b44:	46c0      	nop			@ (mov r8, r8)
        break;
 8002b46:	e2fb      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002b48:	4a46      	ldr	r2, [pc, #280]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b4a:	2388      	movs	r3, #136	@ 0x88
 8002b4c:	58d3      	ldr	r3, [r2, r3]
 8002b4e:	220c      	movs	r2, #12
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d025      	beq.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d82d      	bhi.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d013      	beq.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d827      	bhi.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d005      	beq.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8002b78:	e020      	b.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff fb4f 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61fb      	str	r3, [r7, #28]
            break;
 8002b82:	e020      	b.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 8002b84:	f7ff faa4 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	61fb      	str	r3, [r7, #28]
            break;
 8002b8c:	e01b      	b.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b8e:	4b35      	ldr	r3, [pc, #212]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	401a      	ands	r2, r3
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 8002ba0:	4b33      	ldr	r3, [pc, #204]	@ (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002ba2:	61fb      	str	r3, [r7, #28]
            break;
 8002ba4:	e00c      	b.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002ba8:	2390      	movs	r3, #144	@ 0x90
 8002baa:	58d3      	ldr	r3, [r2, r3]
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	61fb      	str	r3, [r7, #28]
            break;
 8002bba:	e003      	b.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	e2bf      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002bc0:	46c0      	nop			@ (mov r8, r8)
 8002bc2:	e2bd      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002bc4:	46c0      	nop			@ (mov r8, r8)
        break;
 8002bc6:	e2bb      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f7ff fb28 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	61fb      	str	r3, [r7, #28]
        break;
 8002bd0:	e2b6      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002bd2:	4a24      	ldr	r2, [pc, #144]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002bd4:	2388      	movs	r3, #136	@ 0x88
 8002bd6:	58d2      	ldr	r2, [r2, r3]
 8002bd8:	23c0      	movs	r3, #192	@ 0xc0
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	23c0      	movs	r3, #192	@ 0xc0
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d02d      	beq.n	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	23c0      	movs	r3, #192	@ 0xc0
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d833      	bhi.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d017      	beq.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d829      	bhi.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d005      	beq.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 8002c18:	e020      	b.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002c1a:	f7ff faff 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	61fb      	str	r3, [r7, #28]
            break;
 8002c22:	e028      	b.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 8002c24:	f7ff fa54 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61fb      	str	r3, [r7, #28]
            break;
 8002c2c:	e023      	b.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	401a      	ands	r2, r3
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d10f      	bne.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002c42:	61fb      	str	r3, [r7, #28]
            break;
 8002c44:	e00c      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002c46:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002c48:	2390      	movs	r3, #144	@ 0x90
 8002c4a:	58d3      	ldr	r3, [r2, r3]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d10f      	bne.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	61fb      	str	r3, [r7, #28]
            break;
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	e26f      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	e26d      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	0001e848 	.word	0x0001e848
 8002c6c:	080048c0 	.word	0x080048c0
 8002c70:	00f42400 	.word	0x00f42400
            break;
 8002c74:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c76:	e263      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8002c78:	4ac1      	ldr	r2, [pc, #772]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002c7a:	2388      	movs	r3, #136	@ 0x88
 8002c7c:	58d2      	ldr	r2, [r2, r3]
 8002c7e:	23c0      	movs	r3, #192	@ 0xc0
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	23c0      	movs	r3, #192	@ 0xc0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d02d      	beq.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	23c0      	movs	r3, #192	@ 0xc0
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d833      	bhi.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d017      	beq.n	8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	2380      	movs	r3, #128	@ 0x80
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d829      	bhi.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d005      	beq.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 8002cbe:	e020      	b.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f7ff faac 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	61fb      	str	r3, [r7, #28]
            break;
 8002cc8:	e020      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 8002cca:	f7ff fa01 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	61fb      	str	r3, [r7, #28]
            break;
 8002cd2:	e01b      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002cd4:	4baa      	ldr	r3, [pc, #680]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	401a      	ands	r2, r3
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10f      	bne.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 8002ce6:	4ba7      	ldr	r3, [pc, #668]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002ce8:	61fb      	str	r3, [r7, #28]
            break;
 8002cea:	e00c      	b.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002cec:	4aa4      	ldr	r2, [pc, #656]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002cee:	2390      	movs	r3, #144	@ 0x90
 8002cf0:	58d3      	ldr	r3, [r2, r3]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	61fb      	str	r3, [r7, #28]
            break;
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	e21c      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	e21a      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002d0a:	46c0      	nop			@ (mov r8, r8)
        break;
 8002d0c:	e218      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002d0e:	4a9c      	ldr	r2, [pc, #624]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002d10:	2388      	movs	r3, #136	@ 0x88
 8002d12:	58d2      	ldr	r2, [r2, r3]
 8002d14:	23c0      	movs	r3, #192	@ 0xc0
 8002d16:	059b      	lsls	r3, r3, #22
 8002d18:	4013      	ands	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	059b      	lsls	r3, r3, #22
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d012      	beq.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	2380      	movs	r3, #128	@ 0x80
 8002d2a:	059b      	lsls	r3, r3, #22
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d825      	bhi.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d014      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 8002d40:	e01c      	b.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 8002d42:	f7ff f9c5 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002d46:	0003      	movs	r3, r0
 8002d48:	61fb      	str	r3, [r7, #28]
            break;
 8002d4a:	e018      	b.n	8002d7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	401a      	ands	r2, r3
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 8002d5e:	4b89      	ldr	r3, [pc, #548]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002d60:	61fb      	str	r3, [r7, #28]
            break;
 8002d62:	e00c      	b.n	8002d7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
            break;
 8002d68:	e009      	b.n	8002d7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002d6a:	2408      	movs	r4, #8
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f9f4 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61fb      	str	r3, [r7, #28]
            break;
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8002d7c:	46c0      	nop			@ (mov r8, r8)
        break;
 8002d7e:	e1df      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002d80:	4a7f      	ldr	r2, [pc, #508]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002d82:	2388      	movs	r3, #136	@ 0x88
 8002d84:	58d2      	ldr	r2, [r2, r3]
 8002d86:	23c0      	movs	r3, #192	@ 0xc0
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	019b      	lsls	r3, r3, #6
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d017      	beq.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	019b      	lsls	r3, r3, #6
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d81e      	bhi.n	8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	015b      	lsls	r3, r3, #5
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d005      	beq.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 8002db2:	e015      	b.n	8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7ff fa32 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002db8:	0003      	movs	r3, r0
 8002dba:	61fb      	str	r3, [r7, #28]
            break;
 8002dbc:	e013      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 8002dbe:	f7ff f987 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	61fb      	str	r3, [r7, #28]
            break;
 8002dc6:	e00e      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002dc8:	4b6d      	ldr	r3, [pc, #436]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d104      	bne.n	8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002ddc:	61fb      	str	r3, [r7, #28]
            break;
 8002dde:	e001      	b.n	8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 8002de0:	46c0      	nop			@ (mov r8, r8)
 8002de2:	e1ad      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002de4:	46c0      	nop			@ (mov r8, r8)
        break;
 8002de6:	e1ab      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002de8:	4a65      	ldr	r2, [pc, #404]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002dea:	2388      	movs	r3, #136	@ 0x88
 8002dec:	58d2      	ldr	r2, [r2, r3]
 8002dee:	23c0      	movs	r3, #192	@ 0xc0
 8002df0:	029b      	lsls	r3, r3, #10
 8002df2:	4013      	ands	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d017      	beq.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d81e      	bhi.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	025b      	lsls	r3, r3, #9
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d005      	beq.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 8002e1a:	e015      	b.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7ff f9fe 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61fb      	str	r3, [r7, #28]
            break;
 8002e24:	e013      	b.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 8002e26:	f7ff f953 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	61fb      	str	r3, [r7, #28]
            break;
 8002e2e:	e00e      	b.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e30:	4b53      	ldr	r3, [pc, #332]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	401a      	ands	r2, r3
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d104      	bne.n	8002e4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 8002e42:	4b50      	ldr	r3, [pc, #320]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002e44:	61fb      	str	r3, [r7, #28]
            break;
 8002e46:	e001      	b.n	8002e4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	e179      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002e4c:	46c0      	nop			@ (mov r8, r8)
        break;
 8002e4e:	e177      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002e50:	4a4b      	ldr	r2, [pc, #300]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002e52:	2388      	movs	r3, #136	@ 0x88
 8002e54:	58d2      	ldr	r2, [r2, r3]
 8002e56:	23c0      	movs	r3, #192	@ 0xc0
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	23c0      	movs	r3, #192	@ 0xc0
 8002e62:	031b      	lsls	r3, r3, #12
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d03d      	beq.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	23c0      	movs	r3, #192	@ 0xc0
 8002e6c:	031b      	lsls	r3, r3, #12
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d843      	bhi.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	2380      	movs	r3, #128	@ 0x80
 8002e76:	031b      	lsls	r3, r3, #12
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d027      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	031b      	lsls	r3, r3, #12
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d839      	bhi.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	2380      	movs	r3, #128	@ 0x80
 8002e90:	02db      	lsls	r3, r3, #11
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 8002e96:	e030      	b.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002e98:	f7ff f9c0 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	61fb      	str	r3, [r7, #28]
            break;
 8002ea0:	e032      	b.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002ea2:	4a37      	ldr	r2, [pc, #220]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ea4:	2394      	movs	r3, #148	@ 0x94
 8002ea6:	58d3      	ldr	r3, [r2, r3]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d126      	bne.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002eb0:	4a33      	ldr	r2, [pc, #204]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002eb2:	2394      	movs	r3, #148	@ 0x94
 8002eb4:	58d3      	ldr	r3, [r2, r3]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d102      	bne.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 8002ebe:	23fa      	movs	r3, #250	@ 0xfa
 8002ec0:	61fb      	str	r3, [r7, #28]
            break;
 8002ec2:	e01c      	b.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 8002ec4:	23fa      	movs	r3, #250	@ 0xfa
 8002ec6:	01db      	lsls	r3, r3, #7
 8002ec8:	61fb      	str	r3, [r7, #28]
            break;
 8002eca:	e018      	b.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d111      	bne.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 8002ede:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002ee0:	61fb      	str	r3, [r7, #28]
            break;
 8002ee2:	e00e      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ee4:	4a26      	ldr	r2, [pc, #152]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ee6:	2390      	movs	r3, #144	@ 0x90
 8002ee8:	58d3      	ldr	r3, [r2, r3]
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	61fb      	str	r3, [r7, #28]
            break;
 8002ef8:	e005      	b.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	e120      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	e11e      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	e11c      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002f06:	46c0      	nop			@ (mov r8, r8)
        break;
 8002f08:	e11a      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002f0c:	2388      	movs	r3, #136	@ 0x88
 8002f0e:	58d2      	ldr	r2, [r2, r3]
 8002f10:	23c0      	movs	r3, #192	@ 0xc0
 8002f12:	039b      	lsls	r3, r3, #14
 8002f14:	4013      	ands	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	23c0      	movs	r3, #192	@ 0xc0
 8002f1c:	039b      	lsls	r3, r3, #14
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d042      	beq.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	23c0      	movs	r3, #192	@ 0xc0
 8002f26:	039b      	lsls	r3, r3, #14
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d848      	bhi.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	2380      	movs	r3, #128	@ 0x80
 8002f30:	039b      	lsls	r3, r3, #14
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d02c      	beq.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	039b      	lsls	r3, r3, #14
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d83e      	bhi.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	035b      	lsls	r3, r3, #13
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 8002f50:	e035      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002f52:	f7ff f963 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002f56:	0003      	movs	r3, r0
 8002f58:	61fb      	str	r3, [r7, #28]
            break;
 8002f5a:	e037      	b.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002f5c:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002f5e:	2394      	movs	r3, #148	@ 0x94
 8002f60:	58d3      	ldr	r3, [r2, r3]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d12b      	bne.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002f6a:	4a05      	ldr	r2, [pc, #20]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002f6c:	2394      	movs	r3, #148	@ 0x94
 8002f6e:	58d3      	ldr	r3, [r2, r3]
 8002f70:	2204      	movs	r2, #4
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d107      	bne.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8002f78:	23fa      	movs	r3, #250	@ 0xfa
 8002f7a:	61fb      	str	r3, [r7, #28]
            break;
 8002f7c:	e021      	b.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	40021000 	.word	0x40021000
 8002f84:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8002f88:	23fa      	movs	r3, #250	@ 0xfa
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	61fb      	str	r3, [r7, #28]
            break;
 8002f8e:	e018      	b.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f90:	4b6e      	ldr	r3, [pc, #440]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	401a      	ands	r2, r3
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d111      	bne.n	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 8002fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8002fa4:	61fb      	str	r3, [r7, #28]
            break;
 8002fa6:	e00e      	b.n	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fa8:	4a68      	ldr	r2, [pc, #416]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002faa:	2390      	movs	r3, #144	@ 0x90
 8002fac:	58d3      	ldr	r3, [r2, r3]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d109      	bne.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	61fb      	str	r3, [r7, #28]
            break;
 8002fbc:	e005      	b.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	e0be      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	e0bc      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	e0ba      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002fca:	46c0      	nop			@ (mov r8, r8)
        break;
 8002fcc:	e0b8      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8002fce:	4a5f      	ldr	r2, [pc, #380]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002fd0:	2388      	movs	r3, #136	@ 0x88
 8002fd2:	58d2      	ldr	r2, [r2, r3]
 8002fd4:	2380      	movs	r3, #128	@ 0x80
 8002fd6:	045b      	lsls	r3, r3, #17
 8002fd8:	4013      	ands	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	045b      	lsls	r3, r3, #17
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d011      	beq.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 8002fec:	e019      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002fee:	4b57      	ldr	r3, [pc, #348]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	23e0      	movs	r3, #224	@ 0xe0
 8002ff4:	01db      	lsls	r3, r3, #7
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d104      	bne.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002ffa:	f7ff f90f 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002ffe:	0003      	movs	r3, r0
 8003000:	61fb      	str	r3, [r7, #28]
            break;
 8003002:	e00e      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8003004:	f7ff f90a 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8003008:	0003      	movs	r3, r0
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
            break;
 800300e:	e008      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003010:	2408      	movs	r4, #8
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0018      	movs	r0, r3
 8003016:	f000 f8a1 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800301a:	193b      	adds	r3, r7, r4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61fb      	str	r3, [r7, #28]
            break;
 8003020:	46c0      	nop			@ (mov r8, r8)
        break;
 8003022:	e08d      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8003024:	4a49      	ldr	r2, [pc, #292]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003026:	2388      	movs	r3, #136	@ 0x88
 8003028:	58d2      	ldr	r2, [r2, r3]
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	049b      	lsls	r3, r3, #18
 800302e:	4013      	ands	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	049b      	lsls	r3, r3, #18
 800303e:	429a      	cmp	r2, r3
 8003040:	d011      	beq.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 8003042:	e019      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8003044:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	23e0      	movs	r3, #224	@ 0xe0
 800304a:	01db      	lsls	r3, r3, #7
 800304c:	4013      	ands	r3, r2
 800304e:	d104      	bne.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff f8e4 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8003054:	0003      	movs	r3, r0
 8003056:	61fb      	str	r3, [r7, #28]
            break;
 8003058:	e00e      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800305a:	f7ff f8df 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 800305e:	0003      	movs	r3, r0
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
            break;
 8003064:	e008      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003066:	2408      	movs	r4, #8
 8003068:	193b      	adds	r3, r7, r4
 800306a:	0018      	movs	r0, r3
 800306c:	f000 f876 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003070:	193b      	adds	r3, r7, r4
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	61fb      	str	r3, [r7, #28]
            break;
 8003076:	46c0      	nop			@ (mov r8, r8)
        break;
 8003078:	e062      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800307a:	4a34      	ldr	r2, [pc, #208]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800307c:	2388      	movs	r3, #136	@ 0x88
 800307e:	58d2      	ldr	r2, [r2, r3]
 8003080:	23c0      	movs	r3, #192	@ 0xc0
 8003082:	051b      	lsls	r3, r3, #20
 8003084:	4013      	ands	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	23c0      	movs	r3, #192	@ 0xc0
 800308c:	051b      	lsls	r3, r3, #20
 800308e:	429a      	cmp	r2, r3
 8003090:	d017      	beq.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	23c0      	movs	r3, #192	@ 0xc0
 8003096:	051b      	lsls	r3, r3, #20
 8003098:	429a      	cmp	r2, r3
 800309a:	d844      	bhi.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d033      	beq.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	051b      	lsls	r3, r3, #20
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d83a      	bhi.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d034      	beq.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	04db      	lsls	r3, r3, #19
 80030bc:	429a      	cmp	r2, r3
 80030be:	d003      	beq.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 80030c0:	e031      	b.n	8003126 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80030c4:	61fb      	str	r3, [r7, #28]
            break;
 80030c6:	e031      	b.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80030c8:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d12a      	bne.n	800312a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80030d4:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2208      	movs	r2, #8
 80030da:	4013      	ands	r3, r2
 80030dc:	d005      	beq.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	220f      	movs	r2, #15
 80030e6:	4013      	ands	r3, r2
 80030e8:	e005      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80030ea:	4a18      	ldr	r2, [pc, #96]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80030ec:	2394      	movs	r3, #148	@ 0x94
 80030ee:	58d3      	ldr	r3, [r2, r3]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	220f      	movs	r2, #15
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0b      	cmp	r3, #11
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 80030fe:	230b      	movs	r3, #11
 8003100:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	58d3      	ldr	r3, [r2, r3]
 800310a:	61fb      	str	r3, [r7, #28]
            break;
 800310c:	e00d      	b.n	800312a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800310e:	2408      	movs	r4, #8
 8003110:	193b      	adds	r3, r7, r4
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f822 	bl	800315c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003118:	193b      	adds	r3, r7, r4
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	61fb      	str	r3, [r7, #28]
            break;
 800311e:	e005      	b.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
            break;
 8003124:	e002      	b.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	e00a      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800312a:	46c0      	nop			@ (mov r8, r8)
        break;
 800312c:	e008      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	e006      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	e004      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	e002      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	e000      	b.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800313e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8003140:	69fb      	ldr	r3, [r7, #28]
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b009      	add	sp, #36	@ 0x24
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	40021000 	.word	0x40021000
 8003150:	00f42400 	.word	0x00f42400
 8003154:	02dc6c00 	.word	0x02dc6c00
 8003158:	08004890 	.word	0x08004890

0800315c <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003164:	4b58      	ldr	r3, [pc, #352]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	227f      	movs	r2, #127	@ 0x7f
 800316c:	4013      	ands	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003170:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2203      	movs	r2, #3
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800317a:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	2207      	movs	r2, #7
 8003182:	4013      	ands	r3, r2
 8003184:	3301      	adds	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003188:	4b4f      	ldr	r3, [pc, #316]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2208      	movs	r2, #8
 800318e:	4013      	ands	r3, r2
 8003190:	d005      	beq.n	800319e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8003192:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	220f      	movs	r2, #15
 800319a:	4013      	ands	r3, r2
 800319c:	e005      	b.n	80031aa <HAL_RCCEx_GetPLLClockFreq+0x4e>
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80031a0:	2394      	movs	r3, #148	@ 0x94
 80031a2:	58d3      	ldr	r3, [r2, r3]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	220f      	movs	r2, #15
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0b      	cmp	r3, #11
 80031b0:	d901      	bls.n	80031b6 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80031b2:	230b      	movs	r3, #11
 80031b4:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d020      	beq.n	80031fe <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d827      	bhi.n	8003212 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCCEx_GetPLLClockFreq+0x86>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d121      	bne.n	8003212 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	483e      	ldr	r0, [pc, #248]	@ (80032cc <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80031d2:	f7fc ffab 	bl	800012c <__udivsi3>
 80031d6:	0003      	movs	r3, r0
 80031d8:	001a      	movs	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4353      	muls	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
      break;
 80031e0:	e025      	b.n	800322e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80031e2:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	58d3      	ldr	r3, [r2, r3]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7fc ff9d 	bl	800012c <__udivsi3>
 80031f2:	0003      	movs	r3, r0
 80031f4:	001a      	movs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	4353      	muls	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
      break;
 80031fc:	e017      	b.n	800322e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	4834      	ldr	r0, [pc, #208]	@ (80032d4 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8003202:	f7fc ff93 	bl	800012c <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	001a      	movs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4353      	muls	r3, r2
 800320e:	61fb      	str	r3, [r7, #28]
      break;
 8003210:	e00d      	b.n	800322e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	58d3      	ldr	r3, [r2, r3]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fc ff85 	bl	800012c <__udivsi3>
 8003222:	0003      	movs	r3, r0
 8003224:	001a      	movs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4353      	muls	r3, r2
 800322a:	61fb      	str	r3, [r7, #28]
      break;
 800322c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 800322e:	4b26      	ldr	r3, [pc, #152]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	025b      	lsls	r3, r3, #9
 8003236:	4013      	ands	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800323a:	4b23      	ldr	r3, [pc, #140]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800323c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 800323e:	0c5b      	lsrs	r3, r3, #17
 8003240:	221f      	movs	r2, #31
 8003242:	4013      	ands	r3, r2
 8003244:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003246:	0019      	movs	r1, r3
 8003248:	69f8      	ldr	r0, [r7, #28]
 800324a:	f7fc ff6f 	bl	800012c <__udivsi3>
 800324e:	0003      	movs	r3, r0
 8003250:	001a      	movs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e002      	b.n	800325e <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	045b      	lsls	r3, r3, #17
 8003266:	4013      	ands	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800326a:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800326c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 800326e:	0e5b      	lsrs	r3, r3, #25
 8003270:	2207      	movs	r2, #7
 8003272:	4013      	ands	r3, r2
 8003274:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003276:	0019      	movs	r1, r3
 8003278:	69f8      	ldr	r0, [r7, #28]
 800327a:	f7fc ff57 	bl	800012c <__udivsi3>
 800327e:	0003      	movs	r3, r0
 8003280:	001a      	movs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e002      	b.n	800328e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 800328e:	4b0e      	ldr	r3, [pc, #56]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	055b      	lsls	r3, r3, #21
 8003296:	4013      	ands	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800329c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 800329e:	0f5b      	lsrs	r3, r3, #29
 80032a0:	2207      	movs	r2, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80032a6:	0019      	movs	r1, r3
 80032a8:	69f8      	ldr	r0, [r7, #28]
 80032aa:	f7fc ff3f 	bl	800012c <__udivsi3>
 80032ae:	0003      	movs	r3, r0
 80032b0:	001a      	movs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b008      	add	sp, #32
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	40021000 	.word	0x40021000
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	08004890 	.word	0x08004890
 80032d4:	003d0900 	.word	0x003d0900

080032d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e046      	b.n	8003378 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2288      	movs	r2, #136	@ 0x88
 80032ee:	589b      	ldr	r3, [r3, r2]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2284      	movs	r2, #132	@ 0x84
 80032f8:	2100      	movs	r1, #0
 80032fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7fd fbaa 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2288      	movs	r2, #136	@ 0x88
 8003308:	2124      	movs	r1, #36	@ 0x24
 800330a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2101      	movs	r1, #1
 8003318:	438a      	bics	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fa8a 	bl	8003840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0018      	movs	r0, r3
 8003330:	f000 f8cc 	bl	80034cc <UART_SetConfig>
 8003334:	0003      	movs	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e01c      	b.n	8003378 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	490d      	ldr	r1, [pc, #52]	@ (8003380 <HAL_UART_Init+0xa8>)
 800334a:	400a      	ands	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	212a      	movs	r1, #42	@ 0x2a
 800335a:	438a      	bics	r2, r1
 800335c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f000 fb19 	bl	80039a8 <UART_CheckIdleState>
 8003376:	0003      	movs	r3, r0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}
 8003380:	ffffb7ff 	.word	0xffffb7ff

08003384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	1dbb      	adds	r3, r7, #6
 8003392:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2288      	movs	r2, #136	@ 0x88
 8003398:	589b      	ldr	r3, [r3, r2]
 800339a:	2b20      	cmp	r3, #32
 800339c:	d000      	beq.n	80033a0 <HAL_UART_Transmit+0x1c>
 800339e:	e090      	b.n	80034c2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_UART_Transmit+0x2a>
 80033a6:	1dbb      	adds	r3, r7, #6
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e088      	b.n	80034c4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	015b      	lsls	r3, r3, #5
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d109      	bne.n	80033d2 <HAL_UART_Transmit+0x4e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	d001      	beq.n	80033d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e078      	b.n	80034c4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2290      	movs	r2, #144	@ 0x90
 80033d6:	2100      	movs	r1, #0
 80033d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2288      	movs	r2, #136	@ 0x88
 80033de:	2121      	movs	r1, #33	@ 0x21
 80033e0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e2:	f7fd fdc5 	bl	8000f70 <HAL_GetTick>
 80033e6:	0003      	movs	r3, r0
 80033e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1dba      	adds	r2, r7, #6
 80033ee:	2154      	movs	r1, #84	@ 0x54
 80033f0:	8812      	ldrh	r2, [r2, #0]
 80033f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1dba      	adds	r2, r7, #6
 80033f8:	2156      	movs	r1, #86	@ 0x56
 80033fa:	8812      	ldrh	r2, [r2, #0]
 80033fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	015b      	lsls	r3, r3, #5
 8003406:	429a      	cmp	r2, r3
 8003408:	d108      	bne.n	800341c <HAL_UART_Transmit+0x98>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e003      	b.n	8003424 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003424:	e030      	b.n	8003488 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	0013      	movs	r3, r2
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	@ 0x80
 8003434:	f000 fb62 	bl	8003afc <UART_WaitOnFlagUntilTimeout>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d005      	beq.n	8003448 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2288      	movs	r2, #136	@ 0x88
 8003440:	2120      	movs	r1, #32
 8003442:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e03d      	b.n	80034c4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	001a      	movs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	05d2      	lsls	r2, r2, #23
 800345a:	0dd2      	lsrs	r2, r2, #23
 800345c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	3302      	adds	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e007      	b.n	8003476 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	3301      	adds	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2256      	movs	r2, #86	@ 0x56
 800347a:	5a9b      	ldrh	r3, [r3, r2]
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b299      	uxth	r1, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2256      	movs	r2, #86	@ 0x56
 8003486:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2256      	movs	r2, #86	@ 0x56
 800348c:	5a9b      	ldrh	r3, [r3, r2]
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1c8      	bne.n	8003426 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	0013      	movs	r3, r2
 800349e:	2200      	movs	r2, #0
 80034a0:	2140      	movs	r1, #64	@ 0x40
 80034a2:	f000 fb2b 	bl	8003afc <UART_WaitOnFlagUntilTimeout>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2288      	movs	r2, #136	@ 0x88
 80034ae:	2120      	movs	r1, #32
 80034b0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e006      	b.n	80034c4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2288      	movs	r2, #136	@ 0x88
 80034ba:	2120      	movs	r1, #32
 80034bc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b008      	add	sp, #32
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b092      	sub	sp, #72	@ 0x48
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d4:	231f      	movs	r3, #31
 80034d6:	2220      	movs	r2, #32
 80034d8:	189b      	adds	r3, r3, r2
 80034da:	19db      	adds	r3, r3, r7
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4ac6      	ldr	r2, [pc, #792]	@ (8003818 <UART_SetConfig+0x34c>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350a:	430b      	orrs	r3, r1
 800350c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4ac1      	ldr	r2, [pc, #772]	@ (800381c <UART_SetConfig+0x350>)
 8003516:	4013      	ands	r3, r2
 8003518:	0018      	movs	r0, r3
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	0003      	movs	r3, r0
 8003524:	430b      	orrs	r3, r1
 8003526:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4abb      	ldr	r2, [pc, #748]	@ (8003820 <UART_SetConfig+0x354>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <UART_SetConfig+0x80>
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4ab9      	ldr	r2, [pc, #740]	@ (8003824 <UART_SetConfig+0x358>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003548:	4313      	orrs	r3, r2
 800354a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4ab5      	ldr	r2, [pc, #724]	@ (8003828 <UART_SetConfig+0x35c>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355e:	430b      	orrs	r3, r1
 8003560:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	220f      	movs	r2, #15
 800356a:	4393      	bics	r3, r2
 800356c:	0018      	movs	r0, r3
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	0003      	movs	r3, r0
 8003578:	430b      	orrs	r3, r1
 800357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4aaa      	ldr	r2, [pc, #680]	@ (800382c <UART_SetConfig+0x360>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d102      	bne.n	800358c <UART_SetConfig+0xc0>
 8003586:	2301      	movs	r3, #1
 8003588:	643b      	str	r3, [r7, #64]	@ 0x40
 800358a:	e02b      	b.n	80035e4 <UART_SetConfig+0x118>
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4aa7      	ldr	r2, [pc, #668]	@ (8003830 <UART_SetConfig+0x364>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d102      	bne.n	800359c <UART_SetConfig+0xd0>
 8003596:	2302      	movs	r3, #2
 8003598:	643b      	str	r3, [r7, #64]	@ 0x40
 800359a:	e023      	b.n	80035e4 <UART_SetConfig+0x118>
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4aa4      	ldr	r2, [pc, #656]	@ (8003834 <UART_SetConfig+0x368>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d103      	bne.n	80035ae <UART_SetConfig+0xe2>
 80035a6:	2380      	movs	r3, #128	@ 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ac:	e01a      	b.n	80035e4 <UART_SetConfig+0x118>
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4aa1      	ldr	r2, [pc, #644]	@ (8003838 <UART_SetConfig+0x36c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <UART_SetConfig+0xf4>
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80035be:	e011      	b.n	80035e4 <UART_SetConfig+0x118>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a96      	ldr	r2, [pc, #600]	@ (8003820 <UART_SetConfig+0x354>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d102      	bne.n	80035d0 <UART_SetConfig+0x104>
 80035ca:	2310      	movs	r3, #16
 80035cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ce:	e009      	b.n	80035e4 <UART_SetConfig+0x118>
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a93      	ldr	r2, [pc, #588]	@ (8003824 <UART_SetConfig+0x358>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d102      	bne.n	80035e0 <UART_SetConfig+0x114>
 80035da:	2308      	movs	r3, #8
 80035dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80035de:	e001      	b.n	80035e4 <UART_SetConfig+0x118>
 80035e0:	2300      	movs	r3, #0
 80035e2:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a8d      	ldr	r2, [pc, #564]	@ (8003820 <UART_SetConfig+0x354>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d005      	beq.n	80035fa <UART_SetConfig+0x12e>
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a8c      	ldr	r2, [pc, #560]	@ (8003824 <UART_SetConfig+0x358>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d000      	beq.n	80035fa <UART_SetConfig+0x12e>
 80035f8:	e06f      	b.n	80036da <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80035fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff f985 	bl	800290c <HAL_RCCEx_GetPeriphCLKFreq>
 8003602:	0003      	movs	r3, r0
 8003604:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d100      	bne.n	800360e <UART_SetConfig+0x142>
 800360c:	e0ec      	b.n	80037e8 <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003612:	4b8a      	ldr	r3, [pc, #552]	@ (800383c <UART_SetConfig+0x370>)
 8003614:	0052      	lsls	r2, r2, #1
 8003616:	5ad3      	ldrh	r3, [r2, r3]
 8003618:	0019      	movs	r1, r3
 800361a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800361c:	f7fc fd86 	bl	800012c <__udivsi3>
 8003620:	0003      	movs	r3, r0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	0013      	movs	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	189b      	adds	r3, r3, r2
 800362e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d305      	bcc.n	8003640 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800363a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800363c:	429a      	cmp	r2, r3
 800363e:	d906      	bls.n	800364e <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8003640:	231f      	movs	r3, #31
 8003642:	2220      	movs	r2, #32
 8003644:	189b      	adds	r3, r3, r2
 8003646:	19db      	adds	r3, r3, r7
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e044      	b.n	80036d8 <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800365a:	4b78      	ldr	r3, [pc, #480]	@ (800383c <UART_SetConfig+0x370>)
 800365c:	0052      	lsls	r2, r2, #1
 800365e:	5ad3      	ldrh	r3, [r2, r3]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	69b8      	ldr	r0, [r7, #24]
 800366c:	69f9      	ldr	r1, [r7, #28]
 800366e:	f7fc fed3 	bl	8000418 <__aeabi_uldivmod>
 8003672:	0002      	movs	r2, r0
 8003674:	000b      	movs	r3, r1
 8003676:	0e11      	lsrs	r1, r2, #24
 8003678:	021d      	lsls	r5, r3, #8
 800367a:	430d      	orrs	r5, r1
 800367c:	0214      	lsls	r4, r2, #8
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68b8      	ldr	r0, [r7, #8]
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	1900      	adds	r0, r0, r4
 8003690:	4169      	adcs	r1, r5
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f7fc feba 	bl	8000418 <__aeabi_uldivmod>
 80036a4:	0002      	movs	r2, r0
 80036a6:	000b      	movs	r3, r1
 80036a8:	0013      	movs	r3, r2
 80036aa:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036ae:	23c0      	movs	r3, #192	@ 0xc0
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d309      	bcc.n	80036ca <UART_SetConfig+0x1fe>
 80036b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	035b      	lsls	r3, r3, #13
 80036bc:	429a      	cmp	r2, r3
 80036be:	d204      	bcs.n	80036ca <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e006      	b.n	80036d8 <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 80036ca:	231f      	movs	r3, #31
 80036cc:	2220      	movs	r2, #32
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	19db      	adds	r3, r3, r7
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80036d6:	e087      	b.n	80037e8 <UART_SetConfig+0x31c>
 80036d8:	e086      	b.n	80037e8 <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d14c      	bne.n	8003780 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80036e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff f90f 	bl	800290c <HAL_RCCEx_GetPeriphCLKFreq>
 80036ee:	0003      	movs	r3, r0
 80036f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d100      	bne.n	80036fa <UART_SetConfig+0x22e>
 80036f8:	e076      	b.n	80037e8 <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036fe:	4b4f      	ldr	r3, [pc, #316]	@ (800383c <UART_SetConfig+0x370>)
 8003700:	0052      	lsls	r2, r2, #1
 8003702:	5ad3      	ldrh	r3, [r2, r3]
 8003704:	0019      	movs	r1, r3
 8003706:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003708:	f7fc fd10 	bl	800012c <__udivsi3>
 800370c:	0003      	movs	r3, r0
 800370e:	005a      	lsls	r2, r3, #1
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	18d2      	adds	r2, r2, r3
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0019      	movs	r1, r3
 800371e:	0010      	movs	r0, r2
 8003720:	f7fc fd04 	bl	800012c <__udivsi3>
 8003724:	0003      	movs	r3, r0
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d921      	bls.n	8003772 <UART_SetConfig+0x2a6>
 800372e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003730:	2380      	movs	r3, #128	@ 0x80
 8003732:	025b      	lsls	r3, r3, #9
 8003734:	429a      	cmp	r2, r3
 8003736:	d21c      	bcs.n	8003772 <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	b29a      	uxth	r2, r3
 800373c:	2012      	movs	r0, #18
 800373e:	2420      	movs	r4, #32
 8003740:	1903      	adds	r3, r0, r4
 8003742:	19db      	adds	r3, r3, r7
 8003744:	210f      	movs	r1, #15
 8003746:	438a      	bics	r2, r1
 8003748:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	2207      	movs	r2, #7
 8003752:	4013      	ands	r3, r2
 8003754:	b299      	uxth	r1, r3
 8003756:	1903      	adds	r3, r0, r4
 8003758:	19db      	adds	r3, r3, r7
 800375a:	1902      	adds	r2, r0, r4
 800375c:	19d2      	adds	r2, r2, r7
 800375e:	8812      	ldrh	r2, [r2, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1902      	adds	r2, r0, r4
 800376a:	19d2      	adds	r2, r2, r7
 800376c:	8812      	ldrh	r2, [r2, #0]
 800376e:	60da      	str	r2, [r3, #12]
 8003770:	e03a      	b.n	80037e8 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8003772:	231f      	movs	r3, #31
 8003774:	2220      	movs	r2, #32
 8003776:	189b      	adds	r3, r3, r2
 8003778:	19db      	adds	r3, r3, r7
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e033      	b.n	80037e8 <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003782:	0018      	movs	r0, r3
 8003784:	f7ff f8c2 	bl	800290c <HAL_RCCEx_GetPeriphCLKFreq>
 8003788:	0003      	movs	r3, r0
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800378c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02a      	beq.n	80037e8 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003796:	4b29      	ldr	r3, [pc, #164]	@ (800383c <UART_SetConfig+0x370>)
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	5ad3      	ldrh	r3, [r2, r3]
 800379c:	0019      	movs	r1, r3
 800379e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037a0:	f7fc fcc4 	bl	800012c <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	18d2      	adds	r2, r2, r3
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0019      	movs	r1, r3
 80037b6:	0010      	movs	r0, r2
 80037b8:	f7fc fcb8 	bl	800012c <__udivsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d90a      	bls.n	80037dc <UART_SetConfig+0x310>
 80037c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	025b      	lsls	r3, r3, #9
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d205      	bcs.n	80037dc <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e005      	b.n	80037e8 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 80037dc:	231f      	movs	r3, #31
 80037de:	2220      	movs	r2, #32
 80037e0:	189b      	adds	r3, r3, r2
 80037e2:	19db      	adds	r3, r3, r7
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	226a      	movs	r2, #106	@ 0x6a
 80037ec:	2101      	movs	r1, #1
 80037ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	2268      	movs	r2, #104	@ 0x68
 80037f4:	2101      	movs	r1, #1
 80037f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	2200      	movs	r2, #0
 80037fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2200      	movs	r2, #0
 8003802:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003804:	231f      	movs	r3, #31
 8003806:	2220      	movs	r2, #32
 8003808:	189b      	adds	r3, r3, r2
 800380a:	19db      	adds	r3, r3, r7
 800380c:	781b      	ldrb	r3, [r3, #0]
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b012      	add	sp, #72	@ 0x48
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	cfff69f3 	.word	0xcfff69f3
 800381c:	ffffcfff 	.word	0xffffcfff
 8003820:	40008000 	.word	0x40008000
 8003824:	40008400 	.word	0x40008400
 8003828:	11fff4ff 	.word	0x11fff4ff
 800382c:	40013800 	.word	0x40013800
 8003830:	40004400 	.word	0x40004400
 8003834:	40004800 	.word	0x40004800
 8003838:	40004c00 	.word	0x40004c00
 800383c:	08004944 	.word	0x08004944

08003840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	2208      	movs	r2, #8
 800384e:	4013      	ands	r3, r2
 8003850:	d00b      	beq.n	800386a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a4a      	ldr	r2, [pc, #296]	@ (8003984 <UART_AdvFeatureConfig+0x144>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a43      	ldr	r2, [pc, #268]	@ (8003988 <UART_AdvFeatureConfig+0x148>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	2202      	movs	r2, #2
 8003892:	4013      	ands	r3, r2
 8003894:	d00b      	beq.n	80038ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a3b      	ldr	r2, [pc, #236]	@ (800398c <UART_AdvFeatureConfig+0x14c>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	2204      	movs	r2, #4
 80038b4:	4013      	ands	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a34      	ldr	r2, [pc, #208]	@ (8003990 <UART_AdvFeatureConfig+0x150>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	2210      	movs	r2, #16
 80038d6:	4013      	ands	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003994 <UART_AdvFeatureConfig+0x154>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	2220      	movs	r2, #32
 80038f8:	4013      	ands	r3, r2
 80038fa:	d00b      	beq.n	8003914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a25      	ldr	r2, [pc, #148]	@ (8003998 <UART_AdvFeatureConfig+0x158>)
 8003904:	4013      	ands	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	2240      	movs	r2, #64	@ 0x40
 800391a:	4013      	ands	r3, r2
 800391c:	d01d      	beq.n	800395a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a1d      	ldr	r2, [pc, #116]	@ (800399c <UART_AdvFeatureConfig+0x15c>)
 8003926:	4013      	ands	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	035b      	lsls	r3, r3, #13
 800393e:	429a      	cmp	r2, r3
 8003940:	d10b      	bne.n	800395a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <UART_AdvFeatureConfig+0x160>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	4013      	ands	r3, r2
 8003962:	d00b      	beq.n	800397c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a0e      	ldr	r2, [pc, #56]	@ (80039a4 <UART_AdvFeatureConfig+0x164>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	ffff7fff 	.word	0xffff7fff
 8003988:	fffdffff 	.word	0xfffdffff
 800398c:	fffeffff 	.word	0xfffeffff
 8003990:	fffbffff 	.word	0xfffbffff
 8003994:	ffffefff 	.word	0xffffefff
 8003998:	ffffdfff 	.word	0xffffdfff
 800399c:	ffefffff 	.word	0xffefffff
 80039a0:	ff9fffff 	.word	0xff9fffff
 80039a4:	fff7ffff 	.word	0xfff7ffff

080039a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b092      	sub	sp, #72	@ 0x48
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2290      	movs	r2, #144	@ 0x90
 80039b4:	2100      	movs	r1, #0
 80039b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039b8:	f7fd fada 	bl	8000f70 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d12d      	bne.n	8003a2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d0:	2280      	movs	r2, #128	@ 0x80
 80039d2:	0391      	lsls	r1, r2, #14
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4a47      	ldr	r2, [pc, #284]	@ (8003af4 <UART_CheckIdleState+0x14c>)
 80039d8:	9200      	str	r2, [sp, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	f000 f88e 	bl	8003afc <UART_WaitOnFlagUntilTimeout>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d022      	beq.n	8003a2a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ee:	2301      	movs	r3, #1
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2180      	movs	r1, #128	@ 0x80
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2288      	movs	r2, #136	@ 0x88
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2284      	movs	r2, #132	@ 0x84
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e060      	b.n	8003aec <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2204      	movs	r2, #4
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d146      	bne.n	8003ac6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3a:	2280      	movs	r2, #128	@ 0x80
 8003a3c:	03d1      	lsls	r1, r2, #15
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	@ (8003af4 <UART_CheckIdleState+0x14c>)
 8003a42:	9200      	str	r2, [sp, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f000 f859 	bl	8003afc <UART_WaitOnFlagUntilTimeout>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d03b      	beq.n	8003ac6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a54:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a58:	2301      	movs	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4922      	ldr	r1, [pc, #136]	@ (8003af8 <UART_CheckIdleState+0x150>)
 8003a70:	400a      	ands	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f383 8810 	msr	PRIMASK, r3
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a80:	f3ef 8310 	mrs	r3, PRIMASK
 8003a84:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a86:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			@ (mov r8, r8)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	228c      	movs	r2, #140	@ 0x8c
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2284      	movs	r2, #132	@ 0x84
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e012      	b.n	8003aec <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2288      	movs	r2, #136	@ 0x88
 8003aca:	2120      	movs	r1, #32
 8003acc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	228c      	movs	r2, #140	@ 0x8c
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2284      	movs	r2, #132	@ 0x84
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b010      	add	sp, #64	@ 0x40
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	01ffffff 	.word	0x01ffffff
 8003af8:	fffffedf 	.word	0xfffffedf

08003afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	1dfb      	adds	r3, r7, #7
 8003b0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0c:	e051      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3301      	adds	r3, #1
 8003b12:	d04e      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b14:	f7fd fa2c 	bl	8000f70 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e051      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d03b      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b80      	cmp	r3, #128	@ 0x80
 8003b3e:	d038      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d035      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d111      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2208      	movs	r2, #8
 8003b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 f83c 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2290      	movs	r2, #144	@ 0x90
 8003b68:	2108      	movs	r1, #8
 8003b6a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2284      	movs	r2, #132	@ 0x84
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e02c      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	2380      	movs	r3, #128	@ 0x80
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	401a      	ands	r2, r3
 8003b84:	2380      	movs	r3, #128	@ 0x80
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d112      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f81f 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2290      	movs	r2, #144	@ 0x90
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2284      	movs	r2, #132	@ 0x84
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	425a      	negs	r2, r3
 8003bc2:	4153      	adcs	r3, r2
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	1dfb      	adds	r3, r7, #7
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d09e      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08e      	sub	sp, #56	@ 0x38
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003be4:	f3ef 8310 	mrs	r3, PRIMASK
 8003be8:	617b      	str	r3, [r7, #20]
  return(result);
 8003bea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4926      	ldr	r1, [pc, #152]	@ (8003ca0 <UART_EndRxTransfer+0xc4>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c16:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c20:	2301      	movs	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	491b      	ldr	r1, [pc, #108]	@ (8003ca4 <UART_EndRxTransfer+0xc8>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c42:	f383 8810 	msr	PRIMASK, r3
}
 8003c46:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d118      	bne.n	8003c82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c50:	f3ef 8310 	mrs	r3, PRIMASK
 8003c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2110      	movs	r1, #16
 8003c72:	438a      	bics	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	228c      	movs	r2, #140	@ 0x8c
 8003c86:	2120      	movs	r1, #32
 8003c88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b00e      	add	sp, #56	@ 0x38
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	fffffedf 	.word	0xfffffedf
 8003ca4:	effffffe 	.word	0xeffffffe

08003ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2284      	movs	r2, #132	@ 0x84
 8003cb4:	5c9b      	ldrb	r3, [r3, r2]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e027      	b.n	8003d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2284      	movs	r2, #132	@ 0x84
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2288      	movs	r2, #136	@ 0x88
 8003cca:	2124      	movs	r1, #36	@ 0x24
 8003ccc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	438a      	bics	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d18 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2288      	movs	r2, #136	@ 0x88
 8003d00:	2120      	movs	r1, #32
 8003d02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2284      	movs	r2, #132	@ 0x84
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	dfffffff 	.word	0xdfffffff

08003d1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2284      	movs	r2, #132	@ 0x84
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e02e      	b.n	8003d92 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2284      	movs	r2, #132	@ 0x84
 8003d38:	2101      	movs	r1, #1
 8003d3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2288      	movs	r2, #136	@ 0x88
 8003d40:	2124      	movs	r1, #36	@ 0x24
 8003d42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2101      	movs	r1, #1
 8003d58:	438a      	bics	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	08d9      	lsrs	r1, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 f854 	bl	8003e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2288      	movs	r2, #136	@ 0x88
 8003d84:	2120      	movs	r1, #32
 8003d86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2284      	movs	r2, #132	@ 0x84
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	@ 0x84
 8003daa:	5c9b      	ldrb	r3, [r3, r2]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e02f      	b.n	8003e14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2284      	movs	r2, #132	@ 0x84
 8003db8:	2101      	movs	r1, #1
 8003dba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2288      	movs	r2, #136	@ 0x88
 8003dc0:	2124      	movs	r1, #36	@ 0x24
 8003dc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	438a      	bics	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	0019      	movs	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f813 	bl	8003e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2288      	movs	r2, #136	@ 0x88
 8003e06:	2120      	movs	r1, #32
 8003e08:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2284      	movs	r2, #132	@ 0x84
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b004      	add	sp, #16
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	f1ffffff 	.word	0xf1ffffff

08003e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	226a      	movs	r2, #106	@ 0x6a
 8003e34:	2101      	movs	r1, #1
 8003e36:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2268      	movs	r2, #104	@ 0x68
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e40:	e043      	b.n	8003eca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e42:	260f      	movs	r6, #15
 8003e44:	19bb      	adds	r3, r7, r6
 8003e46:	2208      	movs	r2, #8
 8003e48:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e4a:	200e      	movs	r0, #14
 8003e4c:	183b      	adds	r3, r7, r0
 8003e4e:	2208      	movs	r2, #8
 8003e50:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	0e5b      	lsrs	r3, r3, #25
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	240d      	movs	r4, #13
 8003e5e:	193b      	adds	r3, r7, r4
 8003e60:	2107      	movs	r1, #7
 8003e62:	400a      	ands	r2, r1
 8003e64:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	0f5b      	lsrs	r3, r3, #29
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	250c      	movs	r5, #12
 8003e72:	197b      	adds	r3, r7, r5
 8003e74:	2107      	movs	r1, #7
 8003e76:	400a      	ands	r2, r1
 8003e78:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	197a      	adds	r2, r7, r5
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	4914      	ldr	r1, [pc, #80]	@ (8003ed4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e84:	5c8a      	ldrb	r2, [r1, r2]
 8003e86:	435a      	muls	r2, r3
 8003e88:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e8a:	197b      	adds	r3, r7, r5
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ed8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e92:	0019      	movs	r1, r3
 8003e94:	f7fc f9d4 	bl	8000240 <__divsi3>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	b299      	uxth	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	226a      	movs	r2, #106	@ 0x6a
 8003ea0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ea2:	19bb      	adds	r3, r7, r6
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	193a      	adds	r2, r7, r4
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	490a      	ldr	r1, [pc, #40]	@ (8003ed4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003eac:	5c8a      	ldrb	r2, [r1, r2]
 8003eae:	435a      	muls	r2, r3
 8003eb0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eba:	0019      	movs	r1, r3
 8003ebc:	f7fc f9c0 	bl	8000240 <__divsi3>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2268      	movs	r2, #104	@ 0x68
 8003ec8:	5299      	strh	r1, [r3, r2]
}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b005      	add	sp, #20
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	0800495c 	.word	0x0800495c
 8003ed8:	08004964 	.word	0x08004964

08003edc <_vsniprintf_r>:
 8003edc:	b530      	push	{r4, r5, lr}
 8003ede:	0005      	movs	r5, r0
 8003ee0:	0014      	movs	r4, r2
 8003ee2:	0008      	movs	r0, r1
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	b09b      	sub	sp, #108	@ 0x6c
 8003ee8:	2c00      	cmp	r4, #0
 8003eea:	da05      	bge.n	8003ef8 <_vsniprintf_r+0x1c>
 8003eec:	238b      	movs	r3, #139	@ 0x8b
 8003eee:	2001      	movs	r0, #1
 8003ef0:	602b      	str	r3, [r5, #0]
 8003ef2:	4240      	negs	r0, r0
 8003ef4:	b01b      	add	sp, #108	@ 0x6c
 8003ef6:	bd30      	pop	{r4, r5, pc}
 8003ef8:	2382      	movs	r3, #130	@ 0x82
 8003efa:	4669      	mov	r1, sp
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	818b      	strh	r3, [r1, #12]
 8003f00:	2100      	movs	r1, #0
 8003f02:	9000      	str	r0, [sp, #0]
 8003f04:	9119      	str	r1, [sp, #100]	@ 0x64
 8003f06:	9004      	str	r0, [sp, #16]
 8003f08:	428c      	cmp	r4, r1
 8003f0a:	d000      	beq.n	8003f0e <_vsniprintf_r+0x32>
 8003f0c:	1e61      	subs	r1, r4, #1
 8003f0e:	2301      	movs	r3, #1
 8003f10:	9102      	str	r1, [sp, #8]
 8003f12:	9105      	str	r1, [sp, #20]
 8003f14:	4669      	mov	r1, sp
 8003f16:	425b      	negs	r3, r3
 8003f18:	81cb      	strh	r3, [r1, #14]
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003f1e:	f000 f9a7 	bl	8004270 <_svfiprintf_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	da01      	bge.n	8003f2a <_vsniprintf_r+0x4e>
 8003f26:	238b      	movs	r3, #139	@ 0x8b
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d0e2      	beq.n	8003ef4 <_vsniprintf_r+0x18>
 8003f2e:	2200      	movs	r2, #0
 8003f30:	9b00      	ldr	r3, [sp, #0]
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e7de      	b.n	8003ef4 <_vsniprintf_r+0x18>
	...

08003f38 <vsniprintf>:
 8003f38:	b513      	push	{r0, r1, r4, lr}
 8003f3a:	4c04      	ldr	r4, [pc, #16]	@ (8003f4c <vsniprintf+0x14>)
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	0013      	movs	r3, r2
 8003f40:	000a      	movs	r2, r1
 8003f42:	0001      	movs	r1, r0
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	f7ff ffc9 	bl	8003edc <_vsniprintf_r>
 8003f4a:	bd16      	pop	{r1, r2, r4, pc}
 8003f4c:	2000001c 	.word	0x2000001c

08003f50 <memset>:
 8003f50:	0003      	movs	r3, r0
 8003f52:	1882      	adds	r2, r0, r2
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d100      	bne.n	8003f5a <memset+0xa>
 8003f58:	4770      	bx	lr
 8003f5a:	7019      	strb	r1, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	e7f9      	b.n	8003f54 <memset+0x4>

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	@ (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	2000001c 	.word	0x2000001c

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	2600      	movs	r6, #0
 8003f70:	4c0c      	ldr	r4, [pc, #48]	@ (8003fa4 <__libc_init_array+0x38>)
 8003f72:	4d0d      	ldr	r5, [pc, #52]	@ (8003fa8 <__libc_init_array+0x3c>)
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	f000 fc61 	bl	8004844 <_init>
 8003f82:	4c0a      	ldr	r4, [pc, #40]	@ (8003fac <__libc_init_array+0x40>)
 8003f84:	4d0a      	ldr	r5, [pc, #40]	@ (8003fb0 <__libc_init_array+0x44>)
 8003f86:	1b64      	subs	r4, r4, r5
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	00b3      	lsls	r3, r6, #2
 8003f92:	58eb      	ldr	r3, [r5, r3]
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	00b3      	lsls	r3, r6, #2
 8003f9c:	58eb      	ldr	r3, [r5, r3]
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	080049a8 	.word	0x080049a8
 8003fa8:	080049a8 	.word	0x080049a8
 8003fac:	080049ac 	.word	0x080049ac
 8003fb0:	080049a8 	.word	0x080049a8

08003fb4 <__retarget_lock_acquire_recursive>:
 8003fb4:	4770      	bx	lr

08003fb6 <__retarget_lock_release_recursive>:
 8003fb6:	4770      	bx	lr

08003fb8 <_free_r>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	0005      	movs	r5, r0
 8003fbc:	1e0c      	subs	r4, r1, #0
 8003fbe:	d010      	beq.n	8003fe2 <_free_r+0x2a>
 8003fc0:	3c04      	subs	r4, #4
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da00      	bge.n	8003fca <_free_r+0x12>
 8003fc8:	18e4      	adds	r4, r4, r3
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f000 f8e0 	bl	8004190 <__malloc_lock>
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <_free_r+0x90>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <_free_r+0x2c>
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6014      	str	r4, [r2, #0]
 8003fdc:	0028      	movs	r0, r5
 8003fde:	f000 f8df 	bl	80041a0 <__malloc_unlock>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d908      	bls.n	8003ffa <_free_r+0x42>
 8003fe8:	6820      	ldr	r0, [r4, #0]
 8003fea:	1821      	adds	r1, r4, r0
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d1f3      	bne.n	8003fd8 <_free_r+0x20>
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	1809      	adds	r1, r1, r0
 8003ff6:	6021      	str	r1, [r4, #0]
 8003ff8:	e7ee      	b.n	8003fd8 <_free_r+0x20>
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <_free_r+0x4e>
 8004002:	42a3      	cmp	r3, r4
 8004004:	d9f9      	bls.n	8003ffa <_free_r+0x42>
 8004006:	6811      	ldr	r1, [r2, #0]
 8004008:	1850      	adds	r0, r2, r1
 800400a:	42a0      	cmp	r0, r4
 800400c:	d10b      	bne.n	8004026 <_free_r+0x6e>
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	1809      	adds	r1, r1, r0
 8004012:	1850      	adds	r0, r2, r1
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	4283      	cmp	r3, r0
 8004018:	d1e0      	bne.n	8003fdc <_free_r+0x24>
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	1841      	adds	r1, r0, r1
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	6053      	str	r3, [r2, #4]
 8004024:	e7da      	b.n	8003fdc <_free_r+0x24>
 8004026:	42a0      	cmp	r0, r4
 8004028:	d902      	bls.n	8004030 <_free_r+0x78>
 800402a:	230c      	movs	r3, #12
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	e7d5      	b.n	8003fdc <_free_r+0x24>
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	1821      	adds	r1, r4, r0
 8004034:	428b      	cmp	r3, r1
 8004036:	d103      	bne.n	8004040 <_free_r+0x88>
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	1809      	adds	r1, r1, r0
 800403e:	6021      	str	r1, [r4, #0]
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6054      	str	r4, [r2, #4]
 8004044:	e7ca      	b.n	8003fdc <_free_r+0x24>
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	20000278 	.word	0x20000278

0800404c <sbrk_aligned>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4e0f      	ldr	r6, [pc, #60]	@ (800408c <sbrk_aligned+0x40>)
 8004050:	000d      	movs	r5, r1
 8004052:	6831      	ldr	r1, [r6, #0]
 8004054:	0004      	movs	r4, r0
 8004056:	2900      	cmp	r1, #0
 8004058:	d102      	bne.n	8004060 <sbrk_aligned+0x14>
 800405a:	f000 fb95 	bl	8004788 <_sbrk_r>
 800405e:	6030      	str	r0, [r6, #0]
 8004060:	0029      	movs	r1, r5
 8004062:	0020      	movs	r0, r4
 8004064:	f000 fb90 	bl	8004788 <_sbrk_r>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d103      	bne.n	8004074 <sbrk_aligned+0x28>
 800406c:	2501      	movs	r5, #1
 800406e:	426d      	negs	r5, r5
 8004070:	0028      	movs	r0, r5
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	2303      	movs	r3, #3
 8004076:	1cc5      	adds	r5, r0, #3
 8004078:	439d      	bics	r5, r3
 800407a:	42a8      	cmp	r0, r5
 800407c:	d0f8      	beq.n	8004070 <sbrk_aligned+0x24>
 800407e:	1a29      	subs	r1, r5, r0
 8004080:	0020      	movs	r0, r4
 8004082:	f000 fb81 	bl	8004788 <_sbrk_r>
 8004086:	3001      	adds	r0, #1
 8004088:	d1f2      	bne.n	8004070 <sbrk_aligned+0x24>
 800408a:	e7ef      	b.n	800406c <sbrk_aligned+0x20>
 800408c:	20000274 	.word	0x20000274

08004090 <_malloc_r>:
 8004090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004092:	2203      	movs	r2, #3
 8004094:	1ccb      	adds	r3, r1, #3
 8004096:	4393      	bics	r3, r2
 8004098:	3308      	adds	r3, #8
 800409a:	0005      	movs	r5, r0
 800409c:	001f      	movs	r7, r3
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d234      	bcs.n	800410c <_malloc_r+0x7c>
 80040a2:	270c      	movs	r7, #12
 80040a4:	42b9      	cmp	r1, r7
 80040a6:	d833      	bhi.n	8004110 <_malloc_r+0x80>
 80040a8:	0028      	movs	r0, r5
 80040aa:	f000 f871 	bl	8004190 <__malloc_lock>
 80040ae:	4e37      	ldr	r6, [pc, #220]	@ (800418c <_malloc_r+0xfc>)
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	001c      	movs	r4, r3
 80040b4:	2c00      	cmp	r4, #0
 80040b6:	d12f      	bne.n	8004118 <_malloc_r+0x88>
 80040b8:	0039      	movs	r1, r7
 80040ba:	0028      	movs	r0, r5
 80040bc:	f7ff ffc6 	bl	800404c <sbrk_aligned>
 80040c0:	0004      	movs	r4, r0
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	d15f      	bne.n	8004186 <_malloc_r+0xf6>
 80040c6:	6834      	ldr	r4, [r6, #0]
 80040c8:	9400      	str	r4, [sp, #0]
 80040ca:	9b00      	ldr	r3, [sp, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d14a      	bne.n	8004166 <_malloc_r+0xd6>
 80040d0:	2c00      	cmp	r4, #0
 80040d2:	d052      	beq.n	800417a <_malloc_r+0xea>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0028      	movs	r0, r5
 80040d8:	18e3      	adds	r3, r4, r3
 80040da:	9900      	ldr	r1, [sp, #0]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f000 fb53 	bl	8004788 <_sbrk_r>
 80040e2:	9b01      	ldr	r3, [sp, #4]
 80040e4:	4283      	cmp	r3, r0
 80040e6:	d148      	bne.n	800417a <_malloc_r+0xea>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	0028      	movs	r0, r5
 80040ec:	1aff      	subs	r7, r7, r3
 80040ee:	0039      	movs	r1, r7
 80040f0:	f7ff ffac 	bl	800404c <sbrk_aligned>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d040      	beq.n	800417a <_malloc_r+0xea>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	6833      	ldr	r3, [r6, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	2a00      	cmp	r2, #0
 8004104:	d133      	bne.n	800416e <_malloc_r+0xde>
 8004106:	9b00      	ldr	r3, [sp, #0]
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	e019      	b.n	8004140 <_malloc_r+0xb0>
 800410c:	2b00      	cmp	r3, #0
 800410e:	dac9      	bge.n	80040a4 <_malloc_r+0x14>
 8004110:	230c      	movs	r3, #12
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	2000      	movs	r0, #0
 8004116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004118:	6821      	ldr	r1, [r4, #0]
 800411a:	1bc9      	subs	r1, r1, r7
 800411c:	d420      	bmi.n	8004160 <_malloc_r+0xd0>
 800411e:	290b      	cmp	r1, #11
 8004120:	d90a      	bls.n	8004138 <_malloc_r+0xa8>
 8004122:	19e2      	adds	r2, r4, r7
 8004124:	6027      	str	r7, [r4, #0]
 8004126:	42a3      	cmp	r3, r4
 8004128:	d104      	bne.n	8004134 <_malloc_r+0xa4>
 800412a:	6032      	str	r2, [r6, #0]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	6011      	str	r1, [r2, #0]
 8004130:	6053      	str	r3, [r2, #4]
 8004132:	e005      	b.n	8004140 <_malloc_r+0xb0>
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e7f9      	b.n	800412c <_malloc_r+0x9c>
 8004138:	6862      	ldr	r2, [r4, #4]
 800413a:	42a3      	cmp	r3, r4
 800413c:	d10e      	bne.n	800415c <_malloc_r+0xcc>
 800413e:	6032      	str	r2, [r6, #0]
 8004140:	0028      	movs	r0, r5
 8004142:	f000 f82d 	bl	80041a0 <__malloc_unlock>
 8004146:	0020      	movs	r0, r4
 8004148:	2207      	movs	r2, #7
 800414a:	300b      	adds	r0, #11
 800414c:	1d23      	adds	r3, r4, #4
 800414e:	4390      	bics	r0, r2
 8004150:	1ac2      	subs	r2, r0, r3
 8004152:	4298      	cmp	r0, r3
 8004154:	d0df      	beq.n	8004116 <_malloc_r+0x86>
 8004156:	1a1b      	subs	r3, r3, r0
 8004158:	50a3      	str	r3, [r4, r2]
 800415a:	e7dc      	b.n	8004116 <_malloc_r+0x86>
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	e7ef      	b.n	8004140 <_malloc_r+0xb0>
 8004160:	0023      	movs	r3, r4
 8004162:	6864      	ldr	r4, [r4, #4]
 8004164:	e7a6      	b.n	80040b4 <_malloc_r+0x24>
 8004166:	9c00      	ldr	r4, [sp, #0]
 8004168:	6863      	ldr	r3, [r4, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	e7ad      	b.n	80040ca <_malloc_r+0x3a>
 800416e:	001a      	movs	r2, r3
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	42a3      	cmp	r3, r4
 8004174:	d1fb      	bne.n	800416e <_malloc_r+0xde>
 8004176:	2300      	movs	r3, #0
 8004178:	e7da      	b.n	8004130 <_malloc_r+0xa0>
 800417a:	230c      	movs	r3, #12
 800417c:	0028      	movs	r0, r5
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f000 f80e 	bl	80041a0 <__malloc_unlock>
 8004184:	e7c6      	b.n	8004114 <_malloc_r+0x84>
 8004186:	6007      	str	r7, [r0, #0]
 8004188:	e7da      	b.n	8004140 <_malloc_r+0xb0>
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	20000278 	.word	0x20000278

08004190 <__malloc_lock>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4802      	ldr	r0, [pc, #8]	@ (800419c <__malloc_lock+0xc>)
 8004194:	f7ff ff0e 	bl	8003fb4 <__retarget_lock_acquire_recursive>
 8004198:	bd10      	pop	{r4, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	20000270 	.word	0x20000270

080041a0 <__malloc_unlock>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4802      	ldr	r0, [pc, #8]	@ (80041ac <__malloc_unlock+0xc>)
 80041a4:	f7ff ff07 	bl	8003fb6 <__retarget_lock_release_recursive>
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	20000270 	.word	0x20000270

080041b0 <__ssputs_r>:
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	688e      	ldr	r6, [r1, #8]
 80041b4:	b085      	sub	sp, #20
 80041b6:	001f      	movs	r7, r3
 80041b8:	000c      	movs	r4, r1
 80041ba:	680b      	ldr	r3, [r1, #0]
 80041bc:	9002      	str	r0, [sp, #8]
 80041be:	9203      	str	r2, [sp, #12]
 80041c0:	42be      	cmp	r6, r7
 80041c2:	d830      	bhi.n	8004226 <__ssputs_r+0x76>
 80041c4:	210c      	movs	r1, #12
 80041c6:	5e62      	ldrsh	r2, [r4, r1]
 80041c8:	2190      	movs	r1, #144	@ 0x90
 80041ca:	00c9      	lsls	r1, r1, #3
 80041cc:	420a      	tst	r2, r1
 80041ce:	d028      	beq.n	8004222 <__ssputs_r+0x72>
 80041d0:	2003      	movs	r0, #3
 80041d2:	6921      	ldr	r1, [r4, #16]
 80041d4:	1a5b      	subs	r3, r3, r1
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	6963      	ldr	r3, [r4, #20]
 80041da:	4343      	muls	r3, r0
 80041dc:	9801      	ldr	r0, [sp, #4]
 80041de:	0fdd      	lsrs	r5, r3, #31
 80041e0:	18ed      	adds	r5, r5, r3
 80041e2:	1c7b      	adds	r3, r7, #1
 80041e4:	181b      	adds	r3, r3, r0
 80041e6:	106d      	asrs	r5, r5, #1
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	d900      	bls.n	80041ee <__ssputs_r+0x3e>
 80041ec:	001d      	movs	r5, r3
 80041ee:	0552      	lsls	r2, r2, #21
 80041f0:	d528      	bpl.n	8004244 <__ssputs_r+0x94>
 80041f2:	0029      	movs	r1, r5
 80041f4:	9802      	ldr	r0, [sp, #8]
 80041f6:	f7ff ff4b 	bl	8004090 <_malloc_r>
 80041fa:	1e06      	subs	r6, r0, #0
 80041fc:	d02c      	beq.n	8004258 <__ssputs_r+0xa8>
 80041fe:	9a01      	ldr	r2, [sp, #4]
 8004200:	6921      	ldr	r1, [r4, #16]
 8004202:	f000 fade 	bl	80047c2 <memcpy>
 8004206:	89a2      	ldrh	r2, [r4, #12]
 8004208:	4b18      	ldr	r3, [pc, #96]	@ (800426c <__ssputs_r+0xbc>)
 800420a:	401a      	ands	r2, r3
 800420c:	2380      	movs	r3, #128	@ 0x80
 800420e:	4313      	orrs	r3, r2
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	6126      	str	r6, [r4, #16]
 8004216:	18f6      	adds	r6, r6, r3
 8004218:	6026      	str	r6, [r4, #0]
 800421a:	003e      	movs	r6, r7
 800421c:	6165      	str	r5, [r4, #20]
 800421e:	1aed      	subs	r5, r5, r3
 8004220:	60a5      	str	r5, [r4, #8]
 8004222:	42be      	cmp	r6, r7
 8004224:	d900      	bls.n	8004228 <__ssputs_r+0x78>
 8004226:	003e      	movs	r6, r7
 8004228:	0032      	movs	r2, r6
 800422a:	9903      	ldr	r1, [sp, #12]
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	f000 fa99 	bl	8004764 <memmove>
 8004232:	2000      	movs	r0, #0
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	1b9b      	subs	r3, r3, r6
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	199b      	adds	r3, r3, r6
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	b005      	add	sp, #20
 8004242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004244:	002a      	movs	r2, r5
 8004246:	9802      	ldr	r0, [sp, #8]
 8004248:	f000 fac4 	bl	80047d4 <_realloc_r>
 800424c:	1e06      	subs	r6, r0, #0
 800424e:	d1e0      	bne.n	8004212 <__ssputs_r+0x62>
 8004250:	6921      	ldr	r1, [r4, #16]
 8004252:	9802      	ldr	r0, [sp, #8]
 8004254:	f7ff feb0 	bl	8003fb8 <_free_r>
 8004258:	230c      	movs	r3, #12
 800425a:	2001      	movs	r0, #1
 800425c:	9a02      	ldr	r2, [sp, #8]
 800425e:	4240      	negs	r0, r0
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	89a2      	ldrh	r2, [r4, #12]
 8004264:	3334      	adds	r3, #52	@ 0x34
 8004266:	4313      	orrs	r3, r2
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	e7e9      	b.n	8004240 <__ssputs_r+0x90>
 800426c:	fffffb7f 	.word	0xfffffb7f

08004270 <_svfiprintf_r>:
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	b0a1      	sub	sp, #132	@ 0x84
 8004274:	9003      	str	r0, [sp, #12]
 8004276:	001d      	movs	r5, r3
 8004278:	898b      	ldrh	r3, [r1, #12]
 800427a:	000f      	movs	r7, r1
 800427c:	0016      	movs	r6, r2
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	d511      	bpl.n	80042a6 <_svfiprintf_r+0x36>
 8004282:	690b      	ldr	r3, [r1, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <_svfiprintf_r+0x36>
 8004288:	2140      	movs	r1, #64	@ 0x40
 800428a:	f7ff ff01 	bl	8004090 <_malloc_r>
 800428e:	6038      	str	r0, [r7, #0]
 8004290:	6138      	str	r0, [r7, #16]
 8004292:	2800      	cmp	r0, #0
 8004294:	d105      	bne.n	80042a2 <_svfiprintf_r+0x32>
 8004296:	230c      	movs	r3, #12
 8004298:	9a03      	ldr	r2, [sp, #12]
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	2001      	movs	r0, #1
 800429e:	4240      	negs	r0, r0
 80042a0:	e0cf      	b.n	8004442 <_svfiprintf_r+0x1d2>
 80042a2:	2340      	movs	r3, #64	@ 0x40
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	2300      	movs	r3, #0
 80042a8:	ac08      	add	r4, sp, #32
 80042aa:	6163      	str	r3, [r4, #20]
 80042ac:	3320      	adds	r3, #32
 80042ae:	7663      	strb	r3, [r4, #25]
 80042b0:	3310      	adds	r3, #16
 80042b2:	76a3      	strb	r3, [r4, #26]
 80042b4:	9507      	str	r5, [sp, #28]
 80042b6:	0035      	movs	r5, r6
 80042b8:	782b      	ldrb	r3, [r5, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_svfiprintf_r+0x52>
 80042be:	2b25      	cmp	r3, #37	@ 0x25
 80042c0:	d148      	bne.n	8004354 <_svfiprintf_r+0xe4>
 80042c2:	1bab      	subs	r3, r5, r6
 80042c4:	9305      	str	r3, [sp, #20]
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	d00b      	beq.n	80042e2 <_svfiprintf_r+0x72>
 80042ca:	0032      	movs	r2, r6
 80042cc:	0039      	movs	r1, r7
 80042ce:	9803      	ldr	r0, [sp, #12]
 80042d0:	f7ff ff6e 	bl	80041b0 <__ssputs_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d100      	bne.n	80042da <_svfiprintf_r+0x6a>
 80042d8:	e0ae      	b.n	8004438 <_svfiprintf_r+0x1c8>
 80042da:	6963      	ldr	r3, [r4, #20]
 80042dc:	9a05      	ldr	r2, [sp, #20]
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	6163      	str	r3, [r4, #20]
 80042e2:	782b      	ldrb	r3, [r5, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d100      	bne.n	80042ea <_svfiprintf_r+0x7a>
 80042e8:	e0a6      	b.n	8004438 <_svfiprintf_r+0x1c8>
 80042ea:	2201      	movs	r2, #1
 80042ec:	2300      	movs	r3, #0
 80042ee:	4252      	negs	r2, r2
 80042f0:	6062      	str	r2, [r4, #4]
 80042f2:	a904      	add	r1, sp, #16
 80042f4:	3254      	adds	r2, #84	@ 0x54
 80042f6:	1852      	adds	r2, r2, r1
 80042f8:	1c6e      	adds	r6, r5, #1
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	60e3      	str	r3, [r4, #12]
 80042fe:	60a3      	str	r3, [r4, #8]
 8004300:	7013      	strb	r3, [r2, #0]
 8004302:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004304:	4b54      	ldr	r3, [pc, #336]	@ (8004458 <_svfiprintf_r+0x1e8>)
 8004306:	2205      	movs	r2, #5
 8004308:	0018      	movs	r0, r3
 800430a:	7831      	ldrb	r1, [r6, #0]
 800430c:	9305      	str	r3, [sp, #20]
 800430e:	f000 fa4d 	bl	80047ac <memchr>
 8004312:	1c75      	adds	r5, r6, #1
 8004314:	2800      	cmp	r0, #0
 8004316:	d11f      	bne.n	8004358 <_svfiprintf_r+0xe8>
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	06d3      	lsls	r3, r2, #27
 800431c:	d504      	bpl.n	8004328 <_svfiprintf_r+0xb8>
 800431e:	2353      	movs	r3, #83	@ 0x53
 8004320:	a904      	add	r1, sp, #16
 8004322:	185b      	adds	r3, r3, r1
 8004324:	2120      	movs	r1, #32
 8004326:	7019      	strb	r1, [r3, #0]
 8004328:	0713      	lsls	r3, r2, #28
 800432a:	d504      	bpl.n	8004336 <_svfiprintf_r+0xc6>
 800432c:	2353      	movs	r3, #83	@ 0x53
 800432e:	a904      	add	r1, sp, #16
 8004330:	185b      	adds	r3, r3, r1
 8004332:	212b      	movs	r1, #43	@ 0x2b
 8004334:	7019      	strb	r1, [r3, #0]
 8004336:	7833      	ldrb	r3, [r6, #0]
 8004338:	2b2a      	cmp	r3, #42	@ 0x2a
 800433a:	d016      	beq.n	800436a <_svfiprintf_r+0xfa>
 800433c:	0035      	movs	r5, r6
 800433e:	2100      	movs	r1, #0
 8004340:	200a      	movs	r0, #10
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	782a      	ldrb	r2, [r5, #0]
 8004346:	1c6e      	adds	r6, r5, #1
 8004348:	3a30      	subs	r2, #48	@ 0x30
 800434a:	2a09      	cmp	r2, #9
 800434c:	d950      	bls.n	80043f0 <_svfiprintf_r+0x180>
 800434e:	2900      	cmp	r1, #0
 8004350:	d111      	bne.n	8004376 <_svfiprintf_r+0x106>
 8004352:	e017      	b.n	8004384 <_svfiprintf_r+0x114>
 8004354:	3501      	adds	r5, #1
 8004356:	e7af      	b.n	80042b8 <_svfiprintf_r+0x48>
 8004358:	9b05      	ldr	r3, [sp, #20]
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	1ac0      	subs	r0, r0, r3
 800435e:	2301      	movs	r3, #1
 8004360:	4083      	lsls	r3, r0
 8004362:	4313      	orrs	r3, r2
 8004364:	002e      	movs	r6, r5
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e7cc      	b.n	8004304 <_svfiprintf_r+0x94>
 800436a:	9b07      	ldr	r3, [sp, #28]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	9107      	str	r1, [sp, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db01      	blt.n	800437a <_svfiprintf_r+0x10a>
 8004376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004378:	e004      	b.n	8004384 <_svfiprintf_r+0x114>
 800437a:	425b      	negs	r3, r3
 800437c:	60e3      	str	r3, [r4, #12]
 800437e:	2302      	movs	r3, #2
 8004380:	4313      	orrs	r3, r2
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	782b      	ldrb	r3, [r5, #0]
 8004386:	2b2e      	cmp	r3, #46	@ 0x2e
 8004388:	d10c      	bne.n	80043a4 <_svfiprintf_r+0x134>
 800438a:	786b      	ldrb	r3, [r5, #1]
 800438c:	2b2a      	cmp	r3, #42	@ 0x2a
 800438e:	d134      	bne.n	80043fa <_svfiprintf_r+0x18a>
 8004390:	9b07      	ldr	r3, [sp, #28]
 8004392:	3502      	adds	r5, #2
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9207      	str	r2, [sp, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	da01      	bge.n	80043a2 <_svfiprintf_r+0x132>
 800439e:	2301      	movs	r3, #1
 80043a0:	425b      	negs	r3, r3
 80043a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a4:	4e2d      	ldr	r6, [pc, #180]	@ (800445c <_svfiprintf_r+0x1ec>)
 80043a6:	2203      	movs	r2, #3
 80043a8:	0030      	movs	r0, r6
 80043aa:	7829      	ldrb	r1, [r5, #0]
 80043ac:	f000 f9fe 	bl	80047ac <memchr>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d006      	beq.n	80043c2 <_svfiprintf_r+0x152>
 80043b4:	2340      	movs	r3, #64	@ 0x40
 80043b6:	1b80      	subs	r0, r0, r6
 80043b8:	4083      	lsls	r3, r0
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	3501      	adds	r5, #1
 80043be:	4313      	orrs	r3, r2
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	7829      	ldrb	r1, [r5, #0]
 80043c4:	2206      	movs	r2, #6
 80043c6:	4826      	ldr	r0, [pc, #152]	@ (8004460 <_svfiprintf_r+0x1f0>)
 80043c8:	1c6e      	adds	r6, r5, #1
 80043ca:	7621      	strb	r1, [r4, #24]
 80043cc:	f000 f9ee 	bl	80047ac <memchr>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d038      	beq.n	8004446 <_svfiprintf_r+0x1d6>
 80043d4:	4b23      	ldr	r3, [pc, #140]	@ (8004464 <_svfiprintf_r+0x1f4>)
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d122      	bne.n	8004420 <_svfiprintf_r+0x1b0>
 80043da:	2207      	movs	r2, #7
 80043dc:	9b07      	ldr	r3, [sp, #28]
 80043de:	3307      	adds	r3, #7
 80043e0:	4393      	bics	r3, r2
 80043e2:	3308      	adds	r3, #8
 80043e4:	9307      	str	r3, [sp, #28]
 80043e6:	6963      	ldr	r3, [r4, #20]
 80043e8:	9a04      	ldr	r2, [sp, #16]
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	6163      	str	r3, [r4, #20]
 80043ee:	e762      	b.n	80042b6 <_svfiprintf_r+0x46>
 80043f0:	4343      	muls	r3, r0
 80043f2:	0035      	movs	r5, r6
 80043f4:	2101      	movs	r1, #1
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	e7a4      	b.n	8004344 <_svfiprintf_r+0xd4>
 80043fa:	2300      	movs	r3, #0
 80043fc:	200a      	movs	r0, #10
 80043fe:	0019      	movs	r1, r3
 8004400:	3501      	adds	r5, #1
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	782a      	ldrb	r2, [r5, #0]
 8004406:	1c6e      	adds	r6, r5, #1
 8004408:	3a30      	subs	r2, #48	@ 0x30
 800440a:	2a09      	cmp	r2, #9
 800440c:	d903      	bls.n	8004416 <_svfiprintf_r+0x1a6>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0c8      	beq.n	80043a4 <_svfiprintf_r+0x134>
 8004412:	9109      	str	r1, [sp, #36]	@ 0x24
 8004414:	e7c6      	b.n	80043a4 <_svfiprintf_r+0x134>
 8004416:	4341      	muls	r1, r0
 8004418:	0035      	movs	r5, r6
 800441a:	2301      	movs	r3, #1
 800441c:	1889      	adds	r1, r1, r2
 800441e:	e7f1      	b.n	8004404 <_svfiprintf_r+0x194>
 8004420:	aa07      	add	r2, sp, #28
 8004422:	9200      	str	r2, [sp, #0]
 8004424:	0021      	movs	r1, r4
 8004426:	003a      	movs	r2, r7
 8004428:	4b0f      	ldr	r3, [pc, #60]	@ (8004468 <_svfiprintf_r+0x1f8>)
 800442a:	9803      	ldr	r0, [sp, #12]
 800442c:	e000      	b.n	8004430 <_svfiprintf_r+0x1c0>
 800442e:	bf00      	nop
 8004430:	9004      	str	r0, [sp, #16]
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	3301      	adds	r3, #1
 8004436:	d1d6      	bne.n	80043e6 <_svfiprintf_r+0x176>
 8004438:	89bb      	ldrh	r3, [r7, #12]
 800443a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800443c:	065b      	lsls	r3, r3, #25
 800443e:	d500      	bpl.n	8004442 <_svfiprintf_r+0x1d2>
 8004440:	e72c      	b.n	800429c <_svfiprintf_r+0x2c>
 8004442:	b021      	add	sp, #132	@ 0x84
 8004444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004446:	aa07      	add	r2, sp, #28
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	0021      	movs	r1, r4
 800444c:	003a      	movs	r2, r7
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <_svfiprintf_r+0x1f8>)
 8004450:	9803      	ldr	r0, [sp, #12]
 8004452:	f000 f87b 	bl	800454c <_printf_i>
 8004456:	e7eb      	b.n	8004430 <_svfiprintf_r+0x1c0>
 8004458:	0800496c 	.word	0x0800496c
 800445c:	08004972 	.word	0x08004972
 8004460:	08004976 	.word	0x08004976
 8004464:	00000000 	.word	0x00000000
 8004468:	080041b1 	.word	0x080041b1

0800446c <_printf_common>:
 800446c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800446e:	0016      	movs	r6, r2
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	688a      	ldr	r2, [r1, #8]
 8004474:	690b      	ldr	r3, [r1, #16]
 8004476:	000c      	movs	r4, r1
 8004478:	9000      	str	r0, [sp, #0]
 800447a:	4293      	cmp	r3, r2
 800447c:	da00      	bge.n	8004480 <_printf_common+0x14>
 800447e:	0013      	movs	r3, r2
 8004480:	0022      	movs	r2, r4
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	3243      	adds	r2, #67	@ 0x43
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	2a00      	cmp	r2, #0
 800448a:	d001      	beq.n	8004490 <_printf_common+0x24>
 800448c:	3301      	adds	r3, #1
 800448e:	6033      	str	r3, [r6, #0]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	069b      	lsls	r3, r3, #26
 8004494:	d502      	bpl.n	800449c <_printf_common+0x30>
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	3302      	adds	r3, #2
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	2306      	movs	r3, #6
 80044a0:	0015      	movs	r5, r2
 80044a2:	401d      	ands	r5, r3
 80044a4:	421a      	tst	r2, r3
 80044a6:	d027      	beq.n	80044f8 <_printf_common+0x8c>
 80044a8:	0023      	movs	r3, r4
 80044aa:	3343      	adds	r3, #67	@ 0x43
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	1e5a      	subs	r2, r3, #1
 80044b0:	4193      	sbcs	r3, r2
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	0692      	lsls	r2, r2, #26
 80044b6:	d430      	bmi.n	800451a <_printf_common+0xae>
 80044b8:	0022      	movs	r2, r4
 80044ba:	9901      	ldr	r1, [sp, #4]
 80044bc:	9800      	ldr	r0, [sp, #0]
 80044be:	9d08      	ldr	r5, [sp, #32]
 80044c0:	3243      	adds	r2, #67	@ 0x43
 80044c2:	47a8      	blx	r5
 80044c4:	3001      	adds	r0, #1
 80044c6:	d025      	beq.n	8004514 <_printf_common+0xa8>
 80044c8:	2206      	movs	r2, #6
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	2500      	movs	r5, #0
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d105      	bne.n	80044e0 <_printf_common+0x74>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	68e5      	ldr	r5, [r4, #12]
 80044d8:	1aed      	subs	r5, r5, r3
 80044da:	43eb      	mvns	r3, r5
 80044dc:	17db      	asrs	r3, r3, #31
 80044de:	401d      	ands	r5, r3
 80044e0:	68a3      	ldr	r3, [r4, #8]
 80044e2:	6922      	ldr	r2, [r4, #16]
 80044e4:	4293      	cmp	r3, r2
 80044e6:	dd01      	ble.n	80044ec <_printf_common+0x80>
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	18ed      	adds	r5, r5, r3
 80044ec:	2600      	movs	r6, #0
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	d120      	bne.n	8004534 <_printf_common+0xc8>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e010      	b.n	8004518 <_printf_common+0xac>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	6832      	ldr	r2, [r6, #0]
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	42ab      	cmp	r3, r5
 8004500:	ddd2      	ble.n	80044a8 <_printf_common+0x3c>
 8004502:	0022      	movs	r2, r4
 8004504:	2301      	movs	r3, #1
 8004506:	9901      	ldr	r1, [sp, #4]
 8004508:	9800      	ldr	r0, [sp, #0]
 800450a:	9f08      	ldr	r7, [sp, #32]
 800450c:	3219      	adds	r2, #25
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	d1f0      	bne.n	80044f6 <_printf_common+0x8a>
 8004514:	2001      	movs	r0, #1
 8004516:	4240      	negs	r0, r0
 8004518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800451a:	2030      	movs	r0, #48	@ 0x30
 800451c:	18e1      	adds	r1, r4, r3
 800451e:	3143      	adds	r1, #67	@ 0x43
 8004520:	7008      	strb	r0, [r1, #0]
 8004522:	0021      	movs	r1, r4
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	3145      	adds	r1, #69	@ 0x45
 8004528:	7809      	ldrb	r1, [r1, #0]
 800452a:	18a2      	adds	r2, r4, r2
 800452c:	3243      	adds	r2, #67	@ 0x43
 800452e:	3302      	adds	r3, #2
 8004530:	7011      	strb	r1, [r2, #0]
 8004532:	e7c1      	b.n	80044b8 <_printf_common+0x4c>
 8004534:	0022      	movs	r2, r4
 8004536:	2301      	movs	r3, #1
 8004538:	9901      	ldr	r1, [sp, #4]
 800453a:	9800      	ldr	r0, [sp, #0]
 800453c:	9f08      	ldr	r7, [sp, #32]
 800453e:	321a      	adds	r2, #26
 8004540:	47b8      	blx	r7
 8004542:	3001      	adds	r0, #1
 8004544:	d0e6      	beq.n	8004514 <_printf_common+0xa8>
 8004546:	3601      	adds	r6, #1
 8004548:	e7d1      	b.n	80044ee <_printf_common+0x82>
	...

0800454c <_printf_i>:
 800454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454e:	b08b      	sub	sp, #44	@ 0x2c
 8004550:	9206      	str	r2, [sp, #24]
 8004552:	000a      	movs	r2, r1
 8004554:	3243      	adds	r2, #67	@ 0x43
 8004556:	9307      	str	r3, [sp, #28]
 8004558:	9005      	str	r0, [sp, #20]
 800455a:	9203      	str	r2, [sp, #12]
 800455c:	7e0a      	ldrb	r2, [r1, #24]
 800455e:	000c      	movs	r4, r1
 8004560:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004562:	2a78      	cmp	r2, #120	@ 0x78
 8004564:	d809      	bhi.n	800457a <_printf_i+0x2e>
 8004566:	2a62      	cmp	r2, #98	@ 0x62
 8004568:	d80b      	bhi.n	8004582 <_printf_i+0x36>
 800456a:	2a00      	cmp	r2, #0
 800456c:	d100      	bne.n	8004570 <_printf_i+0x24>
 800456e:	e0ba      	b.n	80046e6 <_printf_i+0x19a>
 8004570:	497a      	ldr	r1, [pc, #488]	@ (800475c <_printf_i+0x210>)
 8004572:	9104      	str	r1, [sp, #16]
 8004574:	2a58      	cmp	r2, #88	@ 0x58
 8004576:	d100      	bne.n	800457a <_printf_i+0x2e>
 8004578:	e08e      	b.n	8004698 <_printf_i+0x14c>
 800457a:	0025      	movs	r5, r4
 800457c:	3542      	adds	r5, #66	@ 0x42
 800457e:	702a      	strb	r2, [r5, #0]
 8004580:	e022      	b.n	80045c8 <_printf_i+0x7c>
 8004582:	0010      	movs	r0, r2
 8004584:	3863      	subs	r0, #99	@ 0x63
 8004586:	2815      	cmp	r0, #21
 8004588:	d8f7      	bhi.n	800457a <_printf_i+0x2e>
 800458a:	f7fb fdc5 	bl	8000118 <__gnu_thumb1_case_shi>
 800458e:	0016      	.short	0x0016
 8004590:	fff6001f 	.word	0xfff6001f
 8004594:	fff6fff6 	.word	0xfff6fff6
 8004598:	001ffff6 	.word	0x001ffff6
 800459c:	fff6fff6 	.word	0xfff6fff6
 80045a0:	fff6fff6 	.word	0xfff6fff6
 80045a4:	0036009f 	.word	0x0036009f
 80045a8:	fff6007e 	.word	0xfff6007e
 80045ac:	00b0fff6 	.word	0x00b0fff6
 80045b0:	0036fff6 	.word	0x0036fff6
 80045b4:	fff6fff6 	.word	0xfff6fff6
 80045b8:	0082      	.short	0x0082
 80045ba:	0025      	movs	r5, r4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	3542      	adds	r5, #66	@ 0x42
 80045c0:	1d11      	adds	r1, r2, #4
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	702b      	strb	r3, [r5, #0]
 80045c8:	2301      	movs	r3, #1
 80045ca:	e09e      	b.n	800470a <_printf_i+0x1be>
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	6809      	ldr	r1, [r1, #0]
 80045d0:	1d02      	adds	r2, r0, #4
 80045d2:	060d      	lsls	r5, r1, #24
 80045d4:	d50b      	bpl.n	80045ee <_printf_i+0xa2>
 80045d6:	6806      	ldr	r6, [r0, #0]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	2e00      	cmp	r6, #0
 80045dc:	da03      	bge.n	80045e6 <_printf_i+0x9a>
 80045de:	232d      	movs	r3, #45	@ 0x2d
 80045e0:	9a03      	ldr	r2, [sp, #12]
 80045e2:	4276      	negs	r6, r6
 80045e4:	7013      	strb	r3, [r2, #0]
 80045e6:	4b5d      	ldr	r3, [pc, #372]	@ (800475c <_printf_i+0x210>)
 80045e8:	270a      	movs	r7, #10
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	e018      	b.n	8004620 <_printf_i+0xd4>
 80045ee:	6806      	ldr	r6, [r0, #0]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	0649      	lsls	r1, r1, #25
 80045f4:	d5f1      	bpl.n	80045da <_printf_i+0x8e>
 80045f6:	b236      	sxth	r6, r6
 80045f8:	e7ef      	b.n	80045da <_printf_i+0x8e>
 80045fa:	6808      	ldr	r0, [r1, #0]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	c940      	ldmia	r1!, {r6}
 8004600:	0605      	lsls	r5, r0, #24
 8004602:	d402      	bmi.n	800460a <_printf_i+0xbe>
 8004604:	0640      	lsls	r0, r0, #25
 8004606:	d500      	bpl.n	800460a <_printf_i+0xbe>
 8004608:	b2b6      	uxth	r6, r6
 800460a:	6019      	str	r1, [r3, #0]
 800460c:	4b53      	ldr	r3, [pc, #332]	@ (800475c <_printf_i+0x210>)
 800460e:	270a      	movs	r7, #10
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	2a6f      	cmp	r2, #111	@ 0x6f
 8004614:	d100      	bne.n	8004618 <_printf_i+0xcc>
 8004616:	3f02      	subs	r7, #2
 8004618:	0023      	movs	r3, r4
 800461a:	2200      	movs	r2, #0
 800461c:	3343      	adds	r3, #67	@ 0x43
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db06      	blt.n	8004636 <_printf_i+0xea>
 8004628:	2104      	movs	r1, #4
 800462a:	6822      	ldr	r2, [r4, #0]
 800462c:	9d03      	ldr	r5, [sp, #12]
 800462e:	438a      	bics	r2, r1
 8004630:	6022      	str	r2, [r4, #0]
 8004632:	4333      	orrs	r3, r6
 8004634:	d00c      	beq.n	8004650 <_printf_i+0x104>
 8004636:	9d03      	ldr	r5, [sp, #12]
 8004638:	0030      	movs	r0, r6
 800463a:	0039      	movs	r1, r7
 800463c:	f7fb fdfc 	bl	8000238 <__aeabi_uidivmod>
 8004640:	9b04      	ldr	r3, [sp, #16]
 8004642:	3d01      	subs	r5, #1
 8004644:	5c5b      	ldrb	r3, [r3, r1]
 8004646:	702b      	strb	r3, [r5, #0]
 8004648:	0033      	movs	r3, r6
 800464a:	0006      	movs	r6, r0
 800464c:	429f      	cmp	r7, r3
 800464e:	d9f3      	bls.n	8004638 <_printf_i+0xec>
 8004650:	2f08      	cmp	r7, #8
 8004652:	d109      	bne.n	8004668 <_printf_i+0x11c>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d506      	bpl.n	8004668 <_printf_i+0x11c>
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	6923      	ldr	r3, [r4, #16]
 800465e:	429a      	cmp	r2, r3
 8004660:	dc02      	bgt.n	8004668 <_printf_i+0x11c>
 8004662:	2330      	movs	r3, #48	@ 0x30
 8004664:	3d01      	subs	r5, #1
 8004666:	702b      	strb	r3, [r5, #0]
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	1b5b      	subs	r3, r3, r5
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	9b07      	ldr	r3, [sp, #28]
 8004670:	0021      	movs	r1, r4
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	9805      	ldr	r0, [sp, #20]
 8004676:	9b06      	ldr	r3, [sp, #24]
 8004678:	aa09      	add	r2, sp, #36	@ 0x24
 800467a:	f7ff fef7 	bl	800446c <_printf_common>
 800467e:	3001      	adds	r0, #1
 8004680:	d148      	bne.n	8004714 <_printf_i+0x1c8>
 8004682:	2001      	movs	r0, #1
 8004684:	4240      	negs	r0, r0
 8004686:	b00b      	add	sp, #44	@ 0x2c
 8004688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468a:	2220      	movs	r2, #32
 800468c:	6809      	ldr	r1, [r1, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	2278      	movs	r2, #120	@ 0x78
 8004694:	4932      	ldr	r1, [pc, #200]	@ (8004760 <_printf_i+0x214>)
 8004696:	9104      	str	r1, [sp, #16]
 8004698:	0021      	movs	r1, r4
 800469a:	3145      	adds	r1, #69	@ 0x45
 800469c:	700a      	strb	r2, [r1, #0]
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	c940      	ldmia	r1!, {r6}
 80046a4:	0610      	lsls	r0, r2, #24
 80046a6:	d402      	bmi.n	80046ae <_printf_i+0x162>
 80046a8:	0650      	lsls	r0, r2, #25
 80046aa:	d500      	bpl.n	80046ae <_printf_i+0x162>
 80046ac:	b2b6      	uxth	r6, r6
 80046ae:	6019      	str	r1, [r3, #0]
 80046b0:	07d3      	lsls	r3, r2, #31
 80046b2:	d502      	bpl.n	80046ba <_printf_i+0x16e>
 80046b4:	2320      	movs	r3, #32
 80046b6:	4313      	orrs	r3, r2
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	d001      	beq.n	80046c2 <_printf_i+0x176>
 80046be:	2710      	movs	r7, #16
 80046c0:	e7aa      	b.n	8004618 <_printf_i+0xcc>
 80046c2:	2220      	movs	r2, #32
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	4393      	bics	r3, r2
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	e7f8      	b.n	80046be <_printf_i+0x172>
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	680d      	ldr	r5, [r1, #0]
 80046d0:	1d10      	adds	r0, r2, #4
 80046d2:	6949      	ldr	r1, [r1, #20]
 80046d4:	6018      	str	r0, [r3, #0]
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	062e      	lsls	r6, r5, #24
 80046da:	d501      	bpl.n	80046e0 <_printf_i+0x194>
 80046dc:	6019      	str	r1, [r3, #0]
 80046de:	e002      	b.n	80046e6 <_printf_i+0x19a>
 80046e0:	066d      	lsls	r5, r5, #25
 80046e2:	d5fb      	bpl.n	80046dc <_printf_i+0x190>
 80046e4:	8019      	strh	r1, [r3, #0]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9d03      	ldr	r5, [sp, #12]
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	e7bf      	b.n	800466e <_printf_i+0x122>
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	1d11      	adds	r1, r2, #4
 80046f2:	6019      	str	r1, [r3, #0]
 80046f4:	6815      	ldr	r5, [r2, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	0028      	movs	r0, r5
 80046fa:	6862      	ldr	r2, [r4, #4]
 80046fc:	f000 f856 	bl	80047ac <memchr>
 8004700:	2800      	cmp	r0, #0
 8004702:	d001      	beq.n	8004708 <_printf_i+0x1bc>
 8004704:	1b40      	subs	r0, r0, r5
 8004706:	6060      	str	r0, [r4, #4]
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	2300      	movs	r3, #0
 800470e:	9a03      	ldr	r2, [sp, #12]
 8004710:	7013      	strb	r3, [r2, #0]
 8004712:	e7ac      	b.n	800466e <_printf_i+0x122>
 8004714:	002a      	movs	r2, r5
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	9906      	ldr	r1, [sp, #24]
 800471a:	9805      	ldr	r0, [sp, #20]
 800471c:	9d07      	ldr	r5, [sp, #28]
 800471e:	47a8      	blx	r5
 8004720:	3001      	adds	r0, #1
 8004722:	d0ae      	beq.n	8004682 <_printf_i+0x136>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	079b      	lsls	r3, r3, #30
 8004728:	d415      	bmi.n	8004756 <_printf_i+0x20a>
 800472a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800472c:	68e0      	ldr	r0, [r4, #12]
 800472e:	4298      	cmp	r0, r3
 8004730:	daa9      	bge.n	8004686 <_printf_i+0x13a>
 8004732:	0018      	movs	r0, r3
 8004734:	e7a7      	b.n	8004686 <_printf_i+0x13a>
 8004736:	0022      	movs	r2, r4
 8004738:	2301      	movs	r3, #1
 800473a:	9906      	ldr	r1, [sp, #24]
 800473c:	9805      	ldr	r0, [sp, #20]
 800473e:	9e07      	ldr	r6, [sp, #28]
 8004740:	3219      	adds	r2, #25
 8004742:	47b0      	blx	r6
 8004744:	3001      	adds	r0, #1
 8004746:	d09c      	beq.n	8004682 <_printf_i+0x136>
 8004748:	3501      	adds	r5, #1
 800474a:	68e3      	ldr	r3, [r4, #12]
 800474c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	42ab      	cmp	r3, r5
 8004752:	dcf0      	bgt.n	8004736 <_printf_i+0x1ea>
 8004754:	e7e9      	b.n	800472a <_printf_i+0x1de>
 8004756:	2500      	movs	r5, #0
 8004758:	e7f7      	b.n	800474a <_printf_i+0x1fe>
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	0800497d 	.word	0x0800497d
 8004760:	0800498e 	.word	0x0800498e

08004764 <memmove>:
 8004764:	b510      	push	{r4, lr}
 8004766:	4288      	cmp	r0, r1
 8004768:	d902      	bls.n	8004770 <memmove+0xc>
 800476a:	188b      	adds	r3, r1, r2
 800476c:	4298      	cmp	r0, r3
 800476e:	d308      	bcc.n	8004782 <memmove+0x1e>
 8004770:	2300      	movs	r3, #0
 8004772:	429a      	cmp	r2, r3
 8004774:	d007      	beq.n	8004786 <memmove+0x22>
 8004776:	5ccc      	ldrb	r4, [r1, r3]
 8004778:	54c4      	strb	r4, [r0, r3]
 800477a:	3301      	adds	r3, #1
 800477c:	e7f9      	b.n	8004772 <memmove+0xe>
 800477e:	5c8b      	ldrb	r3, [r1, r2]
 8004780:	5483      	strb	r3, [r0, r2]
 8004782:	3a01      	subs	r2, #1
 8004784:	d2fb      	bcs.n	800477e <memmove+0x1a>
 8004786:	bd10      	pop	{r4, pc}

08004788 <_sbrk_r>:
 8004788:	2300      	movs	r3, #0
 800478a:	b570      	push	{r4, r5, r6, lr}
 800478c:	4d06      	ldr	r5, [pc, #24]	@ (80047a8 <_sbrk_r+0x20>)
 800478e:	0004      	movs	r4, r0
 8004790:	0008      	movs	r0, r1
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	f7fc f9de 	bl	8000b54 <_sbrk>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d103      	bne.n	80047a4 <_sbrk_r+0x1c>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d000      	beq.n	80047a4 <_sbrk_r+0x1c>
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	2000026c 	.word	0x2000026c

080047ac <memchr>:
 80047ac:	b2c9      	uxtb	r1, r1
 80047ae:	1882      	adds	r2, r0, r2
 80047b0:	4290      	cmp	r0, r2
 80047b2:	d101      	bne.n	80047b8 <memchr+0xc>
 80047b4:	2000      	movs	r0, #0
 80047b6:	4770      	bx	lr
 80047b8:	7803      	ldrb	r3, [r0, #0]
 80047ba:	428b      	cmp	r3, r1
 80047bc:	d0fb      	beq.n	80047b6 <memchr+0xa>
 80047be:	3001      	adds	r0, #1
 80047c0:	e7f6      	b.n	80047b0 <memchr+0x4>

080047c2 <memcpy>:
 80047c2:	2300      	movs	r3, #0
 80047c4:	b510      	push	{r4, lr}
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d100      	bne.n	80047cc <memcpy+0xa>
 80047ca:	bd10      	pop	{r4, pc}
 80047cc:	5ccc      	ldrb	r4, [r1, r3]
 80047ce:	54c4      	strb	r4, [r0, r3]
 80047d0:	3301      	adds	r3, #1
 80047d2:	e7f8      	b.n	80047c6 <memcpy+0x4>

080047d4 <_realloc_r>:
 80047d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d6:	0006      	movs	r6, r0
 80047d8:	000c      	movs	r4, r1
 80047da:	0015      	movs	r5, r2
 80047dc:	2900      	cmp	r1, #0
 80047de:	d105      	bne.n	80047ec <_realloc_r+0x18>
 80047e0:	0011      	movs	r1, r2
 80047e2:	f7ff fc55 	bl	8004090 <_malloc_r>
 80047e6:	0004      	movs	r4, r0
 80047e8:	0020      	movs	r0, r4
 80047ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	d103      	bne.n	80047f8 <_realloc_r+0x24>
 80047f0:	f7ff fbe2 	bl	8003fb8 <_free_r>
 80047f4:	002c      	movs	r4, r5
 80047f6:	e7f7      	b.n	80047e8 <_realloc_r+0x14>
 80047f8:	f000 f81c 	bl	8004834 <_malloc_usable_size_r>
 80047fc:	0007      	movs	r7, r0
 80047fe:	4285      	cmp	r5, r0
 8004800:	d802      	bhi.n	8004808 <_realloc_r+0x34>
 8004802:	0843      	lsrs	r3, r0, #1
 8004804:	42ab      	cmp	r3, r5
 8004806:	d3ef      	bcc.n	80047e8 <_realloc_r+0x14>
 8004808:	0029      	movs	r1, r5
 800480a:	0030      	movs	r0, r6
 800480c:	f7ff fc40 	bl	8004090 <_malloc_r>
 8004810:	9001      	str	r0, [sp, #4]
 8004812:	2800      	cmp	r0, #0
 8004814:	d101      	bne.n	800481a <_realloc_r+0x46>
 8004816:	9c01      	ldr	r4, [sp, #4]
 8004818:	e7e6      	b.n	80047e8 <_realloc_r+0x14>
 800481a:	002a      	movs	r2, r5
 800481c:	42bd      	cmp	r5, r7
 800481e:	d900      	bls.n	8004822 <_realloc_r+0x4e>
 8004820:	003a      	movs	r2, r7
 8004822:	0021      	movs	r1, r4
 8004824:	9801      	ldr	r0, [sp, #4]
 8004826:	f7ff ffcc 	bl	80047c2 <memcpy>
 800482a:	0021      	movs	r1, r4
 800482c:	0030      	movs	r0, r6
 800482e:	f7ff fbc3 	bl	8003fb8 <_free_r>
 8004832:	e7f0      	b.n	8004816 <_realloc_r+0x42>

08004834 <_malloc_usable_size_r>:
 8004834:	1f0b      	subs	r3, r1, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	1f18      	subs	r0, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	da01      	bge.n	8004842 <_malloc_usable_size_r+0xe>
 800483e:	580b      	ldr	r3, [r1, r0]
 8004840:	18c0      	adds	r0, r0, r3
 8004842:	4770      	bx	lr

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
