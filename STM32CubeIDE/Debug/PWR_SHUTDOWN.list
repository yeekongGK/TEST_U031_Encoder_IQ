
PWR_SHUTDOWN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08005c88  08005c88  00006c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ecc  08005ecc  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ecc  08005ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed4  08005ed4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005edc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000006c  08005f48  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005f48  00007364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000143ff  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000cf  00000000  00000000  0001b493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00011fac  00000000  00000000  0001b562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ab7  00000000  00000000  0002d50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e50  00000000  00000000  0002ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ab2f5  00000000  00000000  00030e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b0b  00000000  00000000  000dc10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001af97  00000000  00000000  000dcc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f7baf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003750  00000000  00000000  000f7bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c70 	.word	0x08005c70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005c70 	.word	0x08005c70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000648:	f000 ff88 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	@ (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	@ (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000672:	f004 fe91 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f000 f80f 	bl	8000698 <main>

0800067a <LoopForever>:

LoopForever:
  b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000688:	08005edc 	.word	0x08005edc
  ldr r2, =_sbss
 800068c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000690:	20000364 	.word	0x20000364

08000694 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC_COMP1_IRQHandler>
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 ff89 	bl	80015b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED4 */
  BSP_LED_Init(LED4);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fe22 	bl	80012ec <BSP_LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f846 	bl	8000738 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* User push-button (EXTI_Line13) will be used to wakeup the system from Stop mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006ac:	2101      	movs	r1, #1
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fec0 	bl	8001434 <BSP_PB_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f91e 	bl	80008f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b8:	f000 f8ce 	bl	8000858 <MX_USART2_UART_Init>
  // MX_LPTIM1_Init();
  MX_RTC_Init();
 80006bc:	f000 f89c 	bl	80007f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <main+0x94>)
 80006c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <main+0x94>)
 80006c6:	2180      	movs	r1, #128	@ 0x80
 80006c8:	0549      	lsls	r1, r1, #21
 80006ca:	430a      	orrs	r2, r1
 80006cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <main+0x94>)
 80006d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006d2:	2380      	movs	r3, #128	@ 0x80
 80006d4:	055b      	lsls	r3, r3, #21
 80006d6:	4013      	ands	r3, r2
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <main+0x94>)
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <main+0x94>)
 80006e2:	4913      	ldr	r1, [pc, #76]	@ (8000730 <main+0x98>)
 80006e4:	400a      	ands	r2, r1
 80006e6:	609a      	str	r2, [r3, #8]

  //==========================================================
  // Initialize the tracking sensor module
  if (TRACSENS_Init() != 0)
 80006e8:	f000 fbac 	bl	8000e44 <TRACSENS_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <main+0x5c>
  {
      Error_Handler();
 80006f0:	f000 fa14 	bl	8000b1c <Error_Handler>
  }
  
  // Start the sensor
  TRACSENS_StartCounting();
 80006f4:	f000 fbda 	bl	8000eac <TRACSENS_StartCounting>
  
  UART_Printf("Main program start\r\n");
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <main+0x9c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f9e2 	bl	8000ac4 <UART_Printf>
  TRACSENS_DisplayInfo();
 8000700:	f000 fbe2 	bl	8000ec8 <TRACSENS_DisplayInfo>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // UART_Printf("Loop %d\r\n",index++);
    TRACSENS_DisplayInfo();
 8000704:	f000 fbe0 	bl	8000ec8 <TRACSENS_DisplayInfo>
    HAL_Delay(2000);
 8000708:	23fa      	movs	r3, #250	@ 0xfa
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	0018      	movs	r0, r3
 800070e:	f000 ffcf 	bl	80016b0 <HAL_Delay>
    
    /* Turn off LED4 */
    BSP_LED_Off(LED4);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fe4a 	bl	80013ac <BSP_LED_Off>

    /* Suspend tick */
    HAL_SuspendTick();
 8000718:	f000 ffee 	bl	80016f8 <HAL_SuspendTick>
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800071c:	2001      	movs	r0, #1
 800071e:	f002 f8ef 	bl	8002900 <HAL_PWREx_EnterSTOP2Mode>

    /* ... STOP 2 mode ... */

    /* Re-configure the system clock after wakeup */
    SYSCLKConfig_STOP();
 8000722:	f000 f947 	bl	80009b4 <SYSCLKConfig_STOP>
    TRACSENS_DisplayInfo();
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	e7ec      	b.n	8000704 <main+0x6c>
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	40021000 	.word	0x40021000
 8000730:	ffff7fff 	.word	0xffff7fff
 8000734:	08005c88 	.word	0x08005c88

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b097      	sub	sp, #92	@ 0x5c
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	2410      	movs	r4, #16
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2348      	movs	r3, #72	@ 0x48
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f004 fe17 	bl	800537c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	2310      	movs	r3, #16
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f004 fe10 	bl	800537c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f002 f861 	bl	8002828 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2218      	movs	r2, #24
 800076c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	22b0      	movs	r2, #176	@ 0xb0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2202      	movs	r2, #2
 800078a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2201      	movs	r2, #1
 8000790:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2270      	movs	r2, #112	@ 0x70
 8000796:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2210      	movs	r2, #16
 800079c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2280      	movs	r2, #128	@ 0x80
 80007a2:	0292      	lsls	r2, r2, #10
 80007a4:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	0492      	lsls	r2, r2, #18
 80007ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	0592      	lsls	r2, r2, #22
 80007b4:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 f8d5 	bl	8002968 <HAL_RCC_OscConfig>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007c2:	f000 f9ab 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	003b      	movs	r3, r7
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2203      	movs	r2, #3
 80007d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	003b      	movs	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007de:	003b      	movs	r3, r7
 80007e0:	2101      	movs	r1, #1
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 fca6 	bl	8003134 <HAL_RCC_ClockConfig>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007ec:	f000 f996 	bl	8000b1c <Error_Handler>
  }
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b017      	add	sp, #92	@ 0x5c
 80007f6:	bd90      	pop	{r4, r7, pc}

080007f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_RTC_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <MX_RTC_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_RTC_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_RTC_Init+0x58>)
 800080a:	227f      	movs	r2, #127	@ 0x7f
 800080c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_RTC_Init+0x58>)
 8000810:	22ff      	movs	r2, #255	@ 0xff
 8000812:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_RTC_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <MX_RTC_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_RTC_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <MX_RTC_Init+0x58>)
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	05d2      	lsls	r2, r2, #23
 800082c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_RTC_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_RTC_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <MX_RTC_Init+0x58>)
 800083c:	0018      	movs	r0, r3
 800083e:	f003 fe69 	bl	8004514 <HAL_RTC_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f969 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000088 	.word	0x20000088
 8000854:	40002800 	.word	0x40002800

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 800085e:	4a24      	ldr	r2, [pc, #144]	@ (80008f0 <MX_USART2_UART_Init+0x98>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 8000864:	22e1      	movs	r2, #225	@ 0xe1
 8000866:	0252      	lsls	r2, r2, #9
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 ff2e 	bl	8004704 <HAL_UART_Init>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f936 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f004 fc47 	bl	8005148 <HAL_UARTEx_SetTxFifoThreshold>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f92d 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fc7e 	bl	80051c8 <HAL_UARTEx_SetRxFifoThreshold>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f924 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <MX_USART2_UART_Init+0x94>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f004 fbfc 	bl	80050d4 <HAL_UARTEx_DisableFifoMode>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f91c 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	200000b8 	.word	0x200000b8
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b089      	sub	sp, #36	@ 0x24
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	240c      	movs	r4, #12
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	0018      	movs	r0, r3
 8000900:	2314      	movs	r3, #20
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f004 fd39 	bl	800537c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <MX_GPIO_Init+0xb8>)
 800090c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800090e:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <MX_GPIO_Init+0xb8>)
 8000910:	2104      	movs	r1, #4
 8000912:	430a      	orrs	r2, r1
 8000914:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000916:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <MX_GPIO_Init+0xb8>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	2204      	movs	r2, #4
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <MX_GPIO_Init+0xb8>)
 8000924:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <MX_GPIO_Init+0xb8>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MX_GPIO_Init+0xb8>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800093a:	23a0      	movs	r3, #160	@ 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	0018      	movs	r0, r3
 8000944:	f001 f97c 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_USER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	0192      	lsls	r2, r2, #6
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2284      	movs	r2, #132	@ 0x84
 8000954:	0392      	lsls	r2, r2, #14
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2201      	movs	r2, #1
 800095c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 800095e:	193b      	adds	r3, r7, r4
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <MX_GPIO_Init+0xbc>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f000 ffff 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800096a:	0021      	movs	r1, r4
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2220      	movs	r2, #32
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000984:	187a      	adds	r2, r7, r1
 8000986:	23a0      	movs	r3, #160	@ 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 ffeb 	bl	8001968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2007      	movs	r0, #7
 8000998:	f000 ff68 	bl	800186c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800099c:	2007      	movs	r0, #7
 800099e:	f000 ff7a 	bl	8001896 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b009      	add	sp, #36	@ 0x24
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	50000800 	.word	0x50000800

080009b4 <SYSCLKConfig_STOP>:
/**
  * @brief  Configures system clock after wake-up from STOP: enable MSI, PLL
  * and select PLL as system clock source.
  */
static void SYSCLKConfig_STOP(void)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b099      	sub	sp, #100	@ 0x64
 80009b8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	2350      	movs	r3, #80	@ 0x50
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	2310      	movs	r3, #16
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f004 fcd9 	bl	800537c <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	2408      	movs	r4, #8
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	0018      	movs	r0, r3
 80009d0:	2348      	movs	r3, #72	@ 0x48
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f004 fcd1 	bl	800537c <memset>
  uint32_t pFLatency = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <SYSCLKConfig_STOP+0xa4>)
 80009e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <SYSCLKConfig_STOP+0xa4>)
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	0549      	lsls	r1, r1, #21
 80009e8:	430a      	orrs	r2, r1
 80009ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <SYSCLKConfig_STOP+0xa4>)
 80009ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	055b      	lsls	r3, r3, #21
 80009f4:	4013      	ands	r3, r2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* Get the Oscillators configuration according to the internal RCC registers */
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 fd43 	bl	8003488 <HAL_RCC_GetOscConfig>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 ffa9 	bl	8002968 <HAL_RCC_OscConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <SYSCLKConfig_STOP+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 f87f 	bl	8000b1c <Error_Handler>
  }

  /* Get the Clocks configuration according to the internal RCC registers */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 8000a1e:	1d3a      	adds	r2, r7, #4
 8000a20:	2450      	movs	r4, #80	@ 0x50
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fe14 	bl	8003654 <HAL_RCC_GetClockConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK;
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2203      	movs	r2, #3
 8000a38:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fb77 	bl	8003134 <HAL_RCC_ClockConfig>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <SYSCLKConfig_STOP+0x9a>
  {
    Error_Handler();
 8000a4a:	f000 f867 	bl	8000b1c <Error_Handler>
  }
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b019      	add	sp, #100	@ 0x64
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_SYSTICK_Callback>:

/**
  * @brief SYSTICK callback
  */
void HAL_SYSTICK_Callback(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  if (TimingDelay != 0)
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_SYSTICK_Callback+0x2c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <HAL_SYSTICK_Callback+0x18>
  {
    TimingDelay--;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_SYSTICK_Callback+0x2c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_SYSTICK_Callback+0x2c>)
 8000a70:	601a      	str	r2, [r3, #0]
  {
    /* Toggle LED4 */
    BSP_LED_Toggle(LED4);
    TimingDelay = LED_TOGGLE_DELAY;
  }
}
 8000a72:	e005      	b.n	8000a80 <HAL_SYSTICK_Callback+0x24>
    BSP_LED_Toggle(LED4);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 fcbb 	bl	80013f0 <BSP_LED_Toggle>
    TimingDelay = LED_TOGGLE_DELAY;
 8000a7a:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_SYSTICK_Callback+0x2c>)
 8000a7c:	2264      	movs	r2, #100	@ 0x64
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	2000014c 	.word	0x2000014c

08000a8c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	0002      	movs	r2, r0
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BUTTON_USER_PIN)
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	881a      	ldrh	r2, [r3, #0]
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d108      	bne.n	8000ab6 <HAL_GPIO_EXTI_Falling_Callback+0x2a>
  {
    /* Reconfigure LED4 */
    BSP_LED_Init(LED4);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fc21 	bl	80012ec <BSP_LED_Init>
   /* Toggle LED4 */
    BSP_LED_Toggle(LED4);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fca0 	bl	80013f0 <BSP_LED_Toggle>
    TimingDelay = LED_TOGGLE_DELAY;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8000ab2:	2264      	movs	r2, #100	@ 0x64
 8000ab4:	601a      	str	r2, [r3, #0]
  }
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	2000014c 	.word	0x2000014c

08000ac4 <UART_Printf>:

void UART_Printf(char *format, ...)
{
 8000ac4:	b40f      	push	{r0, r1, r2, r3}
 8000ac6:	b590      	push	{r4, r7, lr}
 8000ac8:	b0c3      	sub	sp, #268	@ 0x10c
 8000aca:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 8000acc:	238a      	movs	r3, #138	@ 0x8a
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	185b      	adds	r3, r3, r1
 8000ad4:	19db      	adds	r3, r3, r7
 8000ad6:	607b      	str	r3, [r7, #4]
  vsnprintf(str, sizeof(str), format, args);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2288      	movs	r2, #136	@ 0x88
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	1852      	adds	r2, r2, r1
 8000ae0:	19d2      	adds	r2, r2, r7
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0049      	lsls	r1, r1, #1
 8000ae8:	2408      	movs	r4, #8
 8000aea:	1938      	adds	r0, r7, r4
 8000aec:	f004 fc3a 	bl	8005364 <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fb08 	bl	8000108 <strlen>
 8000af8:	0003      	movs	r3, r0
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	1939      	adds	r1, r7, r4
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <UART_Printf+0x54>)
 8000b04:	f003 fe54 	bl	80047b0 <HAL_UART_Transmit>
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b043      	add	sp, #268	@ 0x10c
 8000b0e:	bc90      	pop	{r4, r7}
 8000b10:	bc08      	pop	{r3}
 8000b12:	b004      	add	sp, #16
 8000b14:	4718      	bx	r3
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	200000b8 	.word	0x200000b8

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 fc21 	bl	8001368 <BSP_LED_On>
  while (1)
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	e7fd      	b.n	8000b26 <Error_Handler+0xa>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	0549      	lsls	r1, r1, #21
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	055b      	lsls	r3, r3, #21
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	661a      	str	r2, [r3, #96]	@ 0x60
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b099      	sub	sp, #100	@ 0x64
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	234c      	movs	r3, #76	@ 0x4c
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f004 fbf8 	bl	800537c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b8c:	2414      	movs	r4, #20
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	2338      	movs	r3, #56	@ 0x38
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f004 fbf0 	bl	800537c <memset>
  if(hlptim->Instance==LPTIM1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <HAL_LPTIM_MspInit+0xc8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d145      	bne.n	8000c32 <HAL_LPTIM_MspInit+0xbe>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	02d2      	lsls	r2, r2, #11
 8000bb2:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fde2 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8000bc0:	f7ff ffac 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <HAL_LPTIM_MspInit+0xcc>)
 8000bc6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_LPTIM_MspInit+0xcc>)
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	0609      	lsls	r1, r1, #24
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <HAL_LPTIM_MspInit+0xcc>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd6:	0fdb      	lsrs	r3, r3, #31
 8000bd8:	07db      	lsls	r3, r3, #31
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_LPTIM_MspInit+0xcc>)
 8000be0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_LPTIM_MspInit+0xcc>)
 8000be4:	2104      	movs	r1, #4
 8000be6:	430a      	orrs	r2, r1
 8000be8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_LPTIM_MspInit+0xcc>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000bf6:	214c      	movs	r1, #76	@ 0x4c
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2202      	movs	r2, #2
 8000c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2201      	movs	r2, #1
 8000c14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_LPTIM_MspInit+0xd0>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f000 fea3 	bl	8001968 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2011      	movs	r0, #17
 8000c28:	f000 fe20 	bl	800186c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000c2c:	2011      	movs	r0, #17
 8000c2e:	f000 fe32 	bl	8001896 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b019      	add	sp, #100	@ 0x64
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	40007c00 	.word	0x40007c00
 8000c40:	40021000 	.word	0x40021000
 8000c44:	50000800 	.word	0x50000800

08000c48 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b093      	sub	sp, #76	@ 0x4c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	2410      	movs	r4, #16
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2338      	movs	r3, #56	@ 0x38
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f004 fb8e 	bl	800537c <memset>
  if(hrtc->Instance==RTC)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a16      	ldr	r2, [pc, #88]	@ (8000cc0 <HAL_RTC_MspInit+0x78>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d126      	bne.n	8000cb8 <HAL_RTC_MspInit+0x70>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	0212      	lsls	r2, r2, #8
 8000c70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2280      	movs	r2, #128	@ 0x80
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f002 fd7f 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c86:	f7ff ff49 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc4 <HAL_RTC_MspInit+0x7c>)
 8000c8c:	2390      	movs	r3, #144	@ 0x90
 8000c8e:	58d3      	ldr	r3, [r2, r3]
 8000c90:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <HAL_RTC_MspInit+0x7c>)
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	0212      	lsls	r2, r2, #8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	2290      	movs	r2, #144	@ 0x90
 8000c9a:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_RTC_MspInit+0x7c>)
 8000c9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_RTC_MspInit+0x7c>)
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	00c9      	lsls	r1, r1, #3
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	659a      	str	r2, [r3, #88]	@ 0x58
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_RTC_MspInit+0x7c>)
 8000cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cae:	2380      	movs	r3, #128	@ 0x80
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b013      	add	sp, #76	@ 0x4c
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	40002800 	.word	0x40002800
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b099      	sub	sp, #100	@ 0x64
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	234c      	movs	r3, #76	@ 0x4c
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f004 fb4e 	bl	800537c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	2414      	movs	r4, #20
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2338      	movs	r3, #56	@ 0x38
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f004 fb46 	bl	800537c <memset>
  if(huart->Instance==USART2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <HAL_UART_MspInit+0xb8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d13e      	bne.n	8000d78 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f002 fd39 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d12:	f7ff ff03 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	0289      	lsls	r1, r1, #10
 8000d20:	430a      	orrs	r2, r1
 8000d22:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d28:	2380      	movs	r3, #128	@ 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_UART_MspInit+0xbc>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d4a:	214c      	movs	r1, #76	@ 0x4c
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2202      	movs	r2, #2
 8000d56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2207      	movs	r2, #7
 8000d68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	187a      	adds	r2, r7, r1
 8000d6c:	23a0      	movs	r3, #160	@ 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 fdf8 	bl	8001968 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b019      	add	sp, #100	@ 0x64
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40021000 	.word	0x40021000

08000d88 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 fc6a 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000da4:	f000 fd94 	bl	80018d0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 ff7a 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(TRACSENS_IO_GetHandle());
 8000dc6:	f000 f99f 	bl	8001108 <TRACSENS_IO_GetHandle>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 f947 	bl	8002060 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f004 fac0 	bl	800538c <__errno>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	18d2      	adds	r2, r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <_sbrk+0x64>)
 8000e28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20002000 	.word	0x20002000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	20000150 	.word	0x20000150
 8000e40:	20000368 	.word	0x20000368

08000e44 <TRACSENS_Init>:

/**
 * @brief Initializes the module and its hardware dependency.
 */
int TRACSENS_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
    if (TRACSENS_IO_Init() != 0)
 8000e48:	f000 f966 	bl	8001118 <TRACSENS_IO_Init>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d002      	beq.n	8000e56 <TRACSENS_Init+0x12>
    {
        return -1; // Hardware initialization failed
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	e006      	b.n	8000e64 <TRACSENS_Init+0x20>
    }

    // Register this module's static callbacks with the IO layer
    TRACSENS_IO_RegisterCallbacks(
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <TRACSENS_Init+0x28>)
 8000e58:	4905      	ldr	r1, [pc, #20]	@ (8000e70 <TRACSENS_Init+0x2c>)
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <TRACSENS_Init+0x30>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 f9db 	bl	8001218 <TRACSENS_IO_RegisterCallbacks>
        TRACSENS_AutoReloadMatchCallback,
        TRACSENS_CounterChangedToUpCallback,
        TRACSENS_CounterChangedToDownCallback
    );
    return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	08000f55 	.word	0x08000f55
 8000e70:	08000f35 	.word	0x08000f35
 8000e74:	08000f75 	.word	0x08000f75

08000e78 <TRACSENS_GetCounter>:

/**
 * @brief Gets the full 32-bit encoder counter value.
 */
static int32_t TRACSENS_GetCounter(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7e:	b672      	cpsid	i
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
    uint16_t hw_counter_val;
    int32_t multiplier_val;
    
    __disable_irq();
    hw_counter_val = TRACSENS_IO_GetCounter();
 8000e82:	1dbc      	adds	r4, r7, #6
 8000e84:	f000 f9ba 	bl	80011fc <TRACSENS_IO_GetCounter>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	8023      	strh	r3, [r4, #0]
    multiplier_val = lCntrMultiplier;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <TRACSENS_GetCounter+0x30>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e92:	b662      	cpsie	i
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
    __enable_irq();

    return (multiplier_val * 65536) + hw_counter_val;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	1dbb      	adds	r3, r7, #6
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	18d3      	adds	r3, r2, r3
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	20000154 	.word	0x20000154

08000eac <TRACSENS_StartCounting>:

/**
 * @brief Starts the hardware counter.
 */
void TRACSENS_StartCounting(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    TRACSENS_IO_Start();
 8000eb0:	f000 f96c 	bl	800118c <TRACSENS_IO_Start>
    // Initialize the last counter value for accurate delta calculation from the start
    lLastCounterValue = TRACSENS_GetCounter();
 8000eb4:	f7ff ffe0 	bl	8000e78 <TRACSENS_GetCounter>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	4b02      	ldr	r3, [pc, #8]	@ (8000ec4 <TRACSENS_StartCounting+0x18>)
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000164 	.word	0x20000164

08000ec8 <TRACSENS_DisplayInfo>:

/**
 * @brief Calculates and displays sensor statistics.
 */
void TRACSENS_DisplayInfo(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
	int32_t current_value = TRACSENS_GetCounter();
 8000ece:	f7ff ffd3 	bl	8000e78 <TRACSENS_GetCounter>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	607b      	str	r3, [r7, #4]
	int32_t delta = current_value - lLastCounterValue;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <TRACSENS_DisplayInfo+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	603b      	str	r3, [r7, #0]
	
	if (delta > 0)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dd06      	ble.n	8000ef4 <TRACSENS_DisplayInfo+0x2c>
	{
		lForwardCount += delta;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <TRACSENS_DisplayInfo+0x60>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	18d2      	adds	r2, r2, r3
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <TRACSENS_DisplayInfo+0x60>)
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e008      	b.n	8000f06 <TRACSENS_DisplayInfo+0x3e>
	}
	else if (delta < 0)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da05      	bge.n	8000f06 <TRACSENS_DisplayInfo+0x3e>
	{
		lBackwardCount += -delta;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <TRACSENS_DisplayInfo+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <TRACSENS_DisplayInfo+0x64>)
 8000f04:	601a      	str	r2, [r3, #0]
	}
	
	lLastCounterValue = current_value;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <TRACSENS_DisplayInfo+0x5c>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]
	
	UART_Printf("Current: %ld, Forward Total: %ld, Backward Total: %ld\r\n",
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <TRACSENS_DisplayInfo+0x60>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <TRACSENS_DisplayInfo+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <TRACSENS_DisplayInfo+0x68>)
 8000f18:	f7ff fdd4 	bl	8000ac4 <UART_Printf>
			current_value, lForwardCount, lBackwardCount);
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000164 	.word	0x20000164
 8000f28:	2000015c 	.word	0x2000015c
 8000f2c:	20000160 	.word	0x20000160
 8000f30:	08005ca0 	.word	0x08005ca0

08000f34 <TRACSENS_CounterChangedToUpCallback>:

/**
 * @brief  Callback for LPTIM counter direction change to UP.
 */
static void TRACSENS_CounterChangedToUpCallback(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	eCounterDirection = FORWARD_CounterDirection;
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <TRACSENS_CounterChangedToUpCallback+0x18>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
  	UART_Printf("Direction changed to UP (Forward)\r\n"); // Optional: can be noisy
 8000f3e:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <TRACSENS_CounterChangedToUpCallback+0x1c>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff fdbf 	bl	8000ac4 <UART_Printf>
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000158 	.word	0x20000158
 8000f50:	08005cd8 	.word	0x08005cd8

08000f54 <TRACSENS_CounterChangedToDownCallback>:

/**
 * @brief  Callback for LPTIM counter direction change to DOWN.
 */
static void TRACSENS_CounterChangedToDownCallback(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	eCounterDirection = BACKWARD_CounterDirection;
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <TRACSENS_CounterChangedToDownCallback+0x18>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
  	UART_Printf("Direction changed to DOWN (Backward)\r\n"); // Optional: can be noisy
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <TRACSENS_CounterChangedToDownCallback+0x1c>)
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff fdaf 	bl	8000ac4 <UART_Printf>
}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000158 	.word	0x20000158
 8000f70:	08005cfc 	.word	0x08005cfc

08000f74 <TRACSENS_AutoReloadMatchCallback>:

/**
 * @brief  Callback for LPTIM Auto-Reload Match (counter wraparound).
 */
static void TRACSENS_AutoReloadMatchCallback(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	int32_t current_value;
  if (eCounterDirection == FORWARD_CounterDirection)
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <TRACSENS_AutoReloadMatchCallback+0x78>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d105      	bne.n	8000f8e <TRACSENS_AutoReloadMatchCallback+0x1a>
  {
    lCntrMultiplier++;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e021      	b.n	8000fd2 <TRACSENS_AutoReloadMatchCallback+0x5e>
  }
  else if (eCounterDirection == BACKWARD_CounterDirection)
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <TRACSENS_AutoReloadMatchCallback+0x78>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d105      	bne.n	8000fa2 <TRACSENS_AutoReloadMatchCallback+0x2e>
  {
    lCntrMultiplier--;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	e017      	b.n	8000fd2 <TRACSENS_AutoReloadMatchCallback+0x5e>
  }else
  {
    current_value = TRACSENS_GetCounter();
 8000fa2:	f7ff ff69 	bl	8000e78 <TRACSENS_GetCounter>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	607b      	str	r3, [r7, #4]

    if (current_value != 0)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <TRACSENS_AutoReloadMatchCallback+0x4e>
    {
      // 65535 = underflow
      lCntrMultiplier--;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000fb8:	601a      	str	r2, [r3, #0]
      eCounterDirection= BACKWARD_CounterDirection;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <TRACSENS_AutoReloadMatchCallback+0x78>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e007      	b.n	8000fd2 <TRACSENS_AutoReloadMatchCallback+0x5e>
    }
    else
    {
      // 0 = overflow
      lCntrMultiplier++;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000fca:	601a      	str	r2, [r3, #0]
      eCounterDirection= FORWARD_CounterDirection;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <TRACSENS_AutoReloadMatchCallback+0x78>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
    }
  }
  UART_Printf("AutoReloadMatchCallback: Dir=%d, Multiplier=%ld, curr=%ld\r\n", eCounterDirection, lCntrMultiplier, current_value); // Optional: can be noisy
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <TRACSENS_AutoReloadMatchCallback+0x78>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <TRACSENS_AutoReloadMatchCallback+0x7c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <TRACSENS_AutoReloadMatchCallback+0x80>)
 8000fe0:	f7ff fd70 	bl	8000ac4 <UART_Printf>

}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000158 	.word	0x20000158
 8000ff0:	20000154 	.word	0x20000154
 8000ff4:	08005d24 	.word	0x08005d24

08000ff8 <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2201      	movs	r2, #1
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b002      	add	sp, #8
 8001012:	bd80      	pop	{r7, pc}

08001014 <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	2206      	movs	r2, #6
 8001024:	4393      	bics	r3, r2
 8001026:	001a      	movs	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}

0800105a <LL_LPTIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_LPTIM_GetCounter
  * @param  LPTIMx Low-Power Timer instance
  * @retval Counter value
  */
__STATIC_INLINE uint32_t LL_LPTIM_GetCounter(const LPTIM_TypeDef *LPTIMx)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(LPTIMx->CNT, LPTIM_CNT_CNT));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	0c1b      	lsrs	r3, r3, #16
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <LL_LPTIM_SetEncoderMode>:
  *         @arg @ref LL_LPTIM_ENCODER_MODE_FALLING
  *         @arg @ref LL_LPTIM_ENCODER_MODE_RISING_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetEncoderMode(LPTIM_TypeDef *LPTIMx, uint32_t EncoderMode)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKPOL, EncoderMode);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2206      	movs	r2, #6
 8001082:	4393      	bics	r3, r2
 8001084:	001a      	movs	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60da      	str	r2, [r3, #12]
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <LL_LPTIM_EnableEncoderMode>:
  * @rmtoll CFGR         ENC           LL_LPTIM_EnableEncoderMode
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableEncoderMode(LPTIM_TypeDef *LPTIMx)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CFGR, LPTIM_CFGR_ENC);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2280      	movs	r2, #128	@ 0x80
 80010a4:	0452      	lsls	r2, r2, #17
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll DIER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->DIER, LPTIM_DIER_ARRMIE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2202      	movs	r2, #2
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LL_LPTIM_EnableIT_UP>:
  * @rmtoll DIER         UPIE          LL_LPTIM_EnableIT_UP
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_UP(LPTIM_TypeDef *LPTIMx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->DIER, LPTIM_DIER_UPIE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2220      	movs	r2, #32
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	609a      	str	r2, [r3, #8]
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <LL_LPTIM_EnableIT_DOWN>:
  * @rmtoll DIER         DOWNIE        LL_LPTIM_EnableIT_DOWN
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_DOWN(LPTIM_TypeDef *LPTIMx)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->DIER, LPTIM_DIER_DOWNIE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2240      	movs	r2, #64	@ 0x40
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <TRACSENS_IO_GetHandle>:
static void LPTIM1_CounterChangedToUpCallback(LPTIM_HandleTypeDef *hlptim);
static void LPTIM1_CounterChangedToDownCallback(LPTIM_HandleTypeDef *hlptim);


LPTIM_HandleTypeDef* TRACSENS_IO_GetHandle(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    return &hlptim1;
 800110c:	4b01      	ldr	r3, [pc, #4]	@ (8001114 <TRACSENS_IO_GetHandle+0xc>)
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000168 	.word	0x20000168

08001118 <TRACSENS_IO_Init>:

/**
 * @brief Initializes the LPTIM1 peripheral in Encoder mode.
 */
int TRACSENS_IO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 800111e:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <TRACSENS_IO_Init+0x6c>)
 8001120:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <TRACSENS_IO_Init+0x70>)
 800113e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 0xFFFF; // Autoreload value
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001142:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <TRACSENS_IO_Init+0x70>)
 8001144:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	0412      	lsls	r2, r2, #16
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001156:	2200      	movs	r2, #0
 8001158:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001162:	2200      	movs	r2, #0
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34

  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <TRACSENS_IO_Init+0x68>)
 8001168:	0018      	movs	r0, r3
 800116a:	f000 fdd5 	bl	8001d18 <HAL_LPTIM_Init>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d002      	beq.n	8001178 <TRACSENS_IO_Init+0x60>
  {
    return -1; // Error
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	e000      	b.n	800117a <TRACSENS_IO_Init+0x62>
  }
  return 0; // Success
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000168 	.word	0x20000168
 8001184:	40007c00 	.word	0x40007c00
 8001188:	0000ffff 	.word	0x0000ffff

0800118c <TRACSENS_IO_Start>:

/**
 * @brief Starts the LPTIM1 counter.
 */
void TRACSENS_IO_Start(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    if (HAL_LPTIM_Counter_Start_IT(&hlptim1) != HAL_OK)
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <TRACSENS_IO_Start+0x64>)
 8001192:	0018      	movs	r0, r3
 8001194:	f000 ff14 	bl	8001fc0 <HAL_LPTIM_Counter_Start_IT>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <TRACSENS_IO_Start+0x14>
    {
        // In a real application, you would handle this error
        while(1);
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	e7fd      	b.n	800119c <TRACSENS_IO_Start+0x10>
    }
    
	/* Enable the required interrupts */
	LL_LPTIM_EnableIT_ARRM(LPTIM1); 	
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff86 	bl	80010b4 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_EnableIT_UP(LPTIM1);		
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff ff90 	bl	80010d0 <LL_LPTIM_EnableIT_UP>
	LL_LPTIM_EnableIT_DOWN(LPTIM1);
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff9a 	bl	80010ec <LL_LPTIM_EnableIT_DOWN>

	LL_LPTIM_SetEncoderMode(LPTIM1, LL_LPTIM_ENCODER_MODE_RISING_FALLING);
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff ff58 	bl	8001072 <LL_LPTIM_SetEncoderMode>
    LL_LPTIM_EnableEncoderMode(LPTIM1);
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff66 	bl	8001096 <LL_LPTIM_EnableEncoderMode>
    LL_LPTIM_Enable(LPTIM1);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ff13 	bl	8000ff8 <LL_LPTIM_Enable>
	LL_LPTIM_SetAutoReload(LPTIM1, 0xFFFF);
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <TRACSENS_IO_Start+0x6c>)
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff2d 	bl	8001038 <LL_LPTIM_SetAutoReload>
    LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <TRACSENS_IO_Start+0x68>)
 80011e0:	2104      	movs	r1, #4
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff16 	bl	8001014 <LL_LPTIM_StartCounter>
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	20000168 	.word	0x20000168
 80011f4:	40007c00 	.word	0x40007c00
 80011f8:	0000ffff 	.word	0x0000ffff

080011fc <TRACSENS_IO_GetCounter>:

/**
 * @brief Reads the LPTIM1 counter register.
 */
uint16_t TRACSENS_IO_GetCounter(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    return LL_LPTIM_GetCounter(LPTIM1);
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <TRACSENS_IO_GetCounter+0x18>)
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff ff29 	bl	800105a <LL_LPTIM_GetCounter>
 8001208:	0003      	movs	r3, r0
 800120a:	b29b      	uxth	r3, r3
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	40007c00 	.word	0x40007c00

08001218 <TRACSENS_IO_RegisterCallbacks>:

/**
 * @brief Registers application callbacks and assigns them to the HAL LPTIM callbacks.
 */
void TRACSENS_IO_RegisterCallbacks(void (*reload_cb)(void), void (*dir_up_cb)(void), void (*dir_down_cb)(void))
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
    // Store the application-level function pointers
    App_ReloadCallback = reload_cb;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <TRACSENS_IO_RegisterCallbacks+0x4c>)
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]
    App_DirUpCallback = dir_up_cb;
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <TRACSENS_IO_RegisterCallbacks+0x50>)
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	601a      	str	r2, [r3, #0]
    App_DirDownCallback = dir_down_cb;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <TRACSENS_IO_RegisterCallbacks+0x54>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]

    // Register the local, hardware-specific ISR handlers with the HAL driver
    HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_AUTORELOAD_MATCH_CB_ID, LPTIM1_AutoReloadMatchCallback);
 8001236:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <TRACSENS_IO_RegisterCallbacks+0x58>)
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <TRACSENS_IO_RegisterCallbacks+0x5c>)
 800123a:	2103      	movs	r1, #3
 800123c:	0018      	movs	r0, r3
 800123e:	f001 f9d1 	bl	80025e4 <HAL_LPTIM_RegisterCallback>
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_UP_CB_ID, LPTIM1_CounterChangedToUpCallback);
 8001242:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <TRACSENS_IO_RegisterCallbacks+0x60>)
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <TRACSENS_IO_RegisterCallbacks+0x5c>)
 8001246:	2107      	movs	r1, #7
 8001248:	0018      	movs	r0, r3
 800124a:	f001 f9cb 	bl	80025e4 <HAL_LPTIM_RegisterCallback>
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_DIRECTION_DOWN_CB_ID, LPTIM1_CounterChangedToDownCallback);
 800124e:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <TRACSENS_IO_RegisterCallbacks+0x64>)
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <TRACSENS_IO_RegisterCallbacks+0x5c>)
 8001252:	2108      	movs	r1, #8
 8001254:	0018      	movs	r0, r3
 8001256:	f001 f9c5 	bl	80025e4 <HAL_LPTIM_RegisterCallback>
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	20000200 	.word	0x20000200
 8001268:	20000204 	.word	0x20000204
 800126c:	20000208 	.word	0x20000208
 8001270:	08001281 	.word	0x08001281
 8001274:	20000168 	.word	0x20000168
 8001278:	080012a5 	.word	0x080012a5
 800127c:	080012c9 	.word	0x080012c9

08001280 <LPTIM1_AutoReloadMatchCallback>:
 * @brief  LPTIM1 Auto-Reload Match callback.
 * @note   This function is called by the HAL driver on a counter wraparound.
 * It then calls the registered application-level callback.
 */
static void LPTIM1_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    if (App_ReloadCallback != NULL)
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <LPTIM1_AutoReloadMatchCallback+0x20>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <LPTIM1_AutoReloadMatchCallback+0x16>
    {
        App_ReloadCallback();
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <LPTIM1_AutoReloadMatchCallback+0x20>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4798      	blx	r3
    }
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	20000200 	.word	0x20000200

080012a4 <LPTIM1_CounterChangedToUpCallback>:

/**
 * @brief  LPTIM1 Counter direction change to UP callback.
 */
static void LPTIM1_CounterChangedToUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    if (App_DirUpCallback != NULL)
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <LPTIM1_CounterChangedToUpCallback+0x20>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <LPTIM1_CounterChangedToUpCallback+0x16>
    {
        App_DirUpCallback();
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <LPTIM1_CounterChangedToUpCallback+0x20>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4798      	blx	r3
    }
}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	20000204 	.word	0x20000204

080012c8 <LPTIM1_CounterChangedToDownCallback>:

/**
 * @brief  LPTIM1 Counter direction change to DOWN callback.
 */
static void LPTIM1_CounterChangedToDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    if (App_DirDownCallback != NULL)
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <LPTIM1_CounterChangedToDownCallback+0x20>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <LPTIM1_CounterChangedToDownCallback+0x16>
    {
        App_DirDownCallback();
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <LPTIM1_CounterChangedToDownCallback+0x20>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4798      	blx	r3
    }
}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000208 	.word	0x20000208

080012ec <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	0002      	movs	r2, r0
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led != LED4)
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <BSP_LED_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001304:	2302      	movs	r3, #2
 8001306:	425b      	negs	r3, r3
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
 800130a:	e023      	b.n	8001354 <BSP_LED_Init+0x68>
  }
  else
  {
    LED4_GPIO_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <BSP_LED_Init+0x74>)
 800130e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <BSP_LED_Init+0x74>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <BSP_LED_Init+0x74>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001324:	2320      	movs	r3, #32
 8001326:	001a      	movs	r2, r3
 8001328:	2110      	movs	r1, #16
 800132a:	187b      	adds	r3, r7, r1
 800132c:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2201      	movs	r2, #1
 8001332:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2203      	movs	r2, #3
 800133e:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <BSP_LED_Init+0x78>)
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	58d3      	ldr	r3, [r2, r3]
 800134a:	187a      	adds	r2, r7, r1
 800134c:	0011      	movs	r1, r2
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fb0a 	bl	8001968 <HAL_GPIO_Init>
  }
  return ret;
 8001354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b00a      	add	sp, #40	@ 0x28
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	40021000 	.word	0x40021000
 8001364:	20000000 	.word	0x20000000

08001368 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]

  if (Led != LED4)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <BSP_LED_On+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001380:	2302      	movs	r3, #2
 8001382:	425b      	negs	r3, r3
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e009      	b.n	800139c <BSP_LED_On+0x34>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <BSP_LED_On+0x40>)
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	58d3      	ldr	r3, [r2, r3]
 8001392:	2120      	movs	r1, #32
 8001394:	2201      	movs	r2, #1
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fc52 	bl	8001c40 <HAL_GPIO_WritePin>
  }

  return ret;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	20000000 	.word	0x20000000

080013ac <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	0002      	movs	r2, r0
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]

  if (Led != LED4)
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <BSP_LED_Off+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013c4:	2302      	movs	r3, #2
 80013c6:	425b      	negs	r3, r3
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e009      	b.n	80013e0 <BSP_LED_Off+0x34>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <BSP_LED_Off+0x40>)
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	2120      	movs	r1, #32
 80013d8:	2200      	movs	r2, #0
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fc30 	bl	8001c40 <HAL_GPIO_WritePin>
  }

  return ret;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	20000000 	.word	0x20000000

080013f0 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0002      	movs	r2, r0
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]

  if (Led != LED4)
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <BSP_LED_Toggle+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001408:	2302      	movs	r3, #2
 800140a:	425b      	negs	r3, r3
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e009      	b.n	8001424 <BSP_LED_Toggle+0x34>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <BSP_LED_Toggle+0x40>)
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	58d3      	ldr	r3, [r2, r3]
 800141a:	2220      	movs	r2, #32
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fc2b 	bl	8001c7a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001424:	68fb      	ldr	r3, [r7, #12]
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	20000000 	.word	0x20000000

08001434 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	0002      	movs	r2, r0
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	1dbb      	adds	r3, r7, #6
 8001442:	1c0a      	adds	r2, r1, #0
 8001444:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <BSP_PB_Init+0xec>)
 8001448:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <BSP_PB_Init+0xec>)
 800144c:	2104      	movs	r1, #4
 800144e:	430a      	orrs	r2, r1
 8001450:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <BSP_PB_Init+0xec>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	2204      	movs	r2, #4
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin   = BUTTON_PIN [Button];
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	001a      	movs	r2, r3
 8001464:	210c      	movs	r1, #12
 8001466:	187b      	adds	r3, r7, r1
 8001468:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2201      	movs	r2, #1
 800146e:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2202      	movs	r2, #2
 8001474:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10d      	bne.n	800149a <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <BSP_PB_Init+0xf0>)
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	58d3      	ldr	r3, [r2, r3]
 800148e:	187a      	adds	r2, r7, r1
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fa68 	bl	8001968 <HAL_GPIO_Init>
 8001498:	e03d      	b.n	8001516 <BSP_PB_Init+0xe2>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800149a:	210c      	movs	r1, #12
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2284      	movs	r2, #132	@ 0x84
 80014a0:	0392      	lsls	r2, r2, #14
 80014a2:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <BSP_PB_Init+0xf0>)
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	58d3      	ldr	r3, [r2, r3]
 80014ae:	187a      	adds	r2, r7, r1
 80014b0:	0011      	movs	r1, r2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 fa58 	bl	8001968 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	0013      	movs	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	189b      	adds	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <BSP_PB_Init+0xf4>)
 80014c6:	1898      	adds	r0, r3, r2
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <BSP_PB_Init+0xf8>)
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	58d3      	ldr	r3, [r2, r3]
 80014d2:	0019      	movs	r1, r3
 80014d4:	f000 fa35 	bl	8001942 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	0013      	movs	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <BSP_PB_Init+0xf4>)
 80014e6:	1898      	adds	r0, r3, r2
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <BSP_PB_Init+0xfc>)
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	58d3      	ldr	r3, [r2, r3]
 80014f2:	001a      	movs	r2, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	f000 f9f2 	bl	80018de <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014fa:	2007      	movs	r0, #7
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <BSP_PB_Init+0x100>)
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	58d3      	ldr	r3, [r2, r3]
 8001506:	2200      	movs	r2, #0
 8001508:	0019      	movs	r1, r3
 800150a:	f000 f9af 	bl	800186c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800150e:	2307      	movs	r3, #7
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f9c0 	bl	8001896 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b008      	add	sp, #32
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	20000004 	.word	0x20000004
 8001528:	2000020c 	.word	0x2000020c
 800152c:	08005d60 	.word	0x08005d60
 8001530:	20000008 	.word	0x20000008
 8001534:	2000000c 	.word	0x2000000c

08001538 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001544:	46c0      	nop			@ (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}

0800154c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff fff1 	bl	8001538 <BSP_PB_Callback>
}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <SystemInit+0x50>)
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	0512      	lsls	r2, r2, #20
 8001568:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800156a:	4a11      	ldr	r2, [pc, #68]	@ (80015b0 <SystemInit+0x54>)
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	58d3      	ldr	r3, [r2, r3]
 8001570:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <SystemInit+0x54>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	4013      	ands	r3, r2
 8001580:	d010      	beq.n	80015a4 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	22ff      	movs	r2, #255	@ 0xff
 8001586:	4013      	ands	r3, r2
 8001588:	2bcc      	cmp	r3, #204	@ 0xcc
 800158a:	d00b      	beq.n	80015a4 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	22ff      	movs	r2, #255	@ 0xff
 8001590:	4013      	ands	r3, r2
 8001592:	2baa      	cmp	r3, #170	@ 0xaa
 8001594:	d006      	beq.n	80015a4 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x54>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <SystemInit+0x54>)
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	02c9      	lsls	r1, r1, #11
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 f80f 	bl	80015e4 <HAL_InitTick>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e001      	b.n	80015d6 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d2:	f7ff faab 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015ec:	230f      	movs	r3, #15
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0U)
 80015f4:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <HAL_InitTick+0x88>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d02b      	beq.n	8001654 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <HAL_InitTick+0x8c>)
 80015fe:	681c      	ldr	r4, [r3, #0]
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_InitTick+0x88>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	0019      	movs	r1, r3
 8001606:	23fa      	movs	r3, #250	@ 0xfa
 8001608:	0098      	lsls	r0, r3, #2
 800160a:	f7fe fd8f 	bl	800012c <__udivsi3>
 800160e:	0003      	movs	r3, r0
 8001610:	0019      	movs	r1, r3
 8001612:	0020      	movs	r0, r4
 8001614:	f7fe fd8a 	bl	800012c <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	0018      	movs	r0, r3
 800161c:	f000 f94b 	bl	80018b6 <HAL_SYSTICK_Config>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d112      	bne.n	800164a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d80a      	bhi.n	8001640 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	2301      	movs	r3, #1
 800162e:	425b      	negs	r3, r3
 8001630:	2200      	movs	r2, #0
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f91a 	bl	800186c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_InitTick+0x90>)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00d      	b.n	800165c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001640:	230f      	movs	r3, #15
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e008      	b.n	800165c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800164a:	230f      	movs	r3, #15
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e003      	b.n	800165c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001654:	230f      	movs	r3, #15
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	781b      	ldrb	r3, [r3, #0]
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b005      	add	sp, #20
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	20000018 	.word	0x20000018
 8001670:	20000010 	.word	0x20000010
 8001674:	20000014 	.word	0x20000014

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_IncTick+0x1c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	001a      	movs	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_IncTick+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	18d2      	adds	r2, r2, r3
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <HAL_IncTick+0x20>)
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	20000018 	.word	0x20000018
 8001698:	20000218 	.word	0x20000218

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b02      	ldr	r3, [pc, #8]	@ (80016ac <HAL_GetTick+0x10>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	20000218 	.word	0x20000218

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff fff0 	bl	800169c <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_Delay+0x44>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	001a      	movs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	189b      	adds	r3, r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	f7ff ffe0 	bl	800169c <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b004      	add	sp, #16
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	20000018 	.word	0x20000018

080016f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80016fc:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <HAL_SuspendTick+0x18>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_SuspendTick+0x18>)
 8001702:	2102      	movs	r1, #2
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	e000e010 	.word	0xe000e010

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	0002      	movs	r2, r0
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b7f      	cmp	r3, #127	@ 0x7f
 8001726:	d809      	bhi.n	800173c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	001a      	movs	r2, r3
 800172e:	231f      	movs	r3, #31
 8001730:	401a      	ands	r2, r3
 8001732:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <__NVIC_EnableIRQ+0x30>)
 8001734:	2101      	movs	r1, #1
 8001736:	4091      	lsls	r1, r2
 8001738:	000a      	movs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	0002      	movs	r2, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b7f      	cmp	r3, #127	@ 0x7f
 800175c:	d828      	bhi.n	80017b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800175e:	4a2f      	ldr	r2, [pc, #188]	@ (800181c <__NVIC_SetPriority+0xd4>)
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	33c0      	adds	r3, #192	@ 0xc0
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	589b      	ldr	r3, [r3, r2]
 800176e:	1dfa      	adds	r2, r7, #7
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	0011      	movs	r1, r2
 8001774:	2203      	movs	r2, #3
 8001776:	400a      	ands	r2, r1
 8001778:	00d2      	lsls	r2, r2, #3
 800177a:	21ff      	movs	r1, #255	@ 0xff
 800177c:	4091      	lsls	r1, r2
 800177e:	000a      	movs	r2, r1
 8001780:	43d2      	mvns	r2, r2
 8001782:	401a      	ands	r2, r3
 8001784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	22ff      	movs	r2, #255	@ 0xff
 800178c:	401a      	ands	r2, r3
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	0018      	movs	r0, r3
 8001794:	2303      	movs	r3, #3
 8001796:	4003      	ands	r3, r0
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179c:	481f      	ldr	r0, [pc, #124]	@ (800181c <__NVIC_SetPriority+0xd4>)
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	430a      	orrs	r2, r1
 80017a8:	33c0      	adds	r3, #192	@ 0xc0
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017ae:	e031      	b.n	8001814 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <__NVIC_SetPriority+0xd8>)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	0019      	movs	r1, r3
 80017b8:	230f      	movs	r3, #15
 80017ba:	400b      	ands	r3, r1
 80017bc:	3b08      	subs	r3, #8
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3306      	adds	r3, #6
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	18d3      	adds	r3, r2, r3
 80017c6:	3304      	adds	r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1dfa      	adds	r2, r7, #7
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	0011      	movs	r1, r2
 80017d0:	2203      	movs	r2, #3
 80017d2:	400a      	ands	r2, r1
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	21ff      	movs	r1, #255	@ 0xff
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	43d2      	mvns	r2, r2
 80017de:	401a      	ands	r2, r3
 80017e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	22ff      	movs	r2, #255	@ 0xff
 80017e8:	401a      	ands	r2, r3
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	0018      	movs	r0, r3
 80017f0:	2303      	movs	r3, #3
 80017f2:	4003      	ands	r3, r0
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f8:	4809      	ldr	r0, [pc, #36]	@ (8001820 <__NVIC_SetPriority+0xd8>)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	001c      	movs	r4, r3
 8001800:	230f      	movs	r3, #15
 8001802:	4023      	ands	r3, r4
 8001804:	3b08      	subs	r3, #8
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	430a      	orrs	r2, r1
 800180a:	3306      	adds	r3, #6
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	18c3      	adds	r3, r0, r3
 8001810:	3304      	adds	r3, #4
 8001812:	601a      	str	r2, [r3, #0]
}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b003      	add	sp, #12
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	1e5a      	subs	r2, r3, #1
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	045b      	lsls	r3, r3, #17
 8001834:	429a      	cmp	r2, r3
 8001836:	d301      	bcc.n	800183c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001838:	2301      	movs	r3, #1
 800183a:	e010      	b.n	800185e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <SysTick_Config+0x44>)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	3a01      	subs	r2, #1
 8001842:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001844:	2301      	movs	r3, #1
 8001846:	425b      	negs	r3, r3
 8001848:	2103      	movs	r1, #3
 800184a:	0018      	movs	r0, r3
 800184c:	f7ff ff7c 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <SysTick_Config+0x44>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <SysTick_Config+0x44>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	210f      	movs	r1, #15
 8001878:	187b      	adds	r3, r7, r1
 800187a:	1c02      	adds	r2, r0, #0
 800187c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	187b      	adds	r3, r7, r1
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	0011      	movs	r1, r2
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	0002      	movs	r2, r0
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff ff33 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ffaf 	bl	8001824 <SysTick_Config>
 80018c6:	0003      	movs	r3, r0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80018d4:	f7ff f8c2 	bl	8000a5c <HAL_SYSTICK_Callback>
}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	200b      	movs	r0, #11
 80018ea:	183b      	adds	r3, r7, r0
 80018ec:	1c0a      	adds	r2, r1, #0
 80018ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2317      	movs	r3, #23
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d010      	beq.n	8001922 <HAL_EXTI_RegisterCallback+0x44>
 8001900:	dc13      	bgt.n	800192a <HAL_EXTI_RegisterCallback+0x4c>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_EXTI_RegisterCallback+0x2e>
 8001906:	2b01      	cmp	r3, #1
 8001908:	d007      	beq.n	800191a <HAL_EXTI_RegisterCallback+0x3c>
 800190a:	e00e      	b.n	800192a <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
      break;
 8001918:	e00c      	b.n	8001934 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	605a      	str	r2, [r3, #4]
      break;
 8001920:	e008      	b.n	8001934 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
      break;
 8001928:	e004      	b.n	8001934 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 800192a:	2317      	movs	r3, #23
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001934:	2317      	movs	r3, #23
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b006      	add	sp, #24
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e003      	b.n	800195e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
  }
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e14d      	b.n	8001c14 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4091      	lsls	r1, r2
 8001982:	000a      	movs	r2, r1
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <HAL_GPIO_Init+0x28>
 800198e:	e13e      	b.n	8001c0e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	4013      	ands	r3, r2
 8001998:	2b01      	cmp	r3, #1
 800199a:	d005      	beq.n	80019a8 <HAL_GPIO_Init+0x40>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d130      	bne.n	8001a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	2201      	movs	r2, #1
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d017      	beq.n	8001a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d123      	bne.n	8001a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	58d3      	ldr	r3, [r2, r3]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	400b      	ands	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	23c0      	movs	r3, #192	@ 0xc0
 8001ad4:	029b      	lsls	r3, r3, #10
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d100      	bne.n	8001adc <HAL_GPIO_Init+0x174>
 8001ada:	e098      	b.n	8001c0e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001adc:	4a53      	ldr	r2, [pc, #332]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	589b      	ldr	r3, [r3, r2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4013      	ands	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	220f      	movs	r2, #15
 8001af4:	409a      	lsls	r2, r3
 8001af6:	0013      	movs	r3, r2
 8001af8:	43da      	mvns	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	23a0      	movs	r3, #160	@ 0xa0
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x1d6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a48      	ldr	r2, [pc, #288]	@ (8001c30 <HAL_GPIO_Init+0x2c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x1d2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a47      	ldr	r2, [pc, #284]	@ (8001c34 <HAL_GPIO_Init+0x2cc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x1ce>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a46      	ldr	r2, [pc, #280]	@ (8001c38 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x1ca>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a45      	ldr	r2, [pc, #276]	@ (8001c3c <HAL_GPIO_Init+0x2d4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x1c6>
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	e008      	b.n	8001b40 <HAL_GPIO_Init+0x1d8>
 8001b2e:	2306      	movs	r3, #6
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x1d8>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e004      	b.n	8001b40 <HAL_GPIO_Init+0x1d8>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x1d8>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x1d8>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	2103      	movs	r1, #3
 8001b44:	400a      	ands	r2, r1
 8001b46:	00d2      	lsls	r2, r2, #3
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b50:	4936      	ldr	r1, [pc, #216]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3318      	adds	r3, #24
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5e:	4b33      	ldr	r3, [pc, #204]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	035b      	lsls	r3, r3, #13
 8001b76:	4013      	ands	r3, r2
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43da      	mvns	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	039b      	lsls	r3, r3, #14
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001bb4:	2384      	movs	r3, #132	@ 0x84
 8001bb6:	58d3      	ldr	r3, [r2, r3]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd8:	4914      	ldr	r1, [pc, #80]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001bda:	2284      	movs	r2, #132	@ 0x84
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	58d3      	ldr	r3, [r2, r3]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c06:	4909      	ldr	r1, [pc, #36]	@ (8001c2c <HAL_GPIO_Init+0x2c4>)
 8001c08:	2280      	movs	r2, #128	@ 0x80
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	1e13      	subs	r3, r2, #0
 8001c1e:	d000      	beq.n	8001c22 <HAL_GPIO_Init+0x2ba>
 8001c20:	e6aa      	b.n	8001978 <HAL_GPIO_Init+0x10>
  }
}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b006      	add	sp, #24
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	50000400 	.word	0x50000400
 8001c34:	50000800 	.word	0x50000800
 8001c38:	50000c00 	.word	0x50000c00
 8001c3c:	50001400 	.word	0x50001400

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	0008      	movs	r0, r1
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	1cbb      	adds	r3, r7, #2
 8001c4e:	1c02      	adds	r2, r0, #0
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	1c7b      	adds	r3, r7, #1
 8001c54:	1c0a      	adds	r2, r1, #0
 8001c56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c58:	1c7b      	adds	r3, r7, #1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c60:	1cbb      	adds	r3, r7, #2
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6a:	1cbb      	adds	r3, r7, #2
 8001c6c:	881a      	ldrh	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	000a      	movs	r2, r1
 8001c84:	1cbb      	adds	r3, r7, #2
 8001c86:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c8e:	1cbb      	adds	r3, r7, #2
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	041a      	lsls	r2, r3, #16
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	1cb9      	adds	r1, r7, #2
 8001c9e:	8809      	ldrh	r1, [r1, #0]
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	1dbb      	adds	r3, r7, #6
 8001cba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	1dba      	adds	r2, r7, #6
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d008      	beq.n	8001cda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001cca:	1dba      	adds	r2, r7, #6
 8001ccc:	8812      	ldrh	r2, [r2, #0]
 8001cce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001cd0:	1dbb      	adds	r3, r7, #6
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f815 	bl	8001d04 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	1dba      	adds	r2, r7, #6
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d008      	beq.n	8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ce8:	1dba      	adds	r2, r7, #6
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001cee:	1dbb      	adds	r3, r7, #6
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7fe feca 	bl	8000a8c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001cf8:	46c0      	nop			@ (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021800 	.word	0x40021800

08001d04 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	1dbb      	adds	r3, r7, #6
 8001d0e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e139      	b.n	8001f9e <HAL_LPTIM_Init+0x286>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2252      	movs	r2, #82	@ 0x52
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2251      	movs	r2, #81	@ 0x51
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 fce5 	bl	8002710 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a95      	ldr	r2, [pc, #596]	@ (8001fa8 <HAL_LPTIM_Init+0x290>)
 8001d52:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	0010      	movs	r0, r2
 8001d5c:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2252      	movs	r2, #82	@ 0x52
 8001d62:	2102      	movs	r1, #2
 8001d64:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2280      	movs	r2, #128	@ 0x80
 8001d7c:	0052      	lsls	r2, r2, #1
 8001d7e:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	005a      	lsls	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0011      	movs	r1, r2
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fd10 	bl	80027b8 <LPTIM_WaitForFlag>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d101      	bne.n	8001da2 <HAL_LPTIM_Init+0x8a>
  {
    return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0fd      	b.n	8001f9e <HAL_LPTIM_Init+0x286>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2210      	movs	r2, #16
 8001da8:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a12      	ldr	r2, [r2, #32]
 8001db2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2110      	movs	r1, #16
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 fcfd 	bl	80027b8 <LPTIM_WaitForFlag>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d101      	bne.n	8001dc8 <HAL_LPTIM_Init+0xb0>
  {
    return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0ea      	b.n	8001f9e <HAL_LPTIM_Init+0x286>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a77      	ldr	r2, [pc, #476]	@ (8001fac <HAL_LPTIM_Init+0x294>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d004      	beq.n	8001ddc <HAL_LPTIM_Init+0xc4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a76      	ldr	r2, [pc, #472]	@ (8001fb0 <HAL_LPTIM_Init+0x298>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_LPTIM_Init+0xc8>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_LPTIM_Init+0xca>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d122      	bne.n	8001e2c <HAL_LPTIM_Init+0x114>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d149      	bne.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d142      	bne.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	2202      	movs	r2, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d13c      	bne.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d135      	bne.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	438a      	bics	r2, r1
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	e02c      	b.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5e      	ldr	r2, [pc, #376]	@ (8001fac <HAL_LPTIM_Init+0x294>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d004      	beq.n	8001e40 <HAL_LPTIM_Init+0x128>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb0 <HAL_LPTIM_Init+0x298>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_LPTIM_Init+0x12c>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_LPTIM_Init+0x12e>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d115      	bne.n	8001e76 <HAL_LPTIM_Init+0x15e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d117      	bne.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	d110      	bne.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	e007      	b.n	8001e86 <HAL_LPTIM_Init+0x16e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	438a      	bics	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_LPTIM_Init+0x18a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d103      	bne.n	8001eaa <HAL_LPTIM_Init+0x192>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	221e      	movs	r2, #30
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a41      	ldr	r2, [pc, #260]	@ (8001fb4 <HAL_LPTIM_Init+0x29c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <HAL_LPTIM_Init+0x1a4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a40      	ldr	r2, [pc, #256]	@ (8001fb8 <HAL_LPTIM_Init+0x2a0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8001fbc <HAL_LPTIM_Init+0x2a4>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001ecc:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8001ed2:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001ed8:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_LPTIM_Init+0x1e0>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d005      	beq.n	8001f0c <HAL_LPTIM_Init+0x1f4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d107      	bne.n	8001f1c <HAL_LPTIM_Init+0x204>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <HAL_LPTIM_Init+0x29c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00a      	beq.n	8001f3c <HAL_LPTIM_Init+0x224>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f2e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001f34:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
#if defined(LPTIM3)
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
#else
  if (hlptim->Instance == LPTIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_LPTIM_Init+0x294>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <HAL_LPTIM_Init+0x248>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f5e:	e009      	b.n	8001f74 <HAL_LPTIM_Init+0x25c>
  }
  else
  {
    if (hlptim->Instance == LPTIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <HAL_LPTIM_Init+0x298>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d104      	bne.n	8001f74 <HAL_LPTIM_Init+0x25c>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2253      	movs	r2, #83	@ 0x53
 8001f78:	2101      	movs	r1, #1
 8001f7a:	5499      	strb	r1, [r3, r2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2254      	movs	r2, #84	@ 0x54
 8001f80:	2101      	movs	r1, #1
 8001f82:	5499      	strb	r1, [r3, r2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2255      	movs	r2, #85	@ 0x55
 8001f88:	2101      	movs	r1, #1
 8001f8a:	5499      	strb	r1, [r3, r2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2256      	movs	r2, #86	@ 0x56
 8001f90:	2101      	movs	r1, #1
 8001f92:	5499      	strb	r1, [r3, r2]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2252      	movs	r2, #82	@ 0x52
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	08000b75 	.word	0x08000b75
 8001fac:	40007c00 	.word	0x40007c00
 8001fb0:	40009400 	.word	0x40009400
 8001fb4:	0000ffff 	.word	0x0000ffff
 8001fb8:	ffff1f3f 	.word	0xffff1f3f
 8001fbc:	ff39f1fe 	.word	0xff39f1fe

08001fc0 <HAL_LPTIM_Counter_Start_IT>:
  * @brief  Start the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2252      	movs	r2, #82	@ 0x52
 8001fcc:	2102      	movs	r1, #2
 8001fce:	5499      	strb	r1, [r3, r2]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d107      	bne.n	8001ff4 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	491b      	ldr	r1, [pc, #108]	@ (800205c <HAL_LPTIM_Counter_Start_IT+0x9c>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	430a      	orrs	r2, r1
 8002002:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	0452      	lsls	r2, r2, #17
 800200c:	605a      	str	r2, [r3, #4]

  /* Enable interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK | LPTIM_IT_UPDATE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	21c9      	movs	r1, #201	@ 0xc9
 800201a:	0049      	lsls	r1, r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	045a      	lsls	r2, r3, #17
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0011      	movs	r1, r2
 8002028:	0018      	movs	r0, r3
 800202a:	f000 fbc5 	bl	80027b8 <LPTIM_WaitForFlag>
 800202e:	0003      	movs	r3, r0
 8002030:	2b03      	cmp	r3, #3
 8002032:	d101      	bne.n	8002038 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e00c      	b.n	8002052 <HAL_LPTIM_Counter_Start_IT+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2104      	movs	r1, #4
 8002044:	430a      	orrs	r2, r1
 8002046:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2252      	movs	r2, #82	@ 0x52
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	fffff1ff 	.word	0xfffff1ff

08002060 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	2b01      	cmp	r3, #1
 8002074:	d124      	bne.n	80020c0 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11d      	bne.n	80020c0 <HAL_LPTIM_IRQHandler+0x60>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2238      	movs	r2, #56	@ 0x38
 8002090:	2101      	movs	r1, #1
 8002092:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d006      	beq.n	80020ae <HAL_LPTIM_IRQHandler+0x4e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	228c      	movs	r2, #140	@ 0x8c
 80020a4:	589b      	ldr	r3, [r3, r2]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	0010      	movs	r0, r2
 80020aa:	4798      	blx	r3
 80020ac:	e004      	b.n	80020b8 <HAL_LPTIM_IRQHandler+0x58>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	0010      	movs	r0, r2
 80020b6:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2238      	movs	r2, #56	@ 0x38
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	401a      	ands	r2, r3
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d129      	bne.n	8002128 <HAL_LPTIM_IRQHandler+0xc8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	401a      	ands	r2, r3
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d11f      	bne.n	8002128 <HAL_LPTIM_IRQHandler+0xc8>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2238      	movs	r2, #56	@ 0x38
 80020f6:	2102      	movs	r1, #2
 80020f8:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	4013      	ands	r3, r2
 8002106:	d006      	beq.n	8002116 <HAL_LPTIM_IRQHandler+0xb6>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	228c      	movs	r2, #140	@ 0x8c
 800210c:	589b      	ldr	r3, [r3, r2]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	0010      	movs	r0, r2
 8002112:	4798      	blx	r3
 8002114:	e004      	b.n	8002120 <HAL_LPTIM_IRQHandler+0xc0>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	0010      	movs	r0, r2
 800211e:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2238      	movs	r2, #56	@ 0x38
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	401a      	ands	r2, r3
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	429a      	cmp	r2, r3
 800213a:	d128      	bne.n	800218e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	401a      	ands	r2, r3
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	429a      	cmp	r2, r3
 800214e:	d11e      	bne.n	800218e <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2280      	movs	r2, #128	@ 0x80
 8002156:	00d2      	lsls	r2, r2, #3
 8002158:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2238      	movs	r2, #56	@ 0x38
 800215e:	2104      	movs	r1, #4
 8002160:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d006      	beq.n	800217c <HAL_LPTIM_IRQHandler+0x11c>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	228c      	movs	r2, #140	@ 0x8c
 8002172:	589b      	ldr	r3, [r3, r2]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	0010      	movs	r0, r2
 8002178:	4798      	blx	r3
 800217a:	e004      	b.n	8002186 <HAL_LPTIM_IRQHandler+0x126>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	0010      	movs	r0, r2
 8002184:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2238      	movs	r2, #56	@ 0x38
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	401a      	ands	r2, r3
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	429a      	cmp	r2, r3
 80021a0:	d129      	bne.n	80021f6 <HAL_LPTIM_IRQHandler+0x196>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	401a      	ands	r2, r3
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11f      	bne.n	80021f6 <HAL_LPTIM_IRQHandler+0x196>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2238      	movs	r2, #56	@ 0x38
 80021c4:	2108      	movs	r1, #8
 80021c6:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	4013      	ands	r3, r2
 80021d4:	d006      	beq.n	80021e4 <HAL_LPTIM_IRQHandler+0x184>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	228c      	movs	r2, #140	@ 0x8c
 80021da:	589b      	ldr	r3, [r3, r2]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	0010      	movs	r0, r2
 80021e0:	4798      	blx	r3
 80021e2:	e004      	b.n	80021ee <HAL_LPTIM_IRQHandler+0x18e>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	0010      	movs	r0, r2
 80021ec:	4798      	blx	r3
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2238      	movs	r2, #56	@ 0x38
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	015b      	lsls	r3, r3, #5
 8002200:	401a      	ands	r2, r3
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	015b      	lsls	r3, r3, #5
 8002206:	429a      	cmp	r2, r3
 8002208:	d11c      	bne.n	8002244 <HAL_LPTIM_IRQHandler+0x1e4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	401a      	ands	r2, r3
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	429a      	cmp	r2, r3
 800221c:	d112      	bne.n	8002244 <HAL_LPTIM_IRQHandler+0x1e4>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2280      	movs	r2, #128	@ 0x80
 8002224:	0152      	lsls	r2, r2, #5
 8002226:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2238      	movs	r2, #56	@ 0x38
 800222c:	2101      	movs	r1, #1
 800222e:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2294      	movs	r2, #148	@ 0x94
 8002234:	589b      	ldr	r3, [r3, r2]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	0010      	movs	r0, r2
 800223a:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2238      	movs	r2, #56	@ 0x38
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	401a      	ands	r2, r3
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	019b      	lsls	r3, r3, #6
 8002254:	429a      	cmp	r2, r3
 8002256:	d11c      	bne.n	8002292 <HAL_LPTIM_IRQHandler+0x232>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	401a      	ands	r2, r3
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	429a      	cmp	r2, r3
 800226a:	d112      	bne.n	8002292 <HAL_LPTIM_IRQHandler+0x232>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2280      	movs	r2, #128	@ 0x80
 8002272:	0192      	lsls	r2, r2, #6
 8002274:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2238      	movs	r2, #56	@ 0x38
 800227a:	2102      	movs	r1, #2
 800227c:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2294      	movs	r2, #148	@ 0x94
 8002282:	589b      	ldr	r3, [r3, r2]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	0010      	movs	r0, r2
 8002288:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2238      	movs	r2, #56	@ 0x38
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	01db      	lsls	r3, r3, #7
 800229c:	401a      	ands	r2, r3
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	01db      	lsls	r3, r3, #7
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11c      	bne.n	80022e0 <HAL_LPTIM_IRQHandler+0x280>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	01db      	lsls	r3, r3, #7
 80022b0:	401a      	ands	r2, r3
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	01db      	lsls	r3, r3, #7
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d112      	bne.n	80022e0 <HAL_LPTIM_IRQHandler+0x280>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	01d2      	lsls	r2, r2, #7
 80022c2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2238      	movs	r2, #56	@ 0x38
 80022c8:	2104      	movs	r1, #4
 80022ca:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2294      	movs	r2, #148	@ 0x94
 80022d0:	589b      	ldr	r3, [r3, r2]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	0010      	movs	r0, r2
 80022d6:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2238      	movs	r2, #56	@ 0x38
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	401a      	ands	r2, r3
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d11c      	bne.n	800232e <HAL_LPTIM_IRQHandler+0x2ce>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	401a      	ands	r2, r3
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	429a      	cmp	r2, r3
 8002306:	d112      	bne.n	800232e <HAL_LPTIM_IRQHandler+0x2ce>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	0212      	lsls	r2, r2, #8
 8002310:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2238      	movs	r2, #56	@ 0x38
 8002316:	2108      	movs	r1, #8
 8002318:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2294      	movs	r2, #148	@ 0x94
 800231e:	589b      	ldr	r3, [r3, r2]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	0010      	movs	r0, r2
 8002324:	4798      	blx	r3
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2238      	movs	r2, #56	@ 0x38
 800232a:	2100      	movs	r1, #0
 800232c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d10f      	bne.n	800235c <HAL_LPTIM_IRQHandler+0x2fc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d108      	bne.n	800235c <HAL_LPTIM_IRQHandler+0x2fc>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2202      	movs	r2, #2
 8002350:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	0010      	movs	r0, r2
 800235a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
 8002366:	2b04      	cmp	r3, #4
 8002368:	d10f      	bne.n	800238a <HAL_LPTIM_IRQHandler+0x32a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2204      	movs	r2, #4
 8002372:	4013      	ands	r3, r2
 8002374:	2b04      	cmp	r3, #4
 8002376:	d108      	bne.n	800238a <HAL_LPTIM_IRQHandler+0x32a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	0010      	movs	r0, r2
 8002388:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2208      	movs	r2, #8
 8002392:	4013      	ands	r3, r2
 8002394:	2b08      	cmp	r3, #8
 8002396:	d113      	bne.n	80023c0 <HAL_LPTIM_IRQHandler+0x360>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2208      	movs	r2, #8
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d10c      	bne.n	80023c0 <HAL_LPTIM_IRQHandler+0x360>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2208      	movs	r2, #8
 80023ac:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2238      	movs	r2, #56	@ 0x38
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	0010      	movs	r0, r2
 80023be:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	031b      	lsls	r3, r3, #12
 80023ca:	401a      	ands	r2, r3
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	031b      	lsls	r3, r3, #12
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d117      	bne.n	8002404 <HAL_LPTIM_IRQHandler+0x3a4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	2380      	movs	r3, #128	@ 0x80
 80023dc:	031b      	lsls	r3, r3, #12
 80023de:	401a      	ands	r2, r3
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	031b      	lsls	r3, r3, #12
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10d      	bne.n	8002404 <HAL_LPTIM_IRQHandler+0x3a4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2280      	movs	r2, #128	@ 0x80
 80023ee:	0312      	lsls	r2, r2, #12
 80023f0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2238      	movs	r2, #56	@ 0x38
 80023f6:	2102      	movs	r1, #2
 80023f8:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	0010      	movs	r0, r2
 8002402:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	2b10      	cmp	r3, #16
 8002410:	d10f      	bne.n	8002432 <HAL_LPTIM_IRQHandler+0x3d2>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	2b10      	cmp	r3, #16
 800241e:	d108      	bne.n	8002432 <HAL_LPTIM_IRQHandler+0x3d2>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	0010      	movs	r0, r2
 8002430:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2220      	movs	r2, #32
 800243a:	4013      	ands	r3, r2
 800243c:	2b20      	cmp	r3, #32
 800243e:	d10f      	bne.n	8002460 <HAL_LPTIM_IRQHandler+0x400>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2220      	movs	r2, #32
 8002448:	4013      	ands	r3, r2
 800244a:	2b20      	cmp	r3, #32
 800244c:	d108      	bne.n	8002460 <HAL_LPTIM_IRQHandler+0x400>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2220      	movs	r2, #32
 8002454:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	0010      	movs	r0, r2
 800245e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2240      	movs	r2, #64	@ 0x40
 8002468:	4013      	ands	r3, r2
 800246a:	2b40      	cmp	r3, #64	@ 0x40
 800246c:	d10f      	bne.n	800248e <HAL_LPTIM_IRQHandler+0x42e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2240      	movs	r2, #64	@ 0x40
 8002476:	4013      	ands	r3, r2
 8002478:	2b40      	cmp	r3, #64	@ 0x40
 800247a:	d108      	bne.n	800248e <HAL_LPTIM_IRQHandler+0x42e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2240      	movs	r2, #64	@ 0x40
 8002482:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	0010      	movs	r0, r2
 800248c:	4798      	blx	r3
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	4013      	ands	r3, r2
 8002498:	2b80      	cmp	r3, #128	@ 0x80
 800249a:	d10f      	bne.n	80024bc <HAL_LPTIM_IRQHandler+0x45c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b80      	cmp	r3, #128	@ 0x80
 80024a8:	d108      	bne.n	80024bc <HAL_LPTIM_IRQHandler+0x45c>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	0010      	movs	r0, r2
 80024ba:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	401a      	ands	r2, r3
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d114      	bne.n	80024fa <HAL_LPTIM_IRQHandler+0x49a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	401a      	ands	r2, r3
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10a      	bne.n	80024fa <HAL_LPTIM_IRQHandler+0x49a>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2280      	movs	r2, #128	@ 0x80
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	589b      	ldr	r3, [r3, r2]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	0010      	movs	r0, r2
 80024f8:	4798      	blx	r3
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_LPTIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  hlptim LPTIM IC handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_LPTIM_UpdateEventHalfCpltCallback>:
  * @brief  Update event half complete callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventHalfCpltCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventHalfCpltCallback could be implemented in the user file
   */
}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_LPTIM_ErrorCallback>:
  * @brief  Error callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_ErrorCallback(LPTIM_HandleTypeDef *hlptim)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_ErrorCallback could be implemented in the user file
   */
}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	230b      	movs	r3, #11
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	1c0a      	adds	r2, r1, #0
 80025f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2317      	movs	r3, #23
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e07c      	b.n	8002702 <HAL_LPTIM_RegisterCallback+0x11e>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2252      	movs	r2, #82	@ 0x52
 800260c:	5c9b      	ldrb	r3, [r3, r2]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d154      	bne.n	80026be <HAL_LPTIM_RegisterCallback+0xda>
  {
    switch (CallbackID)
 8002614:	230b      	movs	r3, #11
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	d84a      	bhi.n	80026b4 <HAL_LPTIM_RegisterCallback+0xd0>
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <HAL_LPTIM_RegisterCallback+0x128>)
 8002622:	18d3      	adds	r3, r2, r3
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800262e:	e065      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8002636:	e061      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800263e:	e05d      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8002646:	e059      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800264e:	e055      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8002656:	e051      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800265e:	e04d      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8002666:	e049      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800266e:	e045      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_UPDATE_EVENT_CB_ID :
        hlptim->UpdateEventCallback = pCallback;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8002676:	e041      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_REP_COUNTER_WRITE_CB_ID :
        hlptim->RepCounterWriteCallback = pCallback;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	505a      	str	r2, [r3, r1]
        break;
 8002680:	e03c      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_UPDATE_EVENT_HALF_CB_ID :
        hlptim->UpdateEventHalfCpltCallback = pCallback;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2184      	movs	r1, #132	@ 0x84
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	505a      	str	r2, [r3, r1]
        break;
 800268a:	e037      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_ERROR_CB_ID :
        hlptim->ErrorCallback = pCallback;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2188      	movs	r1, #136	@ 0x88
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	505a      	str	r2, [r3, r1]
        break;
 8002694:	e032      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_IC_CAPTURE_CB_ID :
        hlptim->IC_CaptureCallback = pCallback;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	218c      	movs	r1, #140	@ 0x8c
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	505a      	str	r2, [r3, r1]
        break;
 800269e:	e02d      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_IC_CAPTURE_HALF_CB_ID :
        hlptim->IC_CaptureHalfCpltCallback = pCallback;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2190      	movs	r1, #144	@ 0x90
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	505a      	str	r2, [r3, r1]
        break;
 80026a8:	e028      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_OVER_CAPTURE_CB_ID :
        hlptim->IC_OverCaptureCallback = pCallback;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2194      	movs	r1, #148	@ 0x94
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	505a      	str	r2, [r3, r1]
        break;
 80026b2:	e023      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80026b4:	2317      	movs	r3, #23
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
        break;
 80026bc:	e01e      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2252      	movs	r2, #82	@ 0x52
 80026c2:	5c9b      	ldrb	r3, [r3, r2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d114      	bne.n	80026f4 <HAL_LPTIM_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80026ca:	230b      	movs	r3, #11
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_LPTIM_RegisterCallback+0xf6>
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d004      	beq.n	80026e2 <HAL_LPTIM_RegisterCallback+0xfe>
 80026d8:	e007      	b.n	80026ea <HAL_LPTIM_RegisterCallback+0x106>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80026e0:	e00c      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80026e8:	e008      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80026ea:	2317      	movs	r3, #23
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
        break;
 80026f2:	e003      	b.n	80026fc <HAL_LPTIM_RegisterCallback+0x118>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80026f4:	2317      	movs	r3, #23
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80026fc:	2317      	movs	r3, #23
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b006      	add	sp, #24
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	08005dac 	.word	0x08005dac

08002710 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <LPTIM_ResetCallback+0x70>)
 800271c:	661a      	str	r2, [r3, #96]	@ 0x60
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <LPTIM_ResetCallback+0x74>)
 8002722:	665a      	str	r2, [r3, #100]	@ 0x64
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <LPTIM_ResetCallback+0x78>)
 8002728:	669a      	str	r2, [r3, #104]	@ 0x68
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <LPTIM_ResetCallback+0x7c>)
 800272e:	66da      	str	r2, [r3, #108]	@ 0x6c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <LPTIM_ResetCallback+0x80>)
 8002734:	671a      	str	r2, [r3, #112]	@ 0x70
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <LPTIM_ResetCallback+0x84>)
 800273a:	675a      	str	r2, [r3, #116]	@ 0x74
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a16      	ldr	r2, [pc, #88]	@ (8002798 <LPTIM_ResetCallback+0x88>)
 8002740:	679a      	str	r2, [r3, #120]	@ 0x78
  lptim->UpdateEventCallback = HAL_LPTIM_UpdateEventCallback;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a15      	ldr	r2, [pc, #84]	@ (800279c <LPTIM_ResetCallback+0x8c>)
 8002746:	67da      	str	r2, [r3, #124]	@ 0x7c
  lptim->RepCounterWriteCallback = HAL_LPTIM_RepCounterWriteCallback;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2180      	movs	r1, #128	@ 0x80
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <LPTIM_ResetCallback+0x90>)
 800274e:	505a      	str	r2, [r3, r1]
  lptim->UpdateEventHalfCpltCallback = HAL_LPTIM_UpdateEventHalfCpltCallback;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2184      	movs	r1, #132	@ 0x84
 8002754:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <LPTIM_ResetCallback+0x94>)
 8002756:	505a      	str	r2, [r3, r1]
  lptim->IC_CaptureCallback      = HAL_LPTIM_IC_CaptureCallback;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	218c      	movs	r1, #140	@ 0x8c
 800275c:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <LPTIM_ResetCallback+0x98>)
 800275e:	505a      	str	r2, [r3, r1]
  lptim->IC_CaptureHalfCpltCallback = HAL_LPTIM_IC_CaptureHalfCpltCallback;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2190      	movs	r1, #144	@ 0x90
 8002764:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <LPTIM_ResetCallback+0x9c>)
 8002766:	505a      	str	r2, [r3, r1]
  lptim->IC_OverCaptureCallback  = HAL_LPTIM_IC_OverCaptureCallback;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2194      	movs	r1, #148	@ 0x94
 800276c:	4a10      	ldr	r2, [pc, #64]	@ (80027b0 <LPTIM_ResetCallback+0xa0>)
 800276e:	505a      	str	r2, [r3, r1]
  lptim->ErrorCallback           = HAL_LPTIM_ErrorCallback;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2188      	movs	r1, #136	@ 0x88
 8002774:	4a0f      	ldr	r2, [pc, #60]	@ (80027b4 <LPTIM_ResetCallback+0xa4>)
 8002776:	505a      	str	r2, [r3, r1]
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08002503 	.word	0x08002503
 8002784:	08002513 	.word	0x08002513
 8002788:	08002523 	.word	0x08002523
 800278c:	08002533 	.word	0x08002533
 8002790:	08002543 	.word	0x08002543
 8002794:	08002553 	.word	0x08002553
 8002798:	08002563 	.word	0x08002563
 800279c:	08002573 	.word	0x08002573
 80027a0:	08002583 	.word	0x08002583
 80027a4:	080025c3 	.word	0x080025c3
 80027a8:	08002593 	.word	0x08002593
 80027ac:	080025b3 	.word	0x080025b3
 80027b0:	080025a3 	.word	0x080025a3
 80027b4:	080025d3 	.word	0x080025d3

080027b8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80027c2:	230f      	movs	r3, #15
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <LPTIM_WaitForFlag+0x68>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4915      	ldr	r1, [pc, #84]	@ (8002824 <LPTIM_WaitForFlag+0x6c>)
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fd fcab 	bl	800012c <__udivsi3>
 80027d6:	0003      	movs	r3, r0
 80027d8:	001a      	movs	r2, r3
 80027da:	0013      	movs	r3, r2
 80027dc:	015b      	lsls	r3, r3, #5
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2203      	movs	r2, #3
 80027fa:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4013      	ands	r3, r2
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d002      	beq.n	8002812 <LPTIM_WaitForFlag+0x5a>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ea      	bne.n	80027e8 <LPTIM_WaitForFlag+0x30>

  return result;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000010 	.word	0x20000010
 8002824:	00004e20 	.word	0x00004e20

08002828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	429a      	cmp	r2, r3
 8002838:	d137      	bne.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800283a:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	23c0      	movs	r3, #192	@ 0xc0
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	401a      	ands	r2, r3
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d040      	beq.n	80028ce <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a22      	ldr	r2, [pc, #136]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002852:	401a      	ands	r2, r3
 8002854:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	0089      	lsls	r1, r1, #2
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2232      	movs	r2, #50	@ 0x32
 8002864:	4353      	muls	r3, r2
 8002866:	491f      	ldr	r1, [pc, #124]	@ (80028e4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002868:	0018      	movs	r0, r3
 800286a:	f7fd fc5f 	bl	800012c <__udivsi3>
 800286e:	0003      	movs	r3, r0
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002874:	e002      	b.n	800287c <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3b01      	subs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800287c:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	401a      	ands	r2, r3
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	429a      	cmp	r2, r3
 800288c:	d102      	bne.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x6c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	401a      	ands	r2, r3
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d113      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e012      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	23c0      	movs	r3, #192	@ 0xc0
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	401a      	ands	r2, r3
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d008      	beq.n	80028ce <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a06      	ldr	r2, [pc, #24]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80028c2:	401a      	ands	r2, r3
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	00c9      	lsls	r1, r1, #3
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40007000 	.word	0x40007000
 80028dc:	fffff9ff 	.word	0xfffff9ff
 80028e0:	20000010 	.word	0x20000010
 80028e4:	000f4240 	.word	0x000f4240

080028e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_PWREx_GetVoltageRange+0x14>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	23c0      	movs	r3, #192	@ 0xc0
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4013      	ands	r3, r2
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	0002      	movs	r2, r0
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8002912:	4913      	ldr	r1, [pc, #76]	@ (8002960 <HAL_PWREx_EnterSTOP2Mode+0x60>)
 8002914:	400a      	ands	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2207      	movs	r2, #7
 800291e:	4393      	bics	r3, r2
 8002920:	001a      	movs	r2, r3
 8002922:	4b0e      	ldr	r3, [pc, #56]	@ (800295c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8002924:	2102      	movs	r1, #2
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8002930:	2104      	movs	r1, #4
 8002932:	430a      	orrs	r2, r1
 8002934:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800293e:	bf30      	wfi
 8002940:	e002      	b.n	8002948 <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002942:	bf40      	sev
    __WFE();
 8002944:	bf20      	wfe
    __WFE();
 8002946:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800294e:	2104      	movs	r1, #4
 8002950:	438a      	bics	r2, r1
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40007000 	.word	0x40007000
 8002960:	ffffbfff 	.word	0xffffbfff
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002970:	4bc8      	ldr	r3, [pc, #800]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2238      	movs	r2, #56	@ 0x38
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800297a:	4bc6      	ldr	r3, [pc, #792]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2203      	movs	r2, #3
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	4013      	ands	r3, r2
 800298c:	d100      	bne.n	8002990 <HAL_RCC_OscConfig+0x28>
 800298e:	e0ee      	b.n	8002b6e <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3e>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b18      	cmp	r3, #24
 800299a:	d000      	beq.n	800299e <HAL_RCC_OscConfig+0x36>
 800299c:	e093      	b.n	8002ac6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d000      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3e>
 80029a4:	e08f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a6:	4bbb      	ldr	r3, [pc, #748]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2202      	movs	r2, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d006      	beq.n	80029be <HAL_RCC_OscConfig+0x56>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f000 fbae 	bl	800311a <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c2:	4bb4      	ldr	r3, [pc, #720]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2108      	movs	r1, #8
 80029c8:	400b      	ands	r3, r1
 80029ca:	d004      	beq.n	80029d6 <HAL_RCC_OscConfig+0x6e>
 80029cc:	4bb1      	ldr	r3, [pc, #708]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	21f0      	movs	r1, #240	@ 0xf0
 80029d2:	400b      	ands	r3, r1
 80029d4:	e005      	b.n	80029e2 <HAL_RCC_OscConfig+0x7a>
 80029d6:	49af      	ldr	r1, [pc, #700]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 80029d8:	2394      	movs	r3, #148	@ 0x94
 80029da:	58cb      	ldr	r3, [r1, r3]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	21f0      	movs	r1, #240	@ 0xf0
 80029e0:	400b      	ands	r3, r1
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d225      	bcs.n	8002a32 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fe5c 	bl	80036a8 <RCC_SetFlashLatencyFromMSIRange>
 80029f0:	1e03      	subs	r3, r0, #0
 80029f2:	d002      	beq.n	80029fa <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f000 fb90 	bl	800311a <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029fa:	4ba6      	ldr	r3, [pc, #664]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4ba5      	ldr	r3, [pc, #660]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a00:	2108      	movs	r1, #8
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	4ba3      	ldr	r3, [pc, #652]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	22f0      	movs	r2, #240	@ 0xf0
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a14:	4b9f      	ldr	r3, [pc, #636]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1a:	4b9e      	ldr	r3, [pc, #632]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a9e      	ldr	r2, [pc, #632]	@ (8002c98 <HAL_RCC_OscConfig+0x330>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	021a      	lsls	r2, r3, #8
 8002a2a:	4b9a      	ldr	r3, [pc, #616]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	e027      	b.n	8002a82 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a32:	4b98      	ldr	r3, [pc, #608]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b97      	ldr	r3, [pc, #604]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	2108      	movs	r1, #8
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	4b95      	ldr	r3, [pc, #596]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	22f0      	movs	r2, #240	@ 0xf0
 8002a44:	4393      	bics	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a4c:	4b91      	ldr	r3, [pc, #580]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a52:	4b90      	ldr	r3, [pc, #576]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a90      	ldr	r2, [pc, #576]	@ (8002c98 <HAL_RCC_OscConfig+0x330>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	021a      	lsls	r2, r3, #8
 8002a62:	4b8c      	ldr	r3, [pc, #560]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fe18 	bl	80036a8 <RCC_SetFlashLatencyFromMSIRange>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f000 fb4c 	bl	800311a <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002a82:	f000 fc43 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8002a86:	0001      	movs	r1, r0
 8002a88:	4b82      	ldr	r3, [pc, #520]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	220f      	movs	r2, #15
 8002a90:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002a92:	4a82      	ldr	r2, [pc, #520]	@ (8002c9c <HAL_RCC_OscConfig+0x334>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a96:	001a      	movs	r2, r3
 8002a98:	231f      	movs	r3, #31
 8002a9a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	40da      	lsrs	r2, r3
 8002aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x338>)
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca4 <HAL_RCC_OscConfig+0x33c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	250f      	movs	r5, #15
 8002aaa:	197c      	adds	r4, r7, r5
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fe fd99 	bl	80015e4 <HAL_InitTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d056      	beq.n	8002b6c <HAL_RCC_OscConfig+0x204>
        {
          return status;
 8002abe:	197b      	adds	r3, r7, r5
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	f000 fb2a 	bl	800311a <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d034      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ace:	4b71      	ldr	r3, [pc, #452]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b70      	ldr	r3, [pc, #448]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ada:	f7fe fddf 	bl	800169c <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8002ae4:	f7fe fdda 	bl	800169c <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e311      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af6:	4b67      	ldr	r3, [pc, #412]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d0f1      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b00:	4b64      	ldr	r3, [pc, #400]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b06:	2108      	movs	r1, #8
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	4b61      	ldr	r3, [pc, #388]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	22f0      	movs	r2, #240	@ 0xf0
 8002b12:	4393      	bics	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b20:	4b5c      	ldr	r3, [pc, #368]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a5c      	ldr	r2, [pc, #368]	@ (8002c98 <HAL_RCC_OscConfig+0x330>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	4b58      	ldr	r3, [pc, #352]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e01a      	b.n	8002b6e <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b38:	4b56      	ldr	r3, [pc, #344]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b55      	ldr	r3, [pc, #340]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	438a      	bics	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fdaa 	bl	800169c <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fda5 	bl	800169c <HAL_GetTick>
 8002b52:	0002      	movs	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2dc      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b60:	4b4c      	ldr	r3, [pc, #304]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d1f1      	bne.n	8002b4e <HAL_RCC_OscConfig+0x1e6>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b6c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2201      	movs	r2, #1
 8002b74:	4013      	ands	r3, r2
 8002b76:	d100      	bne.n	8002b7a <HAL_RCC_OscConfig+0x212>
 8002b78:	e065      	b.n	8002c46 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x224>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b18      	cmp	r3, #24
 8002b84:	d10e      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b41      	ldr	r3, [pc, #260]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	029b      	lsls	r3, r3, #10
 8002b94:	4013      	ands	r3, r2
 8002b96:	d055      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2dc>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d151      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e2ba      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	025b      	lsls	r3, r3, #9
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x258>
 8002bb0:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	0249      	lsls	r1, r1, #9
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x280>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	23a0      	movs	r3, #160	@ 0xa0
 8002bc6:	02db      	lsls	r3, r3, #11
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x274>
 8002bcc:	4b31      	ldr	r3, [pc, #196]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b30      	ldr	r3, [pc, #192]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002bd2:	21a0      	movs	r1, #160	@ 0xa0
 8002bd4:	02c9      	lsls	r1, r1, #11
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e005      	b.n	8002be8 <HAL_RCC_OscConfig+0x280>
 8002bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002be2:	4931      	ldr	r1, [pc, #196]	@ (8002ca8 <HAL_RCC_OscConfig+0x340>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d014      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fd54 	bl	800169c <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fd4f 	bl	800169c <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	@ 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e286      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0c:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	4013      	ands	r3, r2
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x292>
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fd3f 	bl	800169c <HAL_GetTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fd3a 	bl	800169c <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e271      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2bc>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2ea>
 8002c50:	e073      	b.n	8002d3a <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d128      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d125      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x314>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e24e      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <HAL_RCC_OscConfig+0x344>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	061a      	lsls	r2, r3, #24
 8002c8c:	4b01      	ldr	r3, [pc, #4]	@ (8002c94 <HAL_RCC_OscConfig+0x32c>)
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c92:	e052      	b.n	8002d3a <HAL_RCC_OscConfig+0x3d2>
 8002c94:	40021000 	.word	0x40021000
 8002c98:	ffff00ff 	.word	0xffff00ff
 8002c9c:	08005d64 	.word	0x08005d64
 8002ca0:	20000010 	.word	0x20000010
 8002ca4:	20000014 	.word	0x20000014
 8002ca8:	fffaffff 	.word	0xfffaffff
 8002cac:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d026      	beq.n	8002d06 <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4bc7      	ldr	r3, [pc, #796]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4bc6      	ldr	r3, [pc, #792]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	0049      	lsls	r1, r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fce9 	bl	800169c <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fce4 	bl	800169c <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e21b      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce2:	4bbd      	ldr	r3, [pc, #756]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4013      	ands	r3, r2
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4bba      	ldr	r3, [pc, #744]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4aba      	ldr	r2, [pc, #744]	@ (8002fdc <HAL_RCC_OscConfig+0x674>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	061a      	lsls	r2, r3, #24
 8002cfe:	4bb6      	ldr	r3, [pc, #728]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	e019      	b.n	8002d3a <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4bb4      	ldr	r3, [pc, #720]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4bb3      	ldr	r3, [pc, #716]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d0c:	49b4      	ldr	r1, [pc, #720]	@ (8002fe0 <HAL_RCC_OscConfig+0x678>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe fcc3 	bl	800169c <HAL_GetTick>
 8002d16:	0003      	movs	r3, r0
 8002d18:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fcbe 	bl	800169c <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1f5      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2e:	4baa      	ldr	r3, [pc, #680]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4013      	ands	r3, r2
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	4013      	ands	r3, r2
 8002d42:	d051      	beq.n	8002de8 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d031      	beq.n	8002db0 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8002d54:	4aa0      	ldr	r2, [pc, #640]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d56:	2394      	movs	r3, #148	@ 0x94
 8002d58:	58d3      	ldr	r3, [r2, r3]
 8002d5a:	499f      	ldr	r1, [pc, #636]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	4393      	bics	r3, r2
 8002d60:	2294      	movs	r2, #148	@ 0x94
 8002d62:	508b      	str	r3, [r1, r2]
 8002d64:	e007      	b.n	8002d76 <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8002d66:	4a9c      	ldr	r2, [pc, #624]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d68:	2394      	movs	r3, #148	@ 0x94
 8002d6a:	58d3      	ldr	r3, [r2, r3]
 8002d6c:	499a      	ldr	r1, [pc, #616]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4313      	orrs	r3, r2
 8002d72:	2294      	movs	r2, #148	@ 0x94
 8002d74:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4a98      	ldr	r2, [pc, #608]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d78:	2394      	movs	r3, #148	@ 0x94
 8002d7a:	58d3      	ldr	r3, [r2, r3]
 8002d7c:	4996      	ldr	r1, [pc, #600]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	2294      	movs	r2, #148	@ 0x94
 8002d84:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe fc89 	bl	800169c <HAL_GetTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fc84 	bl	800169c <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b11      	cmp	r3, #17
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1bb      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da2:	4a8d      	ldr	r2, [pc, #564]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002da4:	2394      	movs	r3, #148	@ 0x94
 8002da6:	58d3      	ldr	r3, [r2, r3]
 8002da8:	2202      	movs	r2, #2
 8002daa:	4013      	ands	r3, r2
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x428>
 8002dae:	e01b      	b.n	8002de8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4a89      	ldr	r2, [pc, #548]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002db2:	2394      	movs	r3, #148	@ 0x94
 8002db4:	58d3      	ldr	r3, [r2, r3]
 8002db6:	4988      	ldr	r1, [pc, #544]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	4393      	bics	r3, r2
 8002dbc:	2294      	movs	r2, #148	@ 0x94
 8002dbe:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fc6c 	bl	800169c <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe fc67 	bl	800169c <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b11      	cmp	r3, #17
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e19e      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ddc:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002dde:	2394      	movs	r3, #148	@ 0x94
 8002de0:	58d3      	ldr	r3, [r2, r3]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2204      	movs	r2, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	d100      	bne.n	8002df4 <HAL_RCC_OscConfig+0x48c>
 8002df2:	e10d      	b.n	8003010 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	201f      	movs	r0, #31
 8002df6:	183b      	adds	r3, r7, r0
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8002dfc:	4b76      	ldr	r3, [pc, #472]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002dfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	055b      	lsls	r3, r3, #21
 8002e04:	4013      	ands	r3, r2
 8002e06:	d110      	bne.n	8002e2a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b73      	ldr	r3, [pc, #460]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e0c:	4b72      	ldr	r3, [pc, #456]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e0e:	2180      	movs	r1, #128	@ 0x80
 8002e10:	0549      	lsls	r1, r1, #21
 8002e12:	430a      	orrs	r2, r1
 8002e14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e16:	4b70      	ldr	r3, [pc, #448]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	055b      	lsls	r3, r3, #21
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe4 <HAL_RCC_OscConfig+0x67c>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	d11a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e36:	4b6b      	ldr	r3, [pc, #428]	@ (8002fe4 <HAL_RCC_OscConfig+0x67c>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe4 <HAL_RCC_OscConfig+0x67c>)
 8002e3c:	2180      	movs	r1, #128	@ 0x80
 8002e3e:	0049      	lsls	r1, r1, #1
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e44:	f7fe fc2a 	bl	800169c <HAL_GetTick>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe fc25 	bl	800169c <HAL_GetTick>
 8002e52:	0002      	movs	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e15c      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b60      	ldr	r3, [pc, #384]	@ (8002fe4 <HAL_RCC_OscConfig+0x67c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2201      	movs	r2, #1
 8002e72:	4013      	ands	r3, r2
 8002e74:	d01e      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e80:	4a55      	ldr	r2, [pc, #340]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e82:	2390      	movs	r3, #144	@ 0x90
 8002e84:	58d3      	ldr	r3, [r2, r3]
 8002e86:	4954      	ldr	r1, [pc, #336]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e88:	2204      	movs	r2, #4
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	2290      	movs	r2, #144	@ 0x90
 8002e8e:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e90:	4a51      	ldr	r2, [pc, #324]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e92:	2390      	movs	r3, #144	@ 0x90
 8002e94:	58d3      	ldr	r3, [r2, r3]
 8002e96:	4950      	ldr	r1, [pc, #320]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	2290      	movs	r2, #144	@ 0x90
 8002e9e:	508b      	str	r3, [r1, r2]
 8002ea0:	e018      	b.n	8002ed4 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ea2:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002ea4:	2390      	movs	r3, #144	@ 0x90
 8002ea6:	58d3      	ldr	r3, [r2, r3]
 8002ea8:	494b      	ldr	r1, [pc, #300]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4313      	orrs	r3, r2
 8002eae:	2290      	movs	r2, #144	@ 0x90
 8002eb0:	508b      	str	r3, [r1, r2]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002eb4:	4a48      	ldr	r2, [pc, #288]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002eb6:	2390      	movs	r3, #144	@ 0x90
 8002eb8:	58d3      	ldr	r3, [r2, r3]
 8002eba:	4947      	ldr	r1, [pc, #284]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	2290      	movs	r2, #144	@ 0x90
 8002ec2:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ec4:	4a44      	ldr	r2, [pc, #272]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002ec6:	2390      	movs	r3, #144	@ 0x90
 8002ec8:	58d3      	ldr	r3, [r2, r3]
 8002eca:	4943      	ldr	r1, [pc, #268]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002ecc:	2204      	movs	r2, #4
 8002ece:	4393      	bics	r3, r2
 8002ed0:	2290      	movs	r2, #144	@ 0x90
 8002ed2:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d04f      	beq.n	8002f7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fbde 	bl	800169c <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee4:	e009      	b.n	8002efa <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe fbd9 	bl	800169c <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e10f      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	4a37      	ldr	r2, [pc, #220]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002efc:	2390      	movs	r3, #144	@ 0x90
 8002efe:	58d3      	ldr	r3, [r2, r3]
 8002f00:	2202      	movs	r2, #2
 8002f02:	4013      	ands	r3, r2
 8002f04:	d0ef      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2280      	movs	r2, #128	@ 0x80
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d01a      	beq.n	8002f46 <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f10:	4a31      	ldr	r2, [pc, #196]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f12:	2390      	movs	r3, #144	@ 0x90
 8002f14:	58d3      	ldr	r3, [r2, r3]
 8002f16:	4930      	ldr	r1, [pc, #192]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	2290      	movs	r2, #144	@ 0x90
 8002f1e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe fbbb 	bl	800169c <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0f1      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f36:	4a28      	ldr	r2, [pc, #160]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f38:	2390      	movs	r3, #144	@ 0x90
 8002f3a:	58d2      	ldr	r2, [r2, r3]
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x5ba>
 8002f44:	e059      	b.n	8002ffa <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f46:	4a24      	ldr	r2, [pc, #144]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f48:	2390      	movs	r3, #144	@ 0x90
 8002f4a:	58d3      	ldr	r3, [r2, r3]
 8002f4c:	4922      	ldr	r1, [pc, #136]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f4e:	2280      	movs	r2, #128	@ 0x80
 8002f50:	4393      	bics	r3, r2
 8002f52:	2290      	movs	r2, #144	@ 0x90
 8002f54:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f56:	e009      	b.n	8002f6c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe fba0 	bl	800169c <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0d6      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f6e:	2390      	movs	r3, #144	@ 0x90
 8002f70:	58d2      	ldr	r2, [r2, r3]
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	4013      	ands	r3, r2
 8002f78:	d1ee      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5f0>
 8002f7a:	e03e      	b.n	8002ffa <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fb8e 	bl	800169c <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f84:	e009      	b.n	8002f9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fb89 	bl	800169c <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0bf      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002f9c:	2390      	movs	r3, #144	@ 0x90
 8002f9e:	58d3      	ldr	r3, [r2, r3]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1ef      	bne.n	8002f86 <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002fa8:	2390      	movs	r3, #144	@ 0x90
 8002faa:	58d3      	ldr	r3, [r2, r3]
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d023      	beq.n	8002ffa <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fb2:	4a09      	ldr	r2, [pc, #36]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002fb4:	2390      	movs	r3, #144	@ 0x90
 8002fb6:	58d3      	ldr	r3, [r2, r3]
 8002fb8:	4907      	ldr	r1, [pc, #28]	@ (8002fd8 <HAL_RCC_OscConfig+0x670>)
 8002fba:	2280      	movs	r2, #128	@ 0x80
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	2290      	movs	r2, #144	@ 0x90
 8002fc0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fc2:	e013      	b.n	8002fec <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fb6a 	bl	800169c <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a06      	ldr	r2, [pc, #24]	@ (8002fe8 <HAL_RCC_OscConfig+0x680>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d90b      	bls.n	8002fec <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0a0      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	80ffffff 	.word	0x80ffffff
 8002fe0:	fffffeff 	.word	0xfffffeff
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fec:	4a4d      	ldr	r2, [pc, #308]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8002fee:	2390      	movs	r3, #144	@ 0x90
 8002ff0:	58d2      	ldr	r2, [r2, r3]
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d1e4      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ffa:	231f      	movs	r3, #31
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003004:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8003006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003008:	4b46      	ldr	r3, [pc, #280]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 800300a:	4947      	ldr	r1, [pc, #284]	@ (8003128 <HAL_RCC_OscConfig+0x7c0>)
 800300c:	400a      	ands	r2, r1
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d100      	bne.n	800301a <HAL_RCC_OscConfig+0x6b2>
 8003018:	e07e      	b.n	8003118 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800301a:	4b42      	ldr	r3, [pc, #264]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2238      	movs	r2, #56	@ 0x38
 8003020:	4013      	ands	r3, r2
 8003022:	2b18      	cmp	r3, #24
 8003024:	d100      	bne.n	8003028 <HAL_RCC_OscConfig+0x6c0>
 8003026:	e075      	b.n	8003114 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	2b02      	cmp	r3, #2
 800302e:	d156      	bne.n	80030de <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b3c      	ldr	r3, [pc, #240]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8003036:	493d      	ldr	r1, [pc, #244]	@ (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003038:	400a      	ands	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fb2e 	bl	800169c <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fb29 	bl	800169c <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e060      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003058:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	049b      	lsls	r3, r3, #18
 8003060:	4013      	ands	r3, r2
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	4b2f      	ldr	r3, [pc, #188]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a31      	ldr	r2, [pc, #196]	@ (8003130 <HAL_RCC_OscConfig+0x7c8>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	431a      	orrs	r2, r3
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8003094:	430a      	orrs	r2, r1
 8003096:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8003098:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 800309e:	2180      	movs	r1, #128	@ 0x80
 80030a0:	0549      	lsls	r1, r1, #21
 80030a2:	430a      	orrs	r2, r1
 80030a4:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	0449      	lsls	r1, r1, #17
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe faf2 	bl	800169c <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe faed 	bl	800169c <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e024      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	049b      	lsls	r3, r3, #18
 80030d8:	4013      	ands	r3, r2
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x756>
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 80030e4:	4911      	ldr	r1, [pc, #68]	@ (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	400a      	ands	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fad7 	bl	800169c <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fad2 	bl	800169c <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e009      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <HAL_RCC_OscConfig+0x7bc>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	049b      	lsls	r3, r3, #18
 800310e:	4013      	ands	r3, r2
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x78c>
 8003112:	e001      	b.n	8003118 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b008      	add	sp, #32
 8003120:	bdb0      	pop	{r4, r5, r7, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	40021000 	.word	0x40021000
 8003128:	efffffff 	.word	0xefffffff
 800312c:	feffffff 	.word	0xfeffffff
 8003130:	11c1808c 	.word	0x11c1808c

08003134 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b5b0      	push	{r4, r5, r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800313e:	4b6c      	ldr	r3, [pc, #432]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2207      	movs	r2, #7
 8003144:	4013      	ands	r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d911      	bls.n	8003170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314c:	4b68      	ldr	r3, [pc, #416]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2207      	movs	r2, #7
 8003152:	4393      	bics	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b64      	ldr	r3, [pc, #400]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2207      	movs	r2, #7
 8003164:	4013      	ands	r3, r2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0bb      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	d100      	bne.n	800317c <HAL_RCC_ClockConfig+0x48>
 800317a:	e064      	b.n	8003246 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b5b      	ldr	r3, [pc, #364]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	049b      	lsls	r3, r3, #18
 800318c:	4013      	ands	r3, r2
 800318e:	d138      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0a9      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319c:	4b55      	ldr	r3, [pc, #340]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	029b      	lsls	r3, r3, #10
 80031a4:	4013      	ands	r3, r2
 80031a6:	d12c      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e09d      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b4:	4b4f      	ldr	r3, [pc, #316]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2202      	movs	r2, #2
 80031ba:	4013      	ands	r3, r2
 80031bc:	d121      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e092      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ca:	4b4a      	ldr	r3, [pc, #296]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4013      	ands	r3, r2
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e086      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e2:	4a44      	ldr	r2, [pc, #272]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	2394      	movs	r3, #148	@ 0x94
 80031e6:	58d3      	ldr	r3, [r2, r3]
 80031e8:	2202      	movs	r2, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e07a      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f2:	4a40      	ldr	r2, [pc, #256]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	2390      	movs	r3, #144	@ 0x90
 80031f6:	58d3      	ldr	r3, [r2, r3]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e072      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b3c      	ldr	r3, [pc, #240]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2207      	movs	r2, #7
 8003208:	4393      	bics	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4b38      	ldr	r3, [pc, #224]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003216:	f7fe fa41 	bl	800169c <HAL_GetTick>
 800321a:	0003      	movs	r3, r0
 800321c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e009      	b.n	8003234 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fe fa3c 	bl	800169c <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4a33      	ldr	r2, [pc, #204]	@ (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e059      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003234:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2238      	movs	r2, #56	@ 0x38
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	429a      	cmp	r2, r3
 8003244:	d1ec      	bne.n	8003220 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a29      	ldr	r2, [pc, #164]	@ (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b22      	ldr	r3, [pc, #136]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2207      	movs	r2, #7
 800326a:	4013      	ands	r3, r2
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d211      	bcs.n	8003296 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b1f      	ldr	r3, [pc, #124]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2207      	movs	r2, #7
 8003278:	4393      	bics	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	4b1c      	ldr	r3, [pc, #112]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003284:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2207      	movs	r2, #7
 800328a:	4013      	ands	r3, r2
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e028      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2204      	movs	r2, #4
 800329c:	4013      	ands	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b14      	ldr	r3, [pc, #80]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a16      	ldr	r2, [pc, #88]	@ (8003300 <HAL_RCC_ClockConfig+0x1cc>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80032b4:	f000 f82a 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032b8:	0001      	movs	r1, r0
 80032ba:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	220f      	movs	r2, #15
 80032c2:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80032c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003304 <HAL_RCC_ClockConfig+0x1d0>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c8:	001a      	movs	r2, r3
 80032ca:	231f      	movs	r3, #31
 80032cc:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80032ce:	000a      	movs	r2, r1
 80032d0:	40da      	lsrs	r2, r3
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <HAL_RCC_ClockConfig+0x1d4>)
 80032d4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80032d6:	250b      	movs	r5, #11
 80032d8:	197c      	adds	r4, r7, r5
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fe f982 	bl	80015e4 <HAL_InitTick>
 80032e0:	0003      	movs	r3, r0
 80032e2:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80032e4:	197b      	adds	r3, r7, r5
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	00001388 	.word	0x00001388
 80032fc:	fffff0ff 	.word	0xfffff0ff
 8003300:	ffff8fff 	.word	0xffff8fff
 8003304:	08005d64 	.word	0x08005d64
 8003308:	20000010 	.word	0x20000010

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	@ 0x28
 8003310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b46      	ldr	r3, [pc, #280]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2238      	movs	r2, #56	@ 0x38
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b43      	ldr	r3, [pc, #268]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2203      	movs	r2, #3
 800332a:	4013      	ands	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b18      	cmp	r3, #24
 8003338:	d125      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d122      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003340:	4b3c      	ldr	r3, [pc, #240]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2208      	movs	r2, #8
 8003346:	4013      	ands	r3, r2
 8003348:	d107      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800334a:	4a3a      	ldr	r2, [pc, #232]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 800334c:	2394      	movs	r3, #148	@ 0x94
 800334e:	58d3      	ldr	r3, [r2, r3]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	220f      	movs	r2, #15
 8003354:	4013      	ands	r3, r2
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
 8003358:	e005      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	220f      	movs	r2, #15
 8003362:	4013      	ands	r3, r2
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	2b0b      	cmp	r3, #11
 800336a:	d901      	bls.n	8003370 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8003370:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	58d3      	ldr	r3, [r2, r3]
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11b      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003384:	e018      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d102      	bne.n	8003392 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800338c:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_RCC_GetSysClockFreq+0x130>)
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	e012      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d102      	bne.n	800339e <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003398:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x134>)
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	e00c      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d103      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80033a4:	23fa      	movs	r3, #250	@ 0xfa
 80033a6:	01db      	lsls	r3, r3, #7
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b28      	cmp	r3, #40	@ 0x28
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b18      	cmp	r3, #24
 80033bc:	d135      	bne.n	800342a <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033be:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2203      	movs	r2, #3
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	2207      	movs	r2, #7
 80033d0:	4013      	ands	r3, r2
 80033d2:	3301      	adds	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d003      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xd8>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0xde>
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_RCC_GetSysClockFreq+0x130>)
 80033e6:	61fb      	str	r3, [r7, #28]
        break;
 80033e8:	e005      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x134>)
 80033ec:	61fb      	str	r3, [r7, #28]
        break;
 80033ee:	e002      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	61fb      	str	r3, [r7, #28]
        break;
 80033f4:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	227f      	movs	r2, #127	@ 0x7f
 80033fe:	4013      	ands	r3, r2
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	4353      	muls	r3, r2
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	0018      	movs	r0, r3
 8003408:	f7fc fe90 	bl	800012c <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003410:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x128>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0f5b      	lsrs	r3, r3, #29
 8003416:	2207      	movs	r2, #7
 8003418:	4013      	ands	r3, r2
 800341a:	3301      	adds	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68b8      	ldr	r0, [r7, #8]
 8003422:	f7fc fe83 	bl	800012c <__udivsi3>
 8003426:	0003      	movs	r3, r0
 8003428:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800342a:	6a3b      	ldr	r3, [r7, #32]
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b00a      	add	sp, #40	@ 0x28
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	08005d7c 	.word	0x08005d7c
 800343c:	00f42400 	.word	0x00f42400
 8003440:	003d0900 	.word	0x003d0900

08003444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b02      	ldr	r3, [pc, #8]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x10>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	20000010 	.word	0x20000010

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 800345c:	f7ff fff2 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003460:	0001      	movs	r1, r0
 8003462:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0b1b      	lsrs	r3, r3, #12
 8003468:	2207      	movs	r2, #7
 800346a:	4013      	ands	r3, r2
 800346c:	4a05      	ldr	r2, [pc, #20]	@ (8003484 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	001a      	movs	r2, r3
 8003472:	231f      	movs	r3, #31
 8003474:	4013      	ands	r3, r2
 8003476:	40d9      	lsrs	r1, r3
 8003478:	000b      	movs	r3, r1
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	08005d74 	.word	0x08005d74

08003488 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	221f      	movs	r2, #31
 8003494:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_CRRCR_HSI48ON */
  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8003496:	4b6e      	ldr	r3, [pc, #440]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	2380      	movs	r3, #128	@ 0x80
 800349c:	02db      	lsls	r3, r3, #11
 800349e:	401a      	ands	r2, r3
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	02db      	lsls	r3, r3, #11
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d104      	bne.n	80034b2 <HAL_RCC_GetOscConfig+0x2a>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	22a0      	movs	r2, #160	@ 0xa0
 80034ac:	02d2      	lsls	r2, r2, #11
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	e010      	b.n	80034d4 <HAL_RCC_GetOscConfig+0x4c>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 80034b2:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	025b      	lsls	r3, r3, #9
 80034ba:	401a      	ands	r2, r3
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	025b      	lsls	r3, r3, #9
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d104      	bne.n	80034ce <HAL_RCC_GetOscConfig+0x46>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0252      	lsls	r2, r2, #9
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	e002      	b.n	80034d4 <HAL_RCC_GetOscConfig+0x4c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 80034d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	401a      	ands	r2, r3
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d104      	bne.n	80034f0 <HAL_RCC_GetOscConfig+0x68>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2280      	movs	r2, #128	@ 0x80
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	e002      	b.n	80034f6 <HAL_RCC_GetOscConfig+0x6e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
  }
  RCC_OscInitStruct->HSICalibrationValue = ((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 80034f6:	4b56      	ldr	r3, [pc, #344]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0e1b      	lsrs	r3, r3, #24
 80034fc:	227f      	movs	r2, #127	@ 0x7f
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	611a      	str	r2, [r3, #16]

  /* Get the MSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSION) == RCC_CR_MSION)
 8003504:	4b52      	ldr	r3, [pc, #328]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	2b01      	cmp	r3, #1
 800350e:	d103      	bne.n	8003518 <HAL_RCC_GetOscConfig+0x90>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	61da      	str	r2, [r3, #28]
 8003516:	e002      	b.n	800351e <HAL_RCC_GetOscConfig+0x96>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 800351e:	4b4c      	ldr	r3, [pc, #304]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	22ff      	movs	r2, #255	@ 0xff
 8003526:	401a      	ands	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800352c:	4b48      	ldr	r3, [pc, #288]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	22f0      	movs	r2, #240	@ 0xf0
 8003532:	401a      	ands	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the LSE configuration -----------------------------------------------*/
  /* Get BDCR register */
  regval = RCC->BDCR;
 8003538:	4a45      	ldr	r2, [pc, #276]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 800353a:	2390      	movs	r3, #144	@ 0x90
 800353c:	58d3      	ldr	r3, [r2, r3]
 800353e:	60fb      	str	r3, [r7, #12]
  if (READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8003540:	4a43      	ldr	r2, [pc, #268]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003542:	2390      	movs	r3, #144	@ 0x90
 8003544:	58d3      	ldr	r3, [r2, r3]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	2b04      	cmp	r3, #4
 800354c:	d10f      	bne.n	800356e <HAL_RCC_GetOscConfig+0xe6>
  {
    if (((regval & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_RCC_GetOscConfig+0xde>
        && ((regval & RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2280      	movs	r2, #128	@ 0x80
 800355a:	4013      	ands	r3, r2
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetOscConfig+0xde>
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2285      	movs	r2, #133	@ 0x85
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e01c      	b.n	80035a0 <HAL_RCC_GetOscConfig+0x118>
    }
    else
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2205      	movs	r2, #5
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	e018      	b.n	80035a0 <HAL_RCC_GetOscConfig+0x118>
    }
  }
  else if (READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800356e:	4a38      	ldr	r2, [pc, #224]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003570:	2390      	movs	r3, #144	@ 0x90
 8003572:	58d3      	ldr	r3, [r2, r3]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10e      	bne.n	800359a <HAL_RCC_GetOscConfig+0x112>
  {
    if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) == RCC_BDCR_LSESYSEN)
 800357c:	4a34      	ldr	r2, [pc, #208]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 800357e:	2390      	movs	r3, #144	@ 0x90
 8003580:	58d3      	ldr	r3, [r2, r3]
 8003582:	2280      	movs	r2, #128	@ 0x80
 8003584:	4013      	ands	r3, r2
 8003586:	2b80      	cmp	r3, #128	@ 0x80
 8003588:	d103      	bne.n	8003592 <HAL_RCC_GetOscConfig+0x10a>
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2281      	movs	r2, #129	@ 0x81
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e006      	b.n	80035a0 <HAL_RCC_GetOscConfig+0x118>
    }
    else
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e002      	b.n	80035a0 <HAL_RCC_GetOscConfig+0x118>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if (READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80035a2:	2394      	movs	r3, #148	@ 0x94
 80035a4:	58d3      	ldr	r3, [r2, r3]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d103      	bne.n	80035b6 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	615a      	str	r2, [r3, #20]
 80035b4:	e002      	b.n	80035bc <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
  }

  if ((RCC->CSR & RCC_CSR_LSIPREDIV) == RCC_CSR_LSIPREDIV)
 80035bc:	4a24      	ldr	r2, [pc, #144]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80035be:	2394      	movs	r3, #148	@ 0x94
 80035c0:	58d3      	ldr	r3, [r2, r3]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d103      	bne.n	80035d2 <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV128;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	619a      	str	r2, [r3, #24]
 80035d0:	e002      	b.n	80035d8 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->LSIDiv = RCC_LSI_DIV1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	619a      	str	r2, [r3, #24]
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#endif /* RCC_CRRCR_HSI48ON */
  /* Get the PLL configuration -----------------------------------------------*/
  if (READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 80035d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	045b      	lsls	r3, r3, #17
 80035e0:	401a      	ands	r2, r3
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	045b      	lsls	r3, r3, #17
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d103      	bne.n	80035f2 <HAL_RCC_GetOscConfig+0x16a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80035f0:	e002      	b.n	80035f8 <HAL_RCC_GetOscConfig+0x170>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035f8:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2203      	movs	r2, #3
 80035fe:	401a      	ands	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2270      	movs	r2, #112	@ 0x70
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003610:	4b0f      	ldr	r3, [pc, #60]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	227f      	movs	r2, #127	@ 0x7f
 8003618:	401a      	ands	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct->PLL.PLLQ = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ)));
 800361e:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	23e0      	movs	r3, #224	@ 0xe0
 8003624:	051b      	lsls	r3, r3, #20
 8003626:	401a      	ands	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct->PLL.PLLR = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR)));
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	0f5b      	lsrs	r3, r3, #29
 8003632:	075a      	lsls	r2, r3, #29
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct->PLL.PLLP = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP)));
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetOscConfig+0x1c8>)
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	23f8      	movs	r3, #248	@ 0xf8
 800363e:	039b      	lsls	r3, r3, #14
 8003640:	401a      	ands	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2207      	movs	r2, #7
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003664:	4b0e      	ldr	r3, [pc, #56]	@ (80036a0 <HAL_RCC_GetClockConfig+0x4c>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2207      	movs	r2, #7
 800366a:	401a      	ands	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_GetClockConfig+0x4c>)
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	23f0      	movs	r3, #240	@ 0xf0
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	401a      	ands	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <HAL_RCC_GetClockConfig+0x4c>)
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	23e0      	movs	r3, #224	@ 0xe0
 8003684:	01db      	lsls	r3, r3, #7
 8003686:	401a      	ands	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_RCC_GetClockConfig+0x50>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2207      	movs	r2, #7
 8003692:	401a      	ands	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	601a      	str	r2, [r3, #0]
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40022000 	.word	0x40022000

080036a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003774 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80036b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	055b      	lsls	r3, r3, #21
 80036bc:	4013      	ands	r3, r2
 80036be:	d004      	beq.n	80036ca <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036c0:	f7ff f912 	bl	80028e8 <HAL_PWREx_GetVoltageRange>
 80036c4:	0003      	movs	r3, r0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e017      	b.n	80036fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003774 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80036cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036ce:	4b29      	ldr	r3, [pc, #164]	@ (8003774 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80036d0:	2180      	movs	r1, #128	@ 0x80
 80036d2:	0549      	lsls	r1, r1, #21
 80036d4:	430a      	orrs	r2, r1
 80036d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036d8:	4b26      	ldr	r3, [pc, #152]	@ (8003774 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80036da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	055b      	lsls	r3, r3, #21
 80036e0:	4013      	ands	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036e6:	f7ff f8ff 	bl	80028e8 <HAL_PWREx_GetVoltageRange>
 80036ea:	0003      	movs	r3, r0
 80036ec:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b21      	ldr	r3, [pc, #132]	@ (8003774 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80036f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80036f4:	4920      	ldr	r1, [pc, #128]	@ (8003778 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	429a      	cmp	r2, r3
 8003702:	d111      	bne.n	8003728 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d91c      	bls.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2bb0      	cmp	r3, #176	@ 0xb0
 800370e:	d902      	bls.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003710:	2302      	movs	r3, #2
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	e016      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b90      	cmp	r3, #144	@ 0x90
 800371a:	d902      	bls.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800371c:	2301      	movs	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	e010      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e00d      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b7f      	cmp	r3, #127	@ 0x7f
 800372c:	d902      	bls.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800372e:	2302      	movs	r3, #2
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e007      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b70      	cmp	r3, #112	@ 0x70
 8003738:	d102      	bne.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800373a:	2301      	movs	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e001      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003744:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2207      	movs	r2, #7
 800374a:	4393      	bics	r3, r2
 800374c:	0019      	movs	r1, r3
 800374e:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2207      	movs	r2, #7
 800375c:	4013      	ands	r3, r2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b006      	add	sp, #24
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	40021000 	.word	0x40021000
 8003778:	efffffff 	.word	0xefffffff
 800377c:	40022000 	.word	0x40022000

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003788:	2313      	movs	r3, #19
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003790:	2312      	movs	r3, #18
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	4013      	ands	r3, r2
 80037a2:	d100      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80037a4:	e0b7      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2011      	movs	r0, #17
 80037a8:	183b      	adds	r3, r7, r0
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b4c      	ldr	r3, [pc, #304]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	055b      	lsls	r3, r3, #21
 80037b6:	4013      	ands	r3, r2
 80037b8:	d110      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	4b49      	ldr	r3, [pc, #292]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037be:	4b48      	ldr	r3, [pc, #288]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c0:	2180      	movs	r1, #128	@ 0x80
 80037c2:	0549      	lsls	r1, r1, #21
 80037c4:	430a      	orrs	r2, r1
 80037c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80037c8:	4b45      	ldr	r3, [pc, #276]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	055b      	lsls	r3, r3, #21
 80037d0:	4013      	ands	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b40      	ldr	r3, [pc, #256]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e2:	2180      	movs	r1, #128	@ 0x80
 80037e4:	0049      	lsls	r1, r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ea:	f7fd ff57 	bl	800169c <HAL_GetTick>
 80037ee:	0003      	movs	r3, r0
 80037f0:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f2:	e00b      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fd ff52 	bl	800169c <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d904      	bls.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003802:	2313      	movs	r3, #19
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2203      	movs	r2, #3
 8003808:	701a      	strb	r2, [r3, #0]
        break;
 800380a:	e005      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800380c:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4013      	ands	r3, r2
 8003816:	d0ed      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003818:	2313      	movs	r3, #19
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d168      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003822:	4a2f      	ldr	r2, [pc, #188]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003824:	2390      	movs	r3, #144	@ 0x90
 8003826:	58d2      	ldr	r2, [r2, r3]
 8003828:	23c0      	movs	r3, #192	@ 0xc0
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4013      	ands	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01f      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d01a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003840:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	2390      	movs	r3, #144	@ 0x90
 8003844:	58d3      	ldr	r3, [r2, r3]
 8003846:	4a28      	ldr	r2, [pc, #160]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003848:	4013      	ands	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800384c:	4a24      	ldr	r2, [pc, #144]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384e:	2390      	movs	r3, #144	@ 0x90
 8003850:	58d3      	ldr	r3, [r2, r3]
 8003852:	4923      	ldr	r1, [pc, #140]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	2280      	movs	r2, #128	@ 0x80
 8003856:	0252      	lsls	r2, r2, #9
 8003858:	4313      	orrs	r3, r2
 800385a:	2290      	movs	r2, #144	@ 0x90
 800385c:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 800385e:	4a20      	ldr	r2, [pc, #128]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003860:	2390      	movs	r3, #144	@ 0x90
 8003862:	58d3      	ldr	r3, [r2, r3]
 8003864:	491e      	ldr	r1, [pc, #120]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	4a21      	ldr	r2, [pc, #132]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8003868:	4013      	ands	r3, r2
 800386a:	2290      	movs	r2, #144	@ 0x90
 800386c:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800386e:	491c      	ldr	r1, [pc, #112]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003870:	2290      	movs	r2, #144	@ 0x90
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d017      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fd ff0d 	bl	800169c <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003886:	e00c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fd ff08 	bl	800169c <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d904      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8003898:	2313      	movs	r3, #19
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2203      	movs	r2, #3
 800389e:	701a      	strb	r2, [r3, #0]
            break;
 80038a0:	e005      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	2390      	movs	r3, #144	@ 0x90
 80038a6:	58d3      	ldr	r3, [r2, r3]
 80038a8:	2202      	movs	r2, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	d0ec      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80038ae:	2313      	movs	r3, #19
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b8:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	2390      	movs	r3, #144	@ 0x90
 80038bc:	58d3      	ldr	r3, [r2, r3]
 80038be:	4a0a      	ldr	r2, [pc, #40]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c0:	401a      	ands	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c6:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	2290      	movs	r2, #144	@ 0x90
 80038cc:	508b      	str	r3, [r1, r2]
 80038ce:	e017      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d0:	2312      	movs	r3, #18
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2213      	movs	r2, #19
 80038d6:	18ba      	adds	r2, r7, r2
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e010      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40007000 	.word	0x40007000
 80038e8:	fffffcff 	.word	0xfffffcff
 80038ec:	fffeffff 	.word	0xfffeffff
 80038f0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	2312      	movs	r3, #18
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	2213      	movs	r2, #19
 80038fa:	18ba      	adds	r2, r7, r2
 80038fc:	7812      	ldrb	r2, [r2, #0]
 80038fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003900:	2311      	movs	r3, #17
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b84      	ldr	r3, [pc, #528]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800390c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800390e:	4b83      	ldr	r3, [pc, #524]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003910:	4983      	ldr	r1, [pc, #524]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003912:	400a      	ands	r2, r1
 8003914:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2201      	movs	r2, #1
 800391c:	4013      	ands	r3, r2
 800391e:	d00b      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003920:	4a7e      	ldr	r2, [pc, #504]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003922:	2388      	movs	r3, #136	@ 0x88
 8003924:	58d3      	ldr	r3, [r2, r3]
 8003926:	2203      	movs	r2, #3
 8003928:	4393      	bics	r3, r2
 800392a:	001a      	movs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	497a      	ldr	r1, [pc, #488]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	2288      	movs	r2, #136	@ 0x88
 8003936:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2202      	movs	r2, #2
 800393e:	4013      	ands	r3, r2
 8003940:	d00b      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003942:	4a76      	ldr	r2, [pc, #472]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003944:	2388      	movs	r3, #136	@ 0x88
 8003946:	58d3      	ldr	r3, [r2, r3]
 8003948:	220c      	movs	r2, #12
 800394a:	4393      	bics	r3, r2
 800394c:	001a      	movs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4972      	ldr	r1, [pc, #456]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	2288      	movs	r2, #136	@ 0x88
 8003958:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2210      	movs	r2, #16
 8003960:	4013      	ands	r3, r2
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003964:	4a6d      	ldr	r2, [pc, #436]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003966:	2388      	movs	r3, #136	@ 0x88
 8003968:	58d3      	ldr	r3, [r2, r3]
 800396a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800396c:	401a      	ands	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	496a      	ldr	r1, [pc, #424]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	2288      	movs	r2, #136	@ 0x88
 8003978:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	4013      	ands	r3, r2
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003984:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003986:	2388      	movs	r3, #136	@ 0x88
 8003988:	58d3      	ldr	r3, [r2, r3]
 800398a:	4a67      	ldr	r2, [pc, #412]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800398c:	401a      	ands	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4962      	ldr	r1, [pc, #392]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	2288      	movs	r2, #136	@ 0x88
 8003998:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2220      	movs	r2, #32
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80039a6:	2388      	movs	r3, #136	@ 0x88
 80039a8:	58d3      	ldr	r3, [r2, r3]
 80039aa:	4a60      	ldr	r2, [pc, #384]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80039ac:	401a      	ands	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	495a      	ldr	r1, [pc, #360]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	2288      	movs	r2, #136	@ 0x88
 80039b8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2240      	movs	r2, #64	@ 0x40
 80039c0:	4013      	ands	r3, r2
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c4:	4a55      	ldr	r2, [pc, #340]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80039c6:	2388      	movs	r3, #136	@ 0x88
 80039c8:	58d3      	ldr	r3, [r2, r3]
 80039ca:	4a59      	ldr	r2, [pc, #356]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80039cc:	401a      	ands	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	4952      	ldr	r1, [pc, #328]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	2288      	movs	r2, #136	@ 0x88
 80039d8:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2280      	movs	r2, #128	@ 0x80
 80039e0:	4013      	ands	r3, r2
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e4:	4a4d      	ldr	r2, [pc, #308]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80039e6:	2388      	movs	r3, #136	@ 0x88
 80039e8:	58d3      	ldr	r3, [r2, r3]
 80039ea:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80039ec:	401a      	ands	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	494a      	ldr	r1, [pc, #296]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	2288      	movs	r2, #136	@ 0x88
 80039f8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a06:	4a45      	ldr	r2, [pc, #276]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a08:	2388      	movs	r3, #136	@ 0x88
 8003a0a:	58d3      	ldr	r3, [r2, r3]
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8003a0e:	401a      	ands	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4941      	ldr	r1, [pc, #260]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	2288      	movs	r2, #136	@ 0x88
 8003a1a:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	2380      	movs	r3, #128	@ 0x80
 8003a22:	01db      	lsls	r3, r3, #7
 8003a24:	4013      	ands	r3, r2
 8003a26:	d017      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	055b      	lsls	r3, r3, #21
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b38      	ldr	r3, [pc, #224]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a3a:	2180      	movs	r1, #128	@ 0x80
 8003a3c:	0249      	lsls	r1, r1, #9
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a42:	4a36      	ldr	r2, [pc, #216]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a44:	2388      	movs	r3, #136	@ 0x88
 8003a46:	58d3      	ldr	r3, [r2, r3]
 8003a48:	4a3c      	ldr	r2, [pc, #240]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	4932      	ldr	r1, [pc, #200]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	2288      	movs	r2, #136	@ 0x88
 8003a56:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	019b      	lsls	r3, r3, #6
 8003a60:	4013      	ands	r3, r2
 8003a62:	d017      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	051b      	lsls	r3, r3, #20
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8003a70:	4b2a      	ldr	r3, [pc, #168]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4b29      	ldr	r3, [pc, #164]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a76:	2180      	movs	r1, #128	@ 0x80
 8003a78:	0449      	lsls	r1, r1, #17
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a7e:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a80:	2388      	movs	r3, #136	@ 0x88
 8003a82:	58d3      	ldr	r3, [r2, r3]
 8003a84:	4a2e      	ldr	r2, [pc, #184]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	4923      	ldr	r1, [pc, #140]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	2288      	movs	r2, #136	@ 0x88
 8003a92:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d017      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	045b      	lsls	r3, r3, #17
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003ab2:	2180      	movs	r1, #128	@ 0x80
 8003ab4:	0449      	lsls	r1, r1, #17
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003aba:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003abc:	2388      	movs	r3, #136	@ 0x88
 8003abe:	58d3      	ldr	r3, [r2, r3]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	4914      	ldr	r1, [pc, #80]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	2288      	movs	r2, #136	@ 0x88
 8003ace:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2380      	movs	r3, #128	@ 0x80
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d017      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	049b      	lsls	r3, r3, #18
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003aee:	2180      	movs	r1, #128	@ 0x80
 8003af0:	0449      	lsls	r1, r1, #17
 8003af2:	430a      	orrs	r2, r1
 8003af4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003af6:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003af8:	2388      	movs	r3, #136	@ 0x88
 8003afa:	58d3      	ldr	r3, [r2, r3]
 8003afc:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003afe:	401a      	ands	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	4905      	ldr	r1, [pc, #20]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	2288      	movs	r2, #136	@ 0x88
 8003b0a:	508b      	str	r3, [r1, r2]

  }

  return status;
 8003b0c:	2312      	movs	r3, #18
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	781b      	ldrb	r3, [r3, #0]
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b006      	add	sp, #24
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	efffffff 	.word	0xefffffff
 8003b24:	fffff3ff 	.word	0xfffff3ff
 8003b28:	fffffcff 	.word	0xfffffcff
 8003b2c:	ffffcfff 	.word	0xffffcfff
 8003b30:	fffcffff 	.word	0xfffcffff
 8003b34:	fff3ffff 	.word	0xfff3ffff
 8003b38:	ffcfffff 	.word	0xffcfffff
 8003b3c:	cfffffff 	.word	0xcfffffff
 8003b40:	f3ffffff 	.word	0xf3ffffff
 8003b44:	feffffff 	.word	0xfeffffff

08003b48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d154      	bne.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b5e:	4ad0      	ldr	r2, [pc, #832]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003b60:	2390      	movs	r3, #144	@ 0x90
 8003b62:	58d2      	ldr	r2, [r2, r3]
 8003b64:	23c0      	movs	r3, #192	@ 0xc0
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	23c0      	movs	r3, #192	@ 0xc0
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d039      	beq.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	23c0      	movs	r3, #192	@ 0xc0
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003b80:	f000 fbf3 	bl	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d006      	beq.n	8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d00f      	beq.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8003b98:	f000 fbe7 	bl	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b9c:	4ac0      	ldr	r2, [pc, #768]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003b9e:	2390      	movs	r3, #144	@ 0x90
 8003ba0:	58d3      	ldr	r3, [r2, r3]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d001      	beq.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8003baa:	f000 fbe0 	bl	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	61fb      	str	r3, [r7, #28]
        break;
 8003bb4:	f000 fbdb 	bl	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003bb8:	4ab9      	ldr	r2, [pc, #740]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003bba:	2394      	movs	r3, #148	@ 0x94
 8003bbc:	58d3      	ldr	r3, [r2, r3]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d001      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8003bc6:	f000 fbd4 	bl	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003bca:	4ab5      	ldr	r2, [pc, #724]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003bcc:	2394      	movs	r3, #148	@ 0x94
 8003bce:	58d3      	ldr	r3, [r2, r3]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d103      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8003bd8:	23fa      	movs	r3, #250	@ 0xfa
 8003bda:	61fb      	str	r3, [r7, #28]
        break;
 8003bdc:	f000 fbc9 	bl	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 8003be0:	23fa      	movs	r3, #250	@ 0xfa
 8003be2:	01db      	lsls	r3, r3, #7
 8003be4:	61fb      	str	r3, [r7, #28]
        break;
 8003be6:	f000 fbc4 	bl	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bea:	4bad      	ldr	r3, [pc, #692]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	@ 0x80
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	2380      	movs	r3, #128	@ 0x80
 8003bf6:	029b      	lsls	r3, r3, #10
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8003bfc:	f000 fbbb 	bl	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 8003c00:	4ba8      	ldr	r3, [pc, #672]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8003c02:	61fb      	str	r3, [r7, #28]
        break;
 8003c04:	f000 fbb7 	bl	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d100      	bne.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8003c12:	e0f7      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003c1e:	f000 fbac 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	2380      	movs	r3, #128	@ 0x80
 8003c26:	025b      	lsls	r3, r3, #9
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d100      	bne.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003c2c:	e0ea      	b.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	2380      	movs	r3, #128	@ 0x80
 8003c32:	025b      	lsls	r3, r3, #9
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d901      	bls.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8003c38:	f000 fb9f 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	01db      	lsls	r3, r3, #7
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d100      	bne.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c46:	e180      	b.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	2380      	movs	r3, #128	@ 0x80
 8003c4c:	01db      	lsls	r3, r3, #7
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d901      	bls.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8003c52:	f000 fb92 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	019b      	lsls	r3, r3, #6
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8003c60:	f000 fb29 	bl	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003c6e:	f000 fb84 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	2380      	movs	r3, #128	@ 0x80
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d100      	bne.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8003c7c:	e2f0      	b.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d901      	bls.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003c88:	f000 fb77 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	2380      	movs	r3, #128	@ 0x80
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d100      	bne.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8003c96:	e2b8      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	2380      	movs	r3, #128	@ 0x80
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003ca2:	f000 fb6a 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d100      	bne.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8003cb0:	e249      	b.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8003cbc:	f000 fb5d 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b80      	cmp	r3, #128	@ 0x80
 8003cc4:	d100      	bne.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8003cc6:	e1e1      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b80      	cmp	r3, #128	@ 0x80
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8003cce:	f000 fb54 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d80f      	bhi.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8003cde:	f000 fb4c 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d901      	bls.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003ce8:	f000 fb47 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	469f      	mov	pc, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b40      	cmp	r3, #64	@ 0x40
 8003cfc:	d100      	bne.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8003cfe:	e191      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 8003d00:	f000 fb3b 	bl	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d04:	4a66      	ldr	r2, [pc, #408]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003d06:	2388      	movs	r3, #136	@ 0x88
 8003d08:	58d3      	ldr	r3, [r2, r3]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d025      	beq.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d82d      	bhi.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d013      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d827      	bhi.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d005      	beq.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 8003d34:	e020      	b.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003d36:	f7ff fb8f 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	61fb      	str	r3, [r7, #28]
            break;
 8003d3e:	e020      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 8003d40:	f7ff fae4 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003d44:	0003      	movs	r3, r0
 8003d46:	61fb      	str	r3, [r7, #28]
            break;
 8003d48:	e01b      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d4a:	4b55      	ldr	r3, [pc, #340]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	2380      	movs	r3, #128	@ 0x80
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	401a      	ands	r2, r3
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d10f      	bne.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003d5e:	61fb      	str	r3, [r7, #28]
            break;
 8003d60:	e00c      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d62:	4a4f      	ldr	r2, [pc, #316]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003d64:	2390      	movs	r3, #144	@ 0x90
 8003d66:	58d3      	ldr	r3, [r2, r3]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	61fb      	str	r3, [r7, #28]
            break;
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	e2ff      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	e2fd      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003d80:	46c0      	nop			@ (mov r8, r8)
        break;
 8003d82:	e2fb      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d84:	4a46      	ldr	r2, [pc, #280]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003d86:	2388      	movs	r3, #136	@ 0x88
 8003d88:	58d3      	ldr	r3, [r2, r3]
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d025      	beq.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d82d      	bhi.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d013      	beq.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d827      	bhi.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8003db4:	e020      	b.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003db6:	f7ff fb4f 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	61fb      	str	r3, [r7, #28]
            break;
 8003dbe:	e020      	b.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 8003dc0:	f7ff faa4 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	61fb      	str	r3, [r7, #28]
            break;
 8003dc8:	e01b      	b.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dca:	4b35      	ldr	r3, [pc, #212]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 8003ddc:	4b33      	ldr	r3, [pc, #204]	@ (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003dde:	61fb      	str	r3, [r7, #28]
            break;
 8003de0:	e00c      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003de2:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003de4:	2390      	movs	r3, #144	@ 0x90
 8003de6:	58d3      	ldr	r3, [r2, r3]
 8003de8:	2202      	movs	r2, #2
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d107      	bne.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	61fb      	str	r3, [r7, #28]
            break;
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8003df8:	46c0      	nop			@ (mov r8, r8)
 8003dfa:	e2bf      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003dfc:	46c0      	nop			@ (mov r8, r8)
 8003dfe:	e2bd      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003e00:	46c0      	nop			@ (mov r8, r8)
        break;
 8003e02:	e2bb      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7ff fb28 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e2b6      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003e0e:	4a24      	ldr	r2, [pc, #144]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003e10:	2388      	movs	r3, #136	@ 0x88
 8003e12:	58d2      	ldr	r2, [r2, r3]
 8003e14:	23c0      	movs	r3, #192	@ 0xc0
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	4013      	ands	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	23c0      	movs	r3, #192	@ 0xc0
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d02d      	beq.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	23c0      	movs	r3, #192	@ 0xc0
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d833      	bhi.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d017      	beq.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	2380      	movs	r3, #128	@ 0x80
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d829      	bhi.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d005      	beq.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 8003e54:	e020      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003e56:	f7ff faff 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	61fb      	str	r3, [r7, #28]
            break;
 8003e5e:	e028      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 8003e60:	f7ff fa54 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003e64:	0003      	movs	r3, r0
 8003e66:	61fb      	str	r3, [r7, #28]
            break;
 8003e68:	e023      	b.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	401a      	ands	r2, r3
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d10f      	bne.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003e7e:	61fb      	str	r3, [r7, #28]
            break;
 8003e80:	e00c      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e82:	4a07      	ldr	r2, [pc, #28]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003e84:	2390      	movs	r3, #144	@ 0x90
 8003e86:	58d3      	ldr	r3, [r2, r3]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d10f      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	61fb      	str	r3, [r7, #28]
            break;
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	e26f      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	e26d      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	0001e848 	.word	0x0001e848
 8003ea8:	08005dec 	.word	0x08005dec
 8003eac:	00f42400 	.word	0x00f42400
            break;
 8003eb0:	46c0      	nop			@ (mov r8, r8)
        break;
 8003eb2:	e263      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8003eb4:	4ac1      	ldr	r2, [pc, #772]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003eb6:	2388      	movs	r3, #136	@ 0x88
 8003eb8:	58d2      	ldr	r2, [r2, r3]
 8003eba:	23c0      	movs	r3, #192	@ 0xc0
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	23c0      	movs	r3, #192	@ 0xc0
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d02d      	beq.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	23c0      	movs	r3, #192	@ 0xc0
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d833      	bhi.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d017      	beq.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d829      	bhi.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 8003efa:	e020      	b.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7ff faac 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003f00:	0003      	movs	r3, r0
 8003f02:	61fb      	str	r3, [r7, #28]
            break;
 8003f04:	e020      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 8003f06:	f7ff fa01 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	61fb      	str	r3, [r7, #28]
            break;
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f10:	4baa      	ldr	r3, [pc, #680]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	@ 0x80
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	401a      	ands	r2, r3
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d10f      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 8003f22:	4ba7      	ldr	r3, [pc, #668]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003f24:	61fb      	str	r3, [r7, #28]
            break;
 8003f26:	e00c      	b.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f28:	4aa4      	ldr	r2, [pc, #656]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003f2a:	2390      	movs	r3, #144	@ 0x90
 8003f2c:	58d3      	ldr	r3, [r2, r3]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	61fb      	str	r3, [r7, #28]
            break;
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	e21c      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	e21a      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003f46:	46c0      	nop			@ (mov r8, r8)
        break;
 8003f48:	e218      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003f4a:	4a9c      	ldr	r2, [pc, #624]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003f4c:	2388      	movs	r3, #136	@ 0x88
 8003f4e:	58d2      	ldr	r2, [r2, r3]
 8003f50:	23c0      	movs	r3, #192	@ 0xc0
 8003f52:	059b      	lsls	r3, r3, #22
 8003f54:	4013      	ands	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	059b      	lsls	r3, r3, #22
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d012      	beq.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	059b      	lsls	r3, r3, #22
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d825      	bhi.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	2380      	movs	r3, #128	@ 0x80
 8003f76:	055b      	lsls	r3, r3, #21
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d014      	beq.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 8003f7c:	e01c      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 8003f7e:	f7ff f9c5 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003f82:	0003      	movs	r3, r0
 8003f84:	61fb      	str	r3, [r7, #28]
            break;
 8003f86:	e018      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f88:	4b8c      	ldr	r3, [pc, #560]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	401a      	ands	r2, r3
 8003f92:	2380      	movs	r3, #128	@ 0x80
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d102      	bne.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 8003f9a:	4b89      	ldr	r3, [pc, #548]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8003f9c:	61fb      	str	r3, [r7, #28]
            break;
 8003f9e:	e00c      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
            break;
 8003fa4:	e009      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003fa6:	2408      	movs	r4, #8
 8003fa8:	193b      	adds	r3, r7, r4
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 f9f4 	bl	8004398 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8003fb0:	193b      	adds	r3, r7, r4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	61fb      	str	r3, [r7, #28]
            break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8003fb8:	46c0      	nop			@ (mov r8, r8)
        break;
 8003fba:	e1df      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003fbc:	4a7f      	ldr	r2, [pc, #508]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003fbe:	2388      	movs	r3, #136	@ 0x88
 8003fc0:	58d2      	ldr	r2, [r2, r3]
 8003fc2:	23c0      	movs	r3, #192	@ 0xc0
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	019b      	lsls	r3, r3, #6
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d017      	beq.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d81e      	bhi.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	2380      	movs	r3, #128	@ 0x80
 8003fe8:	015b      	lsls	r3, r3, #5
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d005      	beq.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 8003fee:	e015      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7ff fa32 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	61fb      	str	r3, [r7, #28]
            break;
 8003ff8:	e013      	b.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7ff f987 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003ffe:	0003      	movs	r3, r0
 8004000:	61fb      	str	r3, [r7, #28]
            break;
 8004002:	e00e      	b.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004004:	4b6d      	ldr	r3, [pc, #436]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	401a      	ands	r2, r3
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	429a      	cmp	r2, r3
 8004014:	d104      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 8004016:	4b6a      	ldr	r3, [pc, #424]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8004018:	61fb      	str	r3, [r7, #28]
            break;
 800401a:	e001      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	e1ad      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8004020:	46c0      	nop			@ (mov r8, r8)
        break;
 8004022:	e1ab      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004024:	4a65      	ldr	r2, [pc, #404]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8004026:	2388      	movs	r3, #136	@ 0x88
 8004028:	58d2      	ldr	r2, [r2, r3]
 800402a:	23c0      	movs	r3, #192	@ 0xc0
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	4013      	ands	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	429a      	cmp	r2, r3
 800403a:	d017      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	029b      	lsls	r3, r3, #10
 8004042:	429a      	cmp	r2, r3
 8004044:	d81e      	bhi.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	025b      	lsls	r3, r3, #9
 8004052:	429a      	cmp	r2, r3
 8004054:	d005      	beq.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 8004056:	e015      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004058:	f7ff f9fe 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 800405c:	0003      	movs	r3, r0
 800405e:	61fb      	str	r3, [r7, #28]
            break;
 8004060:	e013      	b.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 8004062:	f7ff f953 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004066:	0003      	movs	r3, r0
 8004068:	61fb      	str	r3, [r7, #28]
            break;
 800406a:	e00e      	b.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800406c:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	401a      	ands	r2, r3
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	429a      	cmp	r2, r3
 800407c:	d104      	bne.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 800407e:	4b50      	ldr	r3, [pc, #320]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8004080:	61fb      	str	r3, [r7, #28]
            break;
 8004082:	e001      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	e179      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8004088:	46c0      	nop			@ (mov r8, r8)
        break;
 800408a:	e177      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800408c:	4a4b      	ldr	r2, [pc, #300]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800408e:	2388      	movs	r3, #136	@ 0x88
 8004090:	58d2      	ldr	r2, [r2, r3]
 8004092:	23c0      	movs	r3, #192	@ 0xc0
 8004094:	031b      	lsls	r3, r3, #12
 8004096:	4013      	ands	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	23c0      	movs	r3, #192	@ 0xc0
 800409e:	031b      	lsls	r3, r3, #12
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d03d      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	23c0      	movs	r3, #192	@ 0xc0
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d843      	bhi.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	031b      	lsls	r3, r3, #12
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d027      	beq.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	429a      	cmp	r2, r3
 80040c0:	d839      	bhi.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	02db      	lsls	r3, r3, #11
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d005      	beq.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 80040d2:	e030      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7ff f9c0 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 80040d8:	0003      	movs	r3, r0
 80040da:	61fb      	str	r3, [r7, #28]
            break;
 80040dc:	e032      	b.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80040de:	4a37      	ldr	r2, [pc, #220]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80040e0:	2394      	movs	r3, #148	@ 0x94
 80040e2:	58d3      	ldr	r3, [r2, r3]
 80040e4:	2202      	movs	r2, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d126      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80040ec:	4a33      	ldr	r2, [pc, #204]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80040ee:	2394      	movs	r3, #148	@ 0x94
 80040f0:	58d3      	ldr	r3, [r2, r3]
 80040f2:	2204      	movs	r2, #4
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d102      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 80040fa:	23fa      	movs	r3, #250	@ 0xfa
 80040fc:	61fb      	str	r3, [r7, #28]
            break;
 80040fe:	e01c      	b.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 8004100:	23fa      	movs	r3, #250	@ 0xfa
 8004102:	01db      	lsls	r3, r3, #7
 8004104:	61fb      	str	r3, [r7, #28]
            break;
 8004106:	e018      	b.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004108:	4b2c      	ldr	r3, [pc, #176]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	@ 0x80
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	401a      	ands	r2, r3
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	429a      	cmp	r2, r3
 8004118:	d111      	bne.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 800411a:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 800411c:	61fb      	str	r3, [r7, #28]
            break;
 800411e:	e00e      	b.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004120:	4a26      	ldr	r2, [pc, #152]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8004122:	2390      	movs	r3, #144	@ 0x90
 8004124:	58d3      	ldr	r3, [r2, r3]
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d109      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	61fb      	str	r3, [r7, #28]
            break;
 8004134:	e005      	b.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	e120      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	e11e      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	e11c      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8004142:	46c0      	nop			@ (mov r8, r8)
        break;
 8004144:	e11a      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004146:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8004148:	2388      	movs	r3, #136	@ 0x88
 800414a:	58d2      	ldr	r2, [r2, r3]
 800414c:	23c0      	movs	r3, #192	@ 0xc0
 800414e:	039b      	lsls	r3, r3, #14
 8004150:	4013      	ands	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	23c0      	movs	r3, #192	@ 0xc0
 8004158:	039b      	lsls	r3, r3, #14
 800415a:	429a      	cmp	r2, r3
 800415c:	d042      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	23c0      	movs	r3, #192	@ 0xc0
 8004162:	039b      	lsls	r3, r3, #14
 8004164:	429a      	cmp	r2, r3
 8004166:	d848      	bhi.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	2380      	movs	r3, #128	@ 0x80
 800416c:	039b      	lsls	r3, r3, #14
 800416e:	429a      	cmp	r2, r3
 8004170:	d02c      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	039b      	lsls	r3, r3, #14
 8004178:	429a      	cmp	r2, r3
 800417a:	d83e      	bhi.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	035b      	lsls	r3, r3, #13
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 800418c:	e035      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800418e:	f7ff f963 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8004192:	0003      	movs	r3, r0
 8004194:	61fb      	str	r3, [r7, #28]
            break;
 8004196:	e037      	b.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004198:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800419a:	2394      	movs	r3, #148	@ 0x94
 800419c:	58d3      	ldr	r3, [r2, r3]
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d12b      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80041a6:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80041a8:	2394      	movs	r3, #148	@ 0x94
 80041aa:	58d3      	ldr	r3, [r2, r3]
 80041ac:	2204      	movs	r2, #4
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d107      	bne.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 80041b4:	23fa      	movs	r3, #250	@ 0xfa
 80041b6:	61fb      	str	r3, [r7, #28]
            break;
 80041b8:	e021      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	40021000 	.word	0x40021000
 80041c0:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 80041c4:	23fa      	movs	r3, #250	@ 0xfa
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	61fb      	str	r3, [r7, #28]
            break;
 80041ca:	e018      	b.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	401a      	ands	r2, r3
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	429a      	cmp	r2, r3
 80041dc:	d111      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 80041de:	4b6b      	ldr	r3, [pc, #428]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80041e0:	61fb      	str	r3, [r7, #28]
            break;
 80041e2:	e00e      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041e4:	4a68      	ldr	r2, [pc, #416]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80041e6:	2390      	movs	r3, #144	@ 0x90
 80041e8:	58d3      	ldr	r3, [r2, r3]
 80041ea:	2202      	movs	r2, #2
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d109      	bne.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	61fb      	str	r3, [r7, #28]
            break;
 80041f8:	e005      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	e0be      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	e0bc      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	e0ba      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8004206:	46c0      	nop			@ (mov r8, r8)
        break;
 8004208:	e0b8      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 800420a:	4a5f      	ldr	r2, [pc, #380]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800420c:	2388      	movs	r3, #136	@ 0x88
 800420e:	58d2      	ldr	r2, [r2, r3]
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	045b      	lsls	r3, r3, #17
 8004214:	4013      	ands	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	2380      	movs	r3, #128	@ 0x80
 8004222:	045b      	lsls	r3, r3, #17
 8004224:	429a      	cmp	r2, r3
 8004226:	d011      	beq.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 8004228:	e019      	b.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800422a:	4b57      	ldr	r3, [pc, #348]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	23e0      	movs	r3, #224	@ 0xe0
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4013      	ands	r3, r2
 8004234:	d104      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 8004236:	f7ff f90f 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 800423a:	0003      	movs	r3, r0
 800423c:	61fb      	str	r3, [r7, #28]
            break;
 800423e:	e00e      	b.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8004240:	f7ff f90a 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8004244:	0003      	movs	r3, r0
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
            break;
 800424a:	e008      	b.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800424c:	2408      	movs	r4, #8
 800424e:	193b      	adds	r3, r7, r4
 8004250:	0018      	movs	r0, r3
 8004252:	f000 f8a1 	bl	8004398 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8004256:	193b      	adds	r3, r7, r4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	61fb      	str	r3, [r7, #28]
            break;
 800425c:	46c0      	nop			@ (mov r8, r8)
        break;
 800425e:	e08d      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8004260:	4a49      	ldr	r2, [pc, #292]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004262:	2388      	movs	r3, #136	@ 0x88
 8004264:	58d2      	ldr	r2, [r2, r3]
 8004266:	2380      	movs	r3, #128	@ 0x80
 8004268:	049b      	lsls	r3, r3, #18
 800426a:	4013      	ands	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	049b      	lsls	r3, r3, #18
 800427a:	429a      	cmp	r2, r3
 800427c:	d011      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 800427e:	e019      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8004280:	4b41      	ldr	r3, [pc, #260]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	23e0      	movs	r3, #224	@ 0xe0
 8004286:	01db      	lsls	r3, r3, #7
 8004288:	4013      	ands	r3, r2
 800428a:	d104      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 800428c:	f7ff f8e4 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8004290:	0003      	movs	r3, r0
 8004292:	61fb      	str	r3, [r7, #28]
            break;
 8004294:	e00e      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8004296:	f7ff f8df 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 800429a:	0003      	movs	r3, r0
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
            break;
 80042a0:	e008      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80042a2:	2408      	movs	r4, #8
 80042a4:	193b      	adds	r3, r7, r4
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f876 	bl	8004398 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	61fb      	str	r3, [r7, #28]
            break;
 80042b2:	46c0      	nop			@ (mov r8, r8)
        break;
 80042b4:	e062      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80042b6:	4a34      	ldr	r2, [pc, #208]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80042b8:	2388      	movs	r3, #136	@ 0x88
 80042ba:	58d2      	ldr	r2, [r2, r3]
 80042bc:	23c0      	movs	r3, #192	@ 0xc0
 80042be:	051b      	lsls	r3, r3, #20
 80042c0:	4013      	ands	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	23c0      	movs	r3, #192	@ 0xc0
 80042c8:	051b      	lsls	r3, r3, #20
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d017      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	23c0      	movs	r3, #192	@ 0xc0
 80042d2:	051b      	lsls	r3, r3, #20
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d844      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	2380      	movs	r3, #128	@ 0x80
 80042dc:	051b      	lsls	r3, r3, #20
 80042de:	429a      	cmp	r2, r3
 80042e0:	d033      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	051b      	lsls	r3, r3, #20
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d83a      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d034      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	04db      	lsls	r3, r3, #19
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d003      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 80042fc:	e031      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004300:	61fb      	str	r3, [r7, #28]
            break;
 8004302:	e031      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004304:	4b20      	ldr	r3, [pc, #128]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2202      	movs	r2, #2
 800430a:	4013      	ands	r3, r2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d12a      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8004310:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	4013      	ands	r3, r2
 8004318:	d005      	beq.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800431a:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	220f      	movs	r2, #15
 8004322:	4013      	ands	r3, r2
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004328:	2394      	movs	r3, #148	@ 0x94
 800432a:	58d3      	ldr	r3, [r2, r3]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	220f      	movs	r2, #15
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b0b      	cmp	r3, #11
 8004338:	d901      	bls.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 800433a:	230b      	movs	r3, #11
 800433c:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	58d3      	ldr	r3, [r2, r3]
 8004346:	61fb      	str	r3, [r7, #28]
            break;
 8004348:	e00d      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800434a:	2408      	movs	r4, #8
 800434c:	193b      	adds	r3, r7, r4
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f822 	bl	8004398 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8004354:	193b      	adds	r3, r7, r4
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	61fb      	str	r3, [r7, #28]
            break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
            break;
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8004366:	46c0      	nop			@ (mov r8, r8)
        break;
 8004368:	e008      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	e006      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	e004      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	e002      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	e000      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800437a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 800437c:	69fb      	ldr	r3, [r7, #28]
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b009      	add	sp, #36	@ 0x24
 8004384:	bd90      	pop	{r4, r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	40021000 	.word	0x40021000
 800438c:	00f42400 	.word	0x00f42400
 8004390:	02dc6c00 	.word	0x02dc6c00
 8004394:	08005d7c 	.word	0x08005d7c

08004398 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a0:	4b58      	ldr	r3, [pc, #352]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	227f      	movs	r2, #127	@ 0x7f
 80043a8:	4013      	ands	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043ac:	4b55      	ldr	r3, [pc, #340]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2203      	movs	r2, #3
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80043b6:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	2207      	movs	r2, #7
 80043be:	4013      	ands	r3, r2
 80043c0:	3301      	adds	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80043c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	4013      	ands	r3, r2
 80043cc:	d005      	beq.n	80043da <HAL_RCCEx_GetPLLClockFreq+0x42>
 80043ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	220f      	movs	r2, #15
 80043d6:	4013      	ands	r3, r2
 80043d8:	e005      	b.n	80043e6 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80043da:	4a4a      	ldr	r2, [pc, #296]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80043dc:	2394      	movs	r3, #148	@ 0x94
 80043de:	58d3      	ldr	r3, [r2, r3]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	220f      	movs	r2, #15
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0b      	cmp	r3, #11
 80043ec:	d901      	bls.n	80043f2 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80043ee:	230b      	movs	r3, #11
 80043f0:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d020      	beq.n	800443a <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d827      	bhi.n	800444e <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d00c      	beq.n	800441e <HAL_RCCEx_GetPLLClockFreq+0x86>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d121      	bne.n	800444e <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	483e      	ldr	r0, [pc, #248]	@ (8004508 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 800440e:	f7fb fe8d 	bl	800012c <__udivsi3>
 8004412:	0003      	movs	r3, r0
 8004414:	001a      	movs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4353      	muls	r3, r2
 800441a:	61fb      	str	r3, [r7, #28]
      break;
 800441c:	e025      	b.n	800446a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800441e:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	0092      	lsls	r2, r2, #2
 8004424:	58d3      	ldr	r3, [r2, r3]
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fb fe7f 	bl	800012c <__udivsi3>
 800442e:	0003      	movs	r3, r0
 8004430:	001a      	movs	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4353      	muls	r3, r2
 8004436:	61fb      	str	r3, [r7, #28]
      break;
 8004438:	e017      	b.n	800446a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	4834      	ldr	r0, [pc, #208]	@ (8004510 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 800443e:	f7fb fe75 	bl	800012c <__udivsi3>
 8004442:	0003      	movs	r3, r0
 8004444:	001a      	movs	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	4353      	muls	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]
      break;
 800444c:	e00d      	b.n	800446a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800444e:	4b2f      	ldr	r3, [pc, #188]	@ (800450c <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	0092      	lsls	r2, r2, #2
 8004454:	58d3      	ldr	r3, [r2, r3]
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	0018      	movs	r0, r3
 800445a:	f7fb fe67 	bl	800012c <__udivsi3>
 800445e:	0003      	movs	r3, r0
 8004460:	001a      	movs	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4353      	muls	r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
      break;
 8004468:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 800446a:	4b26      	ldr	r3, [pc, #152]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	025b      	lsls	r3, r3, #9
 8004472:	4013      	ands	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8004476:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8004478:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 800447a:	0c5b      	lsrs	r3, r3, #17
 800447c:	221f      	movs	r2, #31
 800447e:	4013      	ands	r3, r2
 8004480:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8004482:	0019      	movs	r1, r3
 8004484:	69f8      	ldr	r0, [r7, #28]
 8004486:	f7fb fe51 	bl	800012c <__udivsi3>
 800448a:	0003      	movs	r3, r0
 800448c:	001a      	movs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e002      	b.n	800449a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 800449a:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	045b      	lsls	r3, r3, #17
 80044a2:	4013      	ands	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80044a6:	4b17      	ldr	r3, [pc, #92]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80044a8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80044aa:	0e5b      	lsrs	r3, r3, #25
 80044ac:	2207      	movs	r2, #7
 80044ae:	4013      	ands	r3, r2
 80044b0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80044b2:	0019      	movs	r1, r3
 80044b4:	69f8      	ldr	r0, [r7, #28]
 80044b6:	f7fb fe39 	bl	800012c <__udivsi3>
 80044ba:	0003      	movs	r3, r0
 80044bc:	001a      	movs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	e002      	b.n	80044ca <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80044ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	2380      	movs	r3, #128	@ 0x80
 80044d0:	055b      	lsls	r3, r3, #21
 80044d2:	4013      	ands	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80044d8:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80044da:	0f5b      	lsrs	r3, r3, #29
 80044dc:	2207      	movs	r2, #7
 80044de:	4013      	ands	r3, r2
 80044e0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80044e2:	0019      	movs	r1, r3
 80044e4:	69f8      	ldr	r0, [r7, #28]
 80044e6:	f7fb fe21 	bl	800012c <__udivsi3>
 80044ea:	0003      	movs	r3, r0
 80044ec:	001a      	movs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b008      	add	sp, #32
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	40021000 	.word	0x40021000
 8004508:	00f42400 	.word	0x00f42400
 800450c:	08005d7c 	.word	0x08005d7c
 8004510:	003d0900 	.word	0x003d0900

08004514 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800451c:	210f      	movs	r1, #15
 800451e:	187b      	adds	r3, r7, r1
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d100      	bne.n	800452c <HAL_RTC_Init+0x18>
 800452a:	e08b      	b.n	8004644 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 800452c:	187b      	adds	r3, r7, r1
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	222d      	movs	r2, #45	@ 0x2d
 8004536:	5c9b      	ldrb	r3, [r3, r2]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	222c      	movs	r2, #44	@ 0x2c
 8004542:	2100      	movs	r1, #0
 8004544:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7fc fb7d 	bl	8000c48 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	222d      	movs	r2, #45	@ 0x2d
 8004552:	2102      	movs	r1, #2
 8004554:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004556:	4b3f      	ldr	r3, [pc, #252]	@ (8004654 <HAL_RTC_Init+0x140>)
 8004558:	22ca      	movs	r2, #202	@ 0xca
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24
 800455c:	4b3d      	ldr	r3, [pc, #244]	@ (8004654 <HAL_RTC_Init+0x140>)
 800455e:	2253      	movs	r2, #83	@ 0x53
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f000 f8a1 	bl	80046ac <RTC_EnterInitMode>
 800456a:	1e03      	subs	r3, r0, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800456e:	4b39      	ldr	r3, [pc, #228]	@ (8004654 <HAL_RTC_Init+0x140>)
 8004570:	22ff      	movs	r2, #255	@ 0xff
 8004572:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	222d      	movs	r2, #45	@ 0x2d
 8004578:	2104      	movs	r1, #4
 800457a:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 800457c:	230f      	movs	r3, #15
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e05e      	b.n	8004644 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004586:	4b33      	ldr	r3, [pc, #204]	@ (8004654 <HAL_RTC_Init+0x140>)
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	4b32      	ldr	r3, [pc, #200]	@ (8004654 <HAL_RTC_Init+0x140>)
 800458c:	4932      	ldr	r1, [pc, #200]	@ (8004658 <HAL_RTC_Init+0x144>)
 800458e:	400a      	ands	r2, r1
 8004590:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004592:	4b30      	ldr	r3, [pc, #192]	@ (8004654 <HAL_RTC_Init+0x140>)
 8004594:	6999      	ldr	r1, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68d9      	ldr	r1, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	041a      	lsls	r2, r3, #16
 80045b6:	4b27      	ldr	r3, [pc, #156]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045b8:	430a      	orrs	r2, r1
 80045ba:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80045bc:	4b25      	ldr	r3, [pc, #148]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a26      	ldr	r2, [pc, #152]	@ (800465c <HAL_RTC_Init+0x148>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	431a      	orrs	r2, r3
 80045d0:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045dc:	2180      	movs	r1, #128	@ 0x80
 80045de:	438a      	bics	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80045e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2220      	movs	r2, #32
 80045e8:	4013      	ands	r3, r2
 80045ea:	d110      	bne.n	800460e <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 f836 	bl	8004660 <HAL_RTC_WaitForSynchro>
 80045f4:	1e03      	subs	r3, r0, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f8:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <HAL_RTC_Init+0x140>)
 80045fa:	22ff      	movs	r2, #255	@ 0xff
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	222d      	movs	r2, #45	@ 0x2d
 8004602:	2104      	movs	r1, #4
 8004604:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8004606:	230f      	movs	r3, #15
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 800460e:	230f      	movs	r3, #15
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d115      	bne.n	8004644 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8004618:	4b0e      	ldr	r3, [pc, #56]	@ (8004654 <HAL_RTC_Init+0x140>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	08d9      	lsrs	r1, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	431a      	orrs	r2, r3
 8004630:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <HAL_RTC_Init+0x140>)
 8004632:	430a      	orrs	r2, r1
 8004634:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004636:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <HAL_RTC_Init+0x140>)
 8004638:	22ff      	movs	r2, #255	@ 0xff
 800463a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	222d      	movs	r2, #45	@ 0x2d
 8004640:	2101      	movs	r1, #1
 8004642:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8004644:	230f      	movs	r3, #15
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	40002800 	.word	0x40002800
 8004658:	fb8fffbf 	.word	0xfb8fffbf
 800465c:	ffffe0ff 	.word	0xffffe0ff

08004660 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004668:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <HAL_RTC_WaitForSynchro+0x48>)
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <HAL_RTC_WaitForSynchro+0x48>)
 800466e:	2120      	movs	r1, #32
 8004670:	438a      	bics	r2, r1
 8004672:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004674:	f7fd f812 	bl	800169c <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800467c:	e00a      	b.n	8004694 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800467e:	f7fd f80d 	bl	800169c <HAL_GetTick>
 8004682:	0002      	movs	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	23fa      	movs	r3, #250	@ 0xfa
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d901      	bls.n	8004694 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e005      	b.n	80046a0 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <HAL_RTC_WaitForSynchro+0x48>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	4013      	ands	r3, r2
 800469c:	d0ef      	beq.n	800467e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40002800 	.word	0x40002800

080046ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80046b4:	4b12      	ldr	r3, [pc, #72]	@ (8004700 <RTC_EnterInitMode+0x54>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2240      	movs	r2, #64	@ 0x40
 80046ba:	4013      	ands	r3, r2
 80046bc:	d11a      	bne.n	80046f4 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80046be:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <RTC_EnterInitMode+0x54>)
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004700 <RTC_EnterInitMode+0x54>)
 80046c4:	2180      	movs	r1, #128	@ 0x80
 80046c6:	430a      	orrs	r2, r1
 80046c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046ca:	f7fc ffe7 	bl	800169c <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80046d2:	e00a      	b.n	80046ea <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80046d4:	f7fc ffe2 	bl	800169c <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad2      	subs	r2, r2, r3
 80046de:	23fa      	movs	r3, #250	@ 0xfa
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d901      	bls.n	80046ea <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e005      	b.n	80046f6 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <RTC_EnterInitMode+0x54>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	4013      	ands	r3, r2
 80046f2:	d0ef      	beq.n	80046d4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b004      	add	sp, #16
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	40002800 	.word	0x40002800

08004704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e046      	b.n	80047a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2288      	movs	r2, #136	@ 0x88
 800471a:	589b      	ldr	r3, [r3, r2]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2284      	movs	r2, #132	@ 0x84
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f7fc facc 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2288      	movs	r2, #136	@ 0x88
 8004734:	2124      	movs	r1, #36	@ 0x24
 8004736:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	0018      	movs	r0, r3
 8004754:	f000 fa8a 	bl	8004c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f8cc 	bl	80048f8 <UART_SetConfig>
 8004760:	0003      	movs	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e01c      	b.n	80047a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	490d      	ldr	r1, [pc, #52]	@ (80047ac <HAL_UART_Init+0xa8>)
 8004776:	400a      	ands	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	212a      	movs	r1, #42	@ 0x2a
 8004786:	438a      	bics	r2, r1
 8004788:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 fb19 	bl	8004dd4 <UART_CheckIdleState>
 80047a2:	0003      	movs	r3, r0
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	ffffb7ff 	.word	0xffffb7ff

080047b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	@ 0x28
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	1dbb      	adds	r3, r7, #6
 80047be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2288      	movs	r2, #136	@ 0x88
 80047c4:	589b      	ldr	r3, [r3, r2]
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d000      	beq.n	80047cc <HAL_UART_Transmit+0x1c>
 80047ca:	e090      	b.n	80048ee <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_Transmit+0x2a>
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e088      	b.n	80048f0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	015b      	lsls	r3, r3, #5
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d109      	bne.n	80047fe <HAL_UART_Transmit+0x4e>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d001      	beq.n	80047fe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e078      	b.n	80048f0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2290      	movs	r2, #144	@ 0x90
 8004802:	2100      	movs	r1, #0
 8004804:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2288      	movs	r2, #136	@ 0x88
 800480a:	2121      	movs	r1, #33	@ 0x21
 800480c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480e:	f7fc ff45 	bl	800169c <HAL_GetTick>
 8004812:	0003      	movs	r3, r0
 8004814:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1dba      	adds	r2, r7, #6
 800481a:	2154      	movs	r1, #84	@ 0x54
 800481c:	8812      	ldrh	r2, [r2, #0]
 800481e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1dba      	adds	r2, r7, #6
 8004824:	2156      	movs	r1, #86	@ 0x56
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	015b      	lsls	r3, r3, #5
 8004832:	429a      	cmp	r2, r3
 8004834:	d108      	bne.n	8004848 <HAL_UART_Transmit+0x98>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e003      	b.n	8004850 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004850:	e030      	b.n	80048b4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	0013      	movs	r3, r2
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	f000 fb62 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004864:	1e03      	subs	r3, r0, #0
 8004866:	d005      	beq.n	8004874 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2288      	movs	r2, #136	@ 0x88
 800486c:	2120      	movs	r1, #32
 800486e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e03d      	b.n	80048f0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	001a      	movs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	05d2      	lsls	r2, r2, #23
 8004886:	0dd2      	lsrs	r2, r2, #23
 8004888:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	3302      	adds	r3, #2
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e007      	b.n	80048a2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2256      	movs	r2, #86	@ 0x56
 80048a6:	5a9b      	ldrh	r3, [r3, r2]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b299      	uxth	r1, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2256      	movs	r2, #86	@ 0x56
 80048b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2256      	movs	r2, #86	@ 0x56
 80048b8:	5a9b      	ldrh	r3, [r3, r2]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1c8      	bne.n	8004852 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	0013      	movs	r3, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	2140      	movs	r1, #64	@ 0x40
 80048ce:	f000 fb2b 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2288      	movs	r2, #136	@ 0x88
 80048da:	2120      	movs	r1, #32
 80048dc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e006      	b.n	80048f0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2288      	movs	r2, #136	@ 0x88
 80048e6:	2120      	movs	r1, #32
 80048e8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b008      	add	sp, #32
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b5b0      	push	{r4, r5, r7, lr}
 80048fa:	b092      	sub	sp, #72	@ 0x48
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004900:	231f      	movs	r3, #31
 8004902:	2220      	movs	r2, #32
 8004904:	189b      	adds	r3, r3, r2
 8004906:	19db      	adds	r3, r3, r7
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	431a      	orrs	r2, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4ac6      	ldr	r2, [pc, #792]	@ (8004c44 <UART_SetConfig+0x34c>)
 800492c:	4013      	ands	r3, r2
 800492e:	0019      	movs	r1, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	430b      	orrs	r3, r1
 8004938:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4ac1      	ldr	r2, [pc, #772]	@ (8004c48 <UART_SetConfig+0x350>)
 8004942:	4013      	ands	r3, r2
 8004944:	0018      	movs	r0, r3
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	68d9      	ldr	r1, [r3, #12]
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	0003      	movs	r3, r0
 8004950:	430b      	orrs	r3, r1
 8004952:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4abb      	ldr	r2, [pc, #748]	@ (8004c4c <UART_SetConfig+0x354>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <UART_SetConfig+0x80>
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4ab9      	ldr	r2, [pc, #740]	@ (8004c50 <UART_SetConfig+0x358>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004974:	4313      	orrs	r3, r2
 8004976:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4ab5      	ldr	r2, [pc, #724]	@ (8004c54 <UART_SetConfig+0x35c>)
 8004980:	4013      	ands	r3, r2
 8004982:	0019      	movs	r1, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498a:	430b      	orrs	r3, r1
 800498c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	220f      	movs	r2, #15
 8004996:	4393      	bics	r3, r2
 8004998:	0018      	movs	r0, r3
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	0003      	movs	r3, r0
 80049a4:	430b      	orrs	r3, r1
 80049a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4aaa      	ldr	r2, [pc, #680]	@ (8004c58 <UART_SetConfig+0x360>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d102      	bne.n	80049b8 <UART_SetConfig+0xc0>
 80049b2:	2301      	movs	r3, #1
 80049b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b6:	e02b      	b.n	8004a10 <UART_SetConfig+0x118>
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4aa7      	ldr	r2, [pc, #668]	@ (8004c5c <UART_SetConfig+0x364>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d102      	bne.n	80049c8 <UART_SetConfig+0xd0>
 80049c2:	2302      	movs	r3, #2
 80049c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049c6:	e023      	b.n	8004a10 <UART_SetConfig+0x118>
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4aa4      	ldr	r2, [pc, #656]	@ (8004c60 <UART_SetConfig+0x368>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d103      	bne.n	80049da <UART_SetConfig+0xe2>
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	025b      	lsls	r3, r3, #9
 80049d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049d8:	e01a      	b.n	8004a10 <UART_SetConfig+0x118>
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4aa1      	ldr	r2, [pc, #644]	@ (8004c64 <UART_SetConfig+0x36c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <UART_SetConfig+0xf4>
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049ea:	e011      	b.n	8004a10 <UART_SetConfig+0x118>
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a96      	ldr	r2, [pc, #600]	@ (8004c4c <UART_SetConfig+0x354>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d102      	bne.n	80049fc <UART_SetConfig+0x104>
 80049f6:	2310      	movs	r3, #16
 80049f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049fa:	e009      	b.n	8004a10 <UART_SetConfig+0x118>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a93      	ldr	r2, [pc, #588]	@ (8004c50 <UART_SetConfig+0x358>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d102      	bne.n	8004a0c <UART_SetConfig+0x114>
 8004a06:	2308      	movs	r3, #8
 8004a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0a:	e001      	b.n	8004a10 <UART_SetConfig+0x118>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a8d      	ldr	r2, [pc, #564]	@ (8004c4c <UART_SetConfig+0x354>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d005      	beq.n	8004a26 <UART_SetConfig+0x12e>
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a8c      	ldr	r2, [pc, #560]	@ (8004c50 <UART_SetConfig+0x358>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d000      	beq.n	8004a26 <UART_SetConfig+0x12e>
 8004a24:	e06f      	b.n	8004b06 <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7ff f88d 	bl	8003b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d100      	bne.n	8004a3a <UART_SetConfig+0x142>
 8004a38:	e0ec      	b.n	8004c14 <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a3e:	4b8a      	ldr	r3, [pc, #552]	@ (8004c68 <UART_SetConfig+0x370>)
 8004a40:	0052      	lsls	r2, r2, #1
 8004a42:	5ad3      	ldrh	r3, [r2, r3]
 8004a44:	0019      	movs	r1, r3
 8004a46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a48:	f7fb fb70 	bl	800012c <__udivsi3>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	0013      	movs	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	189b      	adds	r3, r3, r2
 8004a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d305      	bcc.n	8004a6c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d906      	bls.n	8004a7a <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8004a6c:	231f      	movs	r3, #31
 8004a6e:	2220      	movs	r2, #32
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	19db      	adds	r3, r3, r7
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e044      	b.n	8004b04 <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a86:	4b78      	ldr	r3, [pc, #480]	@ (8004c68 <UART_SetConfig+0x370>)
 8004a88:	0052      	lsls	r2, r2, #1
 8004a8a:	5ad3      	ldrh	r3, [r2, r3]
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	69b8      	ldr	r0, [r7, #24]
 8004a98:	69f9      	ldr	r1, [r7, #28]
 8004a9a:	f7fb fcbd 	bl	8000418 <__aeabi_uldivmod>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	000b      	movs	r3, r1
 8004aa2:	0e11      	lsrs	r1, r2, #24
 8004aa4:	021d      	lsls	r5, r3, #8
 8004aa6:	430d      	orrs	r5, r1
 8004aa8:	0214      	lsls	r4, r2, #8
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68b8      	ldr	r0, [r7, #8]
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	1900      	adds	r0, r0, r4
 8004abc:	4169      	adcs	r1, r5
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f7fb fca4 	bl	8000418 <__aeabi_uldivmod>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	000b      	movs	r3, r1
 8004ad4:	0013      	movs	r3, r2
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ada:	23c0      	movs	r3, #192	@ 0xc0
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d309      	bcc.n	8004af6 <UART_SetConfig+0x1fe>
 8004ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	035b      	lsls	r3, r3, #13
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d204      	bcs.n	8004af6 <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e006      	b.n	8004b04 <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 8004af6:	231f      	movs	r3, #31
 8004af8:	2220      	movs	r2, #32
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	19db      	adds	r3, r3, r7
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004b02:	e087      	b.n	8004c14 <UART_SetConfig+0x31c>
 8004b04:	e086      	b.n	8004c14 <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d14c      	bne.n	8004bac <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7ff f817 	bl	8003b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d100      	bne.n	8004b26 <UART_SetConfig+0x22e>
 8004b24:	e076      	b.n	8004c14 <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <UART_SetConfig+0x370>)
 8004b2c:	0052      	lsls	r2, r2, #1
 8004b2e:	5ad3      	ldrh	r3, [r2, r3]
 8004b30:	0019      	movs	r1, r3
 8004b32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b34:	f7fb fafa 	bl	800012c <__udivsi3>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	005a      	lsls	r2, r3, #1
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	18d2      	adds	r2, r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	0019      	movs	r1, r3
 8004b4a:	0010      	movs	r0, r2
 8004b4c:	f7fb faee 	bl	800012c <__udivsi3>
 8004b50:	0003      	movs	r3, r0
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d921      	bls.n	8004b9e <UART_SetConfig+0x2a6>
 8004b5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	025b      	lsls	r3, r3, #9
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d21c      	bcs.n	8004b9e <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	2012      	movs	r0, #18
 8004b6a:	2420      	movs	r4, #32
 8004b6c:	1903      	adds	r3, r0, r4
 8004b6e:	19db      	adds	r3, r3, r7
 8004b70:	210f      	movs	r1, #15
 8004b72:	438a      	bics	r2, r1
 8004b74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b299      	uxth	r1, r3
 8004b82:	1903      	adds	r3, r0, r4
 8004b84:	19db      	adds	r3, r3, r7
 8004b86:	1902      	adds	r2, r0, r4
 8004b88:	19d2      	adds	r2, r2, r7
 8004b8a:	8812      	ldrh	r2, [r2, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1902      	adds	r2, r0, r4
 8004b96:	19d2      	adds	r2, r2, r7
 8004b98:	8812      	ldrh	r2, [r2, #0]
 8004b9a:	60da      	str	r2, [r3, #12]
 8004b9c:	e03a      	b.n	8004c14 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9e:	231f      	movs	r3, #31
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	19db      	adds	r3, r3, r7
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e033      	b.n	8004c14 <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fe ffca 	bl	8003b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d02a      	beq.n	8004c14 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bc2:	4b29      	ldr	r3, [pc, #164]	@ (8004c68 <UART_SetConfig+0x370>)
 8004bc4:	0052      	lsls	r2, r2, #1
 8004bc6:	5ad3      	ldrh	r3, [r2, r3]
 8004bc8:	0019      	movs	r1, r3
 8004bca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bcc:	f7fb faae 	bl	800012c <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	18d2      	adds	r2, r2, r3
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0019      	movs	r1, r3
 8004be2:	0010      	movs	r0, r2
 8004be4:	f7fb faa2 	bl	800012c <__udivsi3>
 8004be8:	0003      	movs	r3, r0
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d90a      	bls.n	8004c08 <UART_SetConfig+0x310>
 8004bf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bf4:	2380      	movs	r3, #128	@ 0x80
 8004bf6:	025b      	lsls	r3, r3, #9
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d205      	bcs.n	8004c08 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e005      	b.n	8004c14 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c08:	231f      	movs	r3, #31
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	19db      	adds	r3, r3, r7
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	226a      	movs	r2, #106	@ 0x6a
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	2268      	movs	r2, #104	@ 0x68
 8004c20:	2101      	movs	r1, #1
 8004c22:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	2200      	movs	r2, #0
 8004c28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c30:	231f      	movs	r3, #31
 8004c32:	2220      	movs	r2, #32
 8004c34:	189b      	adds	r3, r3, r2
 8004c36:	19db      	adds	r3, r3, r7
 8004c38:	781b      	ldrb	r3, [r3, #0]
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b012      	add	sp, #72	@ 0x48
 8004c40:	bdb0      	pop	{r4, r5, r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	cfff69f3 	.word	0xcfff69f3
 8004c48:	ffffcfff 	.word	0xffffcfff
 8004c4c:	40008000 	.word	0x40008000
 8004c50:	40008400 	.word	0x40008400
 8004c54:	11fff4ff 	.word	0x11fff4ff
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40004400 	.word	0x40004400
 8004c60:	40004800 	.word	0x40004800
 8004c64:	40004c00 	.word	0x40004c00
 8004c68:	08005e70 	.word	0x08005e70

08004c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a4a      	ldr	r2, [pc, #296]	@ (8004db0 <UART_AdvFeatureConfig+0x144>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4a43      	ldr	r2, [pc, #268]	@ (8004db4 <UART_AdvFeatureConfig+0x148>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004db8 <UART_AdvFeatureConfig+0x14c>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	2204      	movs	r2, #4
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a34      	ldr	r2, [pc, #208]	@ (8004dbc <UART_AdvFeatureConfig+0x150>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	2210      	movs	r2, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc0 <UART_AdvFeatureConfig+0x154>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	2220      	movs	r2, #32
 8004d24:	4013      	ands	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4a25      	ldr	r2, [pc, #148]	@ (8004dc4 <UART_AdvFeatureConfig+0x158>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	2240      	movs	r2, #64	@ 0x40
 8004d46:	4013      	ands	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <UART_AdvFeatureConfig+0x15c>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	0019      	movs	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	035b      	lsls	r3, r3, #13
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10b      	bne.n	8004d86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <UART_AdvFeatureConfig+0x160>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	2280      	movs	r2, #128	@ 0x80
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <UART_AdvFeatureConfig+0x164>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	ffff7fff 	.word	0xffff7fff
 8004db4:	fffdffff 	.word	0xfffdffff
 8004db8:	fffeffff 	.word	0xfffeffff
 8004dbc:	fffbffff 	.word	0xfffbffff
 8004dc0:	ffffefff 	.word	0xffffefff
 8004dc4:	ffffdfff 	.word	0xffffdfff
 8004dc8:	ffefffff 	.word	0xffefffff
 8004dcc:	ff9fffff 	.word	0xff9fffff
 8004dd0:	fff7ffff 	.word	0xfff7ffff

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b092      	sub	sp, #72	@ 0x48
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2290      	movs	r2, #144	@ 0x90
 8004de0:	2100      	movs	r1, #0
 8004de2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fc fc5a 	bl	800169c <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d12d      	bne.n	8004e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	2280      	movs	r2, #128	@ 0x80
 8004dfe:	0391      	lsls	r1, r2, #14
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4a47      	ldr	r2, [pc, #284]	@ (8004f20 <UART_CheckIdleState+0x14c>)
 8004e04:	9200      	str	r2, [sp, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f000 f88e 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	1e03      	subs	r3, r0, #0
 8004e0e:	d022      	beq.n	8004e56 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e10:	f3ef 8310 	mrs	r3, PRIMASK
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f383 8810 	msr	PRIMASK, r3
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2180      	movs	r1, #128	@ 0x80
 8004e32:	438a      	bics	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2288      	movs	r2, #136	@ 0x88
 8004e46:	2120      	movs	r1, #32
 8004e48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2284      	movs	r2, #132	@ 0x84
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e060      	b.n	8004f18 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d146      	bne.n	8004ef2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e66:	2280      	movs	r2, #128	@ 0x80
 8004e68:	03d1      	lsls	r1, r2, #15
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <UART_CheckIdleState+0x14c>)
 8004e6e:	9200      	str	r2, [sp, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f000 f859 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d03b      	beq.n	8004ef2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e80:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e84:	2301      	movs	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4922      	ldr	r1, [pc, #136]	@ (8004f24 <UART_CheckIdleState+0x150>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f383 8810 	msr	PRIMASK, r3
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004eac:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2101      	movs	r1, #1
 8004ece:	438a      	bics	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	228c      	movs	r2, #140	@ 0x8c
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2284      	movs	r2, #132	@ 0x84
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e012      	b.n	8004f18 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2288      	movs	r2, #136	@ 0x88
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	228c      	movs	r2, #140	@ 0x8c
 8004efe:	2120      	movs	r1, #32
 8004f00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2284      	movs	r2, #132	@ 0x84
 8004f12:	2100      	movs	r1, #0
 8004f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b010      	add	sp, #64	@ 0x40
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	01ffffff 	.word	0x01ffffff
 8004f24:	fffffedf 	.word	0xfffffedf

08004f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f38:	e051      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	d04e      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f40:	f7fc fbac 	bl	800169c <HAL_GetTick>
 8004f44:	0002      	movs	r2, r0
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e051      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2204      	movs	r2, #4
 8004f62:	4013      	ands	r3, r2
 8004f64:	d03b      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d038      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d035      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d111      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f83c 	bl	8005008 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2290      	movs	r2, #144	@ 0x90
 8004f94:	2108      	movs	r1, #8
 8004f96:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2284      	movs	r2, #132	@ 0x84
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e02c      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	401a      	ands	r2, r3
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d112      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2280      	movs	r2, #128	@ 0x80
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 f81f 	bl	8005008 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2290      	movs	r2, #144	@ 0x90
 8004fce:	2120      	movs	r1, #32
 8004fd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2284      	movs	r2, #132	@ 0x84
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e00f      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	425a      	negs	r2, r3
 8004fee:	4153      	adcs	r3, r2
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	001a      	movs	r2, r3
 8004ff4:	1dfb      	adds	r3, r7, #7
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d09e      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b004      	add	sp, #16
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08e      	sub	sp, #56	@ 0x38
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005010:	f3ef 8310 	mrs	r3, PRIMASK
 8005014:	617b      	str	r3, [r7, #20]
  return(result);
 8005016:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
 800501a:	2301      	movs	r3, #1
 800501c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4926      	ldr	r1, [pc, #152]	@ (80050cc <UART_EndRxTransfer+0xc4>)
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005038:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f383 8810 	msr	PRIMASK, r3
}
 8005040:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005042:	f3ef 8310 	mrs	r3, PRIMASK
 8005046:	623b      	str	r3, [r7, #32]
  return(result);
 8005048:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30
 800504c:	2301      	movs	r3, #1
 800504e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	f383 8810 	msr	PRIMASK, r3
}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	491b      	ldr	r1, [pc, #108]	@ (80050d0 <UART_EndRxTransfer+0xc8>)
 8005064:	400a      	ands	r2, r1
 8005066:	609a      	str	r2, [r3, #8]
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d118      	bne.n	80050ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800507c:	f3ef 8310 	mrs	r3, PRIMASK
 8005080:	60bb      	str	r3, [r7, #8]
  return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005086:	2301      	movs	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f383 8810 	msr	PRIMASK, r3
}
 8005090:	46c0      	nop			@ (mov r8, r8)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2110      	movs	r1, #16
 800509e:	438a      	bics	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f383 8810 	msr	PRIMASK, r3
}
 80050ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	228c      	movs	r2, #140	@ 0x8c
 80050b2:	2120      	movs	r1, #32
 80050b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b00e      	add	sp, #56	@ 0x38
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	fffffedf 	.word	0xfffffedf
 80050d0:	effffffe 	.word	0xeffffffe

080050d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2284      	movs	r2, #132	@ 0x84
 80050e0:	5c9b      	ldrb	r3, [r3, r2]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_UARTEx_DisableFifoMode+0x16>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e027      	b.n	800513a <HAL_UARTEx_DisableFifoMode+0x66>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2284      	movs	r2, #132	@ 0x84
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2288      	movs	r2, #136	@ 0x88
 80050f6:	2124      	movs	r1, #36	@ 0x24
 80050f8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	438a      	bics	r2, r1
 8005110:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a0b      	ldr	r2, [pc, #44]	@ (8005144 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005116:	4013      	ands	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2288      	movs	r2, #136	@ 0x88
 800512c:	2120      	movs	r1, #32
 800512e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2284      	movs	r2, #132	@ 0x84
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b004      	add	sp, #16
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	dfffffff 	.word	0xdfffffff

08005148 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2284      	movs	r2, #132	@ 0x84
 8005156:	5c9b      	ldrb	r3, [r3, r2]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e02e      	b.n	80051be <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2284      	movs	r2, #132	@ 0x84
 8005164:	2101      	movs	r1, #1
 8005166:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2288      	movs	r2, #136	@ 0x88
 800516c:	2124      	movs	r1, #36	@ 0x24
 800516e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2101      	movs	r1, #1
 8005184:	438a      	bics	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	08d9      	lsrs	r1, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f854 	bl	800524c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2288      	movs	r2, #136	@ 0x88
 80051b0:	2120      	movs	r1, #32
 80051b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2284      	movs	r2, #132	@ 0x84
 80051b8:	2100      	movs	r1, #0
 80051ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	0018      	movs	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b004      	add	sp, #16
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2284      	movs	r2, #132	@ 0x84
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e02f      	b.n	8005240 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2284      	movs	r2, #132	@ 0x84
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2288      	movs	r2, #136	@ 0x88
 80051ec:	2124      	movs	r1, #36	@ 0x24
 80051ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2101      	movs	r1, #1
 8005204:	438a      	bics	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	4a0e      	ldr	r2, [pc, #56]	@ (8005248 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005210:	4013      	ands	r3, r2
 8005212:	0019      	movs	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0018      	movs	r0, r3
 8005222:	f000 f813 	bl	800524c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2288      	movs	r2, #136	@ 0x88
 8005232:	2120      	movs	r1, #32
 8005234:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2284      	movs	r2, #132	@ 0x84
 800523a:	2100      	movs	r1, #0
 800523c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b004      	add	sp, #16
 8005246:	bd80      	pop	{r7, pc}
 8005248:	f1ffffff 	.word	0xf1ffffff

0800524c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800524c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	226a      	movs	r2, #106	@ 0x6a
 8005260:	2101      	movs	r1, #1
 8005262:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2268      	movs	r2, #104	@ 0x68
 8005268:	2101      	movs	r1, #1
 800526a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800526c:	e043      	b.n	80052f6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800526e:	260f      	movs	r6, #15
 8005270:	19bb      	adds	r3, r7, r6
 8005272:	2208      	movs	r2, #8
 8005274:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005276:	200e      	movs	r0, #14
 8005278:	183b      	adds	r3, r7, r0
 800527a:	2208      	movs	r2, #8
 800527c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	0e5b      	lsrs	r3, r3, #25
 8005286:	b2da      	uxtb	r2, r3
 8005288:	240d      	movs	r4, #13
 800528a:	193b      	adds	r3, r7, r4
 800528c:	2107      	movs	r1, #7
 800528e:	400a      	ands	r2, r1
 8005290:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	0f5b      	lsrs	r3, r3, #29
 800529a:	b2da      	uxtb	r2, r3
 800529c:	250c      	movs	r5, #12
 800529e:	197b      	adds	r3, r7, r5
 80052a0:	2107      	movs	r1, #7
 80052a2:	400a      	ands	r2, r1
 80052a4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a6:	183b      	adds	r3, r7, r0
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	197a      	adds	r2, r7, r5
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	4914      	ldr	r1, [pc, #80]	@ (8005300 <UARTEx_SetNbDataToProcess+0xb4>)
 80052b0:	5c8a      	ldrb	r2, [r1, r2]
 80052b2:	435a      	muls	r2, r3
 80052b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052b6:	197b      	adds	r3, r7, r5
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	4a12      	ldr	r2, [pc, #72]	@ (8005304 <UARTEx_SetNbDataToProcess+0xb8>)
 80052bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052be:	0019      	movs	r1, r3
 80052c0:	f7fa ffbe 	bl	8000240 <__divsi3>
 80052c4:	0003      	movs	r3, r0
 80052c6:	b299      	uxth	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	226a      	movs	r2, #106	@ 0x6a
 80052cc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ce:	19bb      	adds	r3, r7, r6
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	193a      	adds	r2, r7, r4
 80052d4:	7812      	ldrb	r2, [r2, #0]
 80052d6:	490a      	ldr	r1, [pc, #40]	@ (8005300 <UARTEx_SetNbDataToProcess+0xb4>)
 80052d8:	5c8a      	ldrb	r2, [r1, r2]
 80052da:	435a      	muls	r2, r3
 80052dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052de:	193b      	adds	r3, r7, r4
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	4a08      	ldr	r2, [pc, #32]	@ (8005304 <UARTEx_SetNbDataToProcess+0xb8>)
 80052e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052e6:	0019      	movs	r1, r3
 80052e8:	f7fa ffaa 	bl	8000240 <__divsi3>
 80052ec:	0003      	movs	r3, r0
 80052ee:	b299      	uxth	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2268      	movs	r2, #104	@ 0x68
 80052f4:	5299      	strh	r1, [r3, r2]
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b005      	add	sp, #20
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	08005e88 	.word	0x08005e88
 8005304:	08005e90 	.word	0x08005e90

08005308 <_vsniprintf_r>:
 8005308:	b530      	push	{r4, r5, lr}
 800530a:	0005      	movs	r5, r0
 800530c:	0014      	movs	r4, r2
 800530e:	0008      	movs	r0, r1
 8005310:	001a      	movs	r2, r3
 8005312:	b09b      	sub	sp, #108	@ 0x6c
 8005314:	2c00      	cmp	r4, #0
 8005316:	da05      	bge.n	8005324 <_vsniprintf_r+0x1c>
 8005318:	238b      	movs	r3, #139	@ 0x8b
 800531a:	2001      	movs	r0, #1
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	4240      	negs	r0, r0
 8005320:	b01b      	add	sp, #108	@ 0x6c
 8005322:	bd30      	pop	{r4, r5, pc}
 8005324:	2382      	movs	r3, #130	@ 0x82
 8005326:	4669      	mov	r1, sp
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	818b      	strh	r3, [r1, #12]
 800532c:	2100      	movs	r1, #0
 800532e:	9000      	str	r0, [sp, #0]
 8005330:	9119      	str	r1, [sp, #100]	@ 0x64
 8005332:	9004      	str	r0, [sp, #16]
 8005334:	428c      	cmp	r4, r1
 8005336:	d000      	beq.n	800533a <_vsniprintf_r+0x32>
 8005338:	1e61      	subs	r1, r4, #1
 800533a:	2301      	movs	r3, #1
 800533c:	9102      	str	r1, [sp, #8]
 800533e:	9105      	str	r1, [sp, #20]
 8005340:	4669      	mov	r1, sp
 8005342:	425b      	negs	r3, r3
 8005344:	81cb      	strh	r3, [r1, #14]
 8005346:	0028      	movs	r0, r5
 8005348:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800534a:	f000 f9a7 	bl	800569c <_svfiprintf_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	da01      	bge.n	8005356 <_vsniprintf_r+0x4e>
 8005352:	238b      	movs	r3, #139	@ 0x8b
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	2c00      	cmp	r4, #0
 8005358:	d0e2      	beq.n	8005320 <_vsniprintf_r+0x18>
 800535a:	2200      	movs	r2, #0
 800535c:	9b00      	ldr	r3, [sp, #0]
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e7de      	b.n	8005320 <_vsniprintf_r+0x18>
	...

08005364 <vsniprintf>:
 8005364:	b513      	push	{r0, r1, r4, lr}
 8005366:	4c04      	ldr	r4, [pc, #16]	@ (8005378 <vsniprintf+0x14>)
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	0013      	movs	r3, r2
 800536c:	000a      	movs	r2, r1
 800536e:	0001      	movs	r1, r0
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	f7ff ffc9 	bl	8005308 <_vsniprintf_r>
 8005376:	bd16      	pop	{r1, r2, r4, pc}
 8005378:	2000001c 	.word	0x2000001c

0800537c <memset>:
 800537c:	0003      	movs	r3, r0
 800537e:	1882      	adds	r2, r0, r2
 8005380:	4293      	cmp	r3, r2
 8005382:	d100      	bne.n	8005386 <memset+0xa>
 8005384:	4770      	bx	lr
 8005386:	7019      	strb	r1, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	e7f9      	b.n	8005380 <memset+0x4>

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	@ (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	2000001c 	.word	0x2000001c

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	2600      	movs	r6, #0
 800539c:	4c0c      	ldr	r4, [pc, #48]	@ (80053d0 <__libc_init_array+0x38>)
 800539e:	4d0d      	ldr	r5, [pc, #52]	@ (80053d4 <__libc_init_array+0x3c>)
 80053a0:	1b64      	subs	r4, r4, r5
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	2600      	movs	r6, #0
 80053aa:	f000 fc61 	bl	8005c70 <_init>
 80053ae:	4c0a      	ldr	r4, [pc, #40]	@ (80053d8 <__libc_init_array+0x40>)
 80053b0:	4d0a      	ldr	r5, [pc, #40]	@ (80053dc <__libc_init_array+0x44>)
 80053b2:	1b64      	subs	r4, r4, r5
 80053b4:	10a4      	asrs	r4, r4, #2
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	00b3      	lsls	r3, r6, #2
 80053be:	58eb      	ldr	r3, [r5, r3]
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	00b3      	lsls	r3, r6, #2
 80053c8:	58eb      	ldr	r3, [r5, r3]
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08005ed4 	.word	0x08005ed4
 80053d4:	08005ed4 	.word	0x08005ed4
 80053d8:	08005ed8 	.word	0x08005ed8
 80053dc:	08005ed4 	.word	0x08005ed4

080053e0 <__retarget_lock_acquire_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <__retarget_lock_release_recursive>:
 80053e2:	4770      	bx	lr

080053e4 <_free_r>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	0005      	movs	r5, r0
 80053e8:	1e0c      	subs	r4, r1, #0
 80053ea:	d010      	beq.n	800540e <_free_r+0x2a>
 80053ec:	3c04      	subs	r4, #4
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da00      	bge.n	80053f6 <_free_r+0x12>
 80053f4:	18e4      	adds	r4, r4, r3
 80053f6:	0028      	movs	r0, r5
 80053f8:	f000 f8e0 	bl	80055bc <__malloc_lock>
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <_free_r+0x90>)
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <_free_r+0x2c>
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	6014      	str	r4, [r2, #0]
 8005408:	0028      	movs	r0, r5
 800540a:	f000 f8df 	bl	80055cc <__malloc_unlock>
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	42a3      	cmp	r3, r4
 8005412:	d908      	bls.n	8005426 <_free_r+0x42>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	1821      	adds	r1, r4, r0
 8005418:	428b      	cmp	r3, r1
 800541a:	d1f3      	bne.n	8005404 <_free_r+0x20>
 800541c:	6819      	ldr	r1, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	1809      	adds	r1, r1, r0
 8005422:	6021      	str	r1, [r4, #0]
 8005424:	e7ee      	b.n	8005404 <_free_r+0x20>
 8005426:	001a      	movs	r2, r3
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <_free_r+0x4e>
 800542e:	42a3      	cmp	r3, r4
 8005430:	d9f9      	bls.n	8005426 <_free_r+0x42>
 8005432:	6811      	ldr	r1, [r2, #0]
 8005434:	1850      	adds	r0, r2, r1
 8005436:	42a0      	cmp	r0, r4
 8005438:	d10b      	bne.n	8005452 <_free_r+0x6e>
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	1809      	adds	r1, r1, r0
 800543e:	1850      	adds	r0, r2, r1
 8005440:	6011      	str	r1, [r2, #0]
 8005442:	4283      	cmp	r3, r0
 8005444:	d1e0      	bne.n	8005408 <_free_r+0x24>
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	1841      	adds	r1, r0, r1
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	6053      	str	r3, [r2, #4]
 8005450:	e7da      	b.n	8005408 <_free_r+0x24>
 8005452:	42a0      	cmp	r0, r4
 8005454:	d902      	bls.n	800545c <_free_r+0x78>
 8005456:	230c      	movs	r3, #12
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	e7d5      	b.n	8005408 <_free_r+0x24>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	1821      	adds	r1, r4, r0
 8005460:	428b      	cmp	r3, r1
 8005462:	d103      	bne.n	800546c <_free_r+0x88>
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	1809      	adds	r1, r1, r0
 800546a:	6021      	str	r1, [r4, #0]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6054      	str	r4, [r2, #4]
 8005470:	e7ca      	b.n	8005408 <_free_r+0x24>
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	20000360 	.word	0x20000360

08005478 <sbrk_aligned>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4e0f      	ldr	r6, [pc, #60]	@ (80054b8 <sbrk_aligned+0x40>)
 800547c:	000d      	movs	r5, r1
 800547e:	6831      	ldr	r1, [r6, #0]
 8005480:	0004      	movs	r4, r0
 8005482:	2900      	cmp	r1, #0
 8005484:	d102      	bne.n	800548c <sbrk_aligned+0x14>
 8005486:	f000 fb95 	bl	8005bb4 <_sbrk_r>
 800548a:	6030      	str	r0, [r6, #0]
 800548c:	0029      	movs	r1, r5
 800548e:	0020      	movs	r0, r4
 8005490:	f000 fb90 	bl	8005bb4 <_sbrk_r>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d103      	bne.n	80054a0 <sbrk_aligned+0x28>
 8005498:	2501      	movs	r5, #1
 800549a:	426d      	negs	r5, r5
 800549c:	0028      	movs	r0, r5
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	2303      	movs	r3, #3
 80054a2:	1cc5      	adds	r5, r0, #3
 80054a4:	439d      	bics	r5, r3
 80054a6:	42a8      	cmp	r0, r5
 80054a8:	d0f8      	beq.n	800549c <sbrk_aligned+0x24>
 80054aa:	1a29      	subs	r1, r5, r0
 80054ac:	0020      	movs	r0, r4
 80054ae:	f000 fb81 	bl	8005bb4 <_sbrk_r>
 80054b2:	3001      	adds	r0, #1
 80054b4:	d1f2      	bne.n	800549c <sbrk_aligned+0x24>
 80054b6:	e7ef      	b.n	8005498 <sbrk_aligned+0x20>
 80054b8:	2000035c 	.word	0x2000035c

080054bc <_malloc_r>:
 80054bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054be:	2203      	movs	r2, #3
 80054c0:	1ccb      	adds	r3, r1, #3
 80054c2:	4393      	bics	r3, r2
 80054c4:	3308      	adds	r3, #8
 80054c6:	0005      	movs	r5, r0
 80054c8:	001f      	movs	r7, r3
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d234      	bcs.n	8005538 <_malloc_r+0x7c>
 80054ce:	270c      	movs	r7, #12
 80054d0:	42b9      	cmp	r1, r7
 80054d2:	d833      	bhi.n	800553c <_malloc_r+0x80>
 80054d4:	0028      	movs	r0, r5
 80054d6:	f000 f871 	bl	80055bc <__malloc_lock>
 80054da:	4e37      	ldr	r6, [pc, #220]	@ (80055b8 <_malloc_r+0xfc>)
 80054dc:	6833      	ldr	r3, [r6, #0]
 80054de:	001c      	movs	r4, r3
 80054e0:	2c00      	cmp	r4, #0
 80054e2:	d12f      	bne.n	8005544 <_malloc_r+0x88>
 80054e4:	0039      	movs	r1, r7
 80054e6:	0028      	movs	r0, r5
 80054e8:	f7ff ffc6 	bl	8005478 <sbrk_aligned>
 80054ec:	0004      	movs	r4, r0
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d15f      	bne.n	80055b2 <_malloc_r+0xf6>
 80054f2:	6834      	ldr	r4, [r6, #0]
 80054f4:	9400      	str	r4, [sp, #0]
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d14a      	bne.n	8005592 <_malloc_r+0xd6>
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	d052      	beq.n	80055a6 <_malloc_r+0xea>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	0028      	movs	r0, r5
 8005504:	18e3      	adds	r3, r4, r3
 8005506:	9900      	ldr	r1, [sp, #0]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	f000 fb53 	bl	8005bb4 <_sbrk_r>
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	4283      	cmp	r3, r0
 8005512:	d148      	bne.n	80055a6 <_malloc_r+0xea>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	0028      	movs	r0, r5
 8005518:	1aff      	subs	r7, r7, r3
 800551a:	0039      	movs	r1, r7
 800551c:	f7ff ffac 	bl	8005478 <sbrk_aligned>
 8005520:	3001      	adds	r0, #1
 8005522:	d040      	beq.n	80055a6 <_malloc_r+0xea>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	19db      	adds	r3, r3, r7
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	6833      	ldr	r3, [r6, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	2a00      	cmp	r2, #0
 8005530:	d133      	bne.n	800559a <_malloc_r+0xde>
 8005532:	9b00      	ldr	r3, [sp, #0]
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	e019      	b.n	800556c <_malloc_r+0xb0>
 8005538:	2b00      	cmp	r3, #0
 800553a:	dac9      	bge.n	80054d0 <_malloc_r+0x14>
 800553c:	230c      	movs	r3, #12
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	2000      	movs	r0, #0
 8005542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005544:	6821      	ldr	r1, [r4, #0]
 8005546:	1bc9      	subs	r1, r1, r7
 8005548:	d420      	bmi.n	800558c <_malloc_r+0xd0>
 800554a:	290b      	cmp	r1, #11
 800554c:	d90a      	bls.n	8005564 <_malloc_r+0xa8>
 800554e:	19e2      	adds	r2, r4, r7
 8005550:	6027      	str	r7, [r4, #0]
 8005552:	42a3      	cmp	r3, r4
 8005554:	d104      	bne.n	8005560 <_malloc_r+0xa4>
 8005556:	6032      	str	r2, [r6, #0]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	6011      	str	r1, [r2, #0]
 800555c:	6053      	str	r3, [r2, #4]
 800555e:	e005      	b.n	800556c <_malloc_r+0xb0>
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	e7f9      	b.n	8005558 <_malloc_r+0x9c>
 8005564:	6862      	ldr	r2, [r4, #4]
 8005566:	42a3      	cmp	r3, r4
 8005568:	d10e      	bne.n	8005588 <_malloc_r+0xcc>
 800556a:	6032      	str	r2, [r6, #0]
 800556c:	0028      	movs	r0, r5
 800556e:	f000 f82d 	bl	80055cc <__malloc_unlock>
 8005572:	0020      	movs	r0, r4
 8005574:	2207      	movs	r2, #7
 8005576:	300b      	adds	r0, #11
 8005578:	1d23      	adds	r3, r4, #4
 800557a:	4390      	bics	r0, r2
 800557c:	1ac2      	subs	r2, r0, r3
 800557e:	4298      	cmp	r0, r3
 8005580:	d0df      	beq.n	8005542 <_malloc_r+0x86>
 8005582:	1a1b      	subs	r3, r3, r0
 8005584:	50a3      	str	r3, [r4, r2]
 8005586:	e7dc      	b.n	8005542 <_malloc_r+0x86>
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	e7ef      	b.n	800556c <_malloc_r+0xb0>
 800558c:	0023      	movs	r3, r4
 800558e:	6864      	ldr	r4, [r4, #4]
 8005590:	e7a6      	b.n	80054e0 <_malloc_r+0x24>
 8005592:	9c00      	ldr	r4, [sp, #0]
 8005594:	6863      	ldr	r3, [r4, #4]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	e7ad      	b.n	80054f6 <_malloc_r+0x3a>
 800559a:	001a      	movs	r2, r3
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	42a3      	cmp	r3, r4
 80055a0:	d1fb      	bne.n	800559a <_malloc_r+0xde>
 80055a2:	2300      	movs	r3, #0
 80055a4:	e7da      	b.n	800555c <_malloc_r+0xa0>
 80055a6:	230c      	movs	r3, #12
 80055a8:	0028      	movs	r0, r5
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f000 f80e 	bl	80055cc <__malloc_unlock>
 80055b0:	e7c6      	b.n	8005540 <_malloc_r+0x84>
 80055b2:	6007      	str	r7, [r0, #0]
 80055b4:	e7da      	b.n	800556c <_malloc_r+0xb0>
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	20000360 	.word	0x20000360

080055bc <__malloc_lock>:
 80055bc:	b510      	push	{r4, lr}
 80055be:	4802      	ldr	r0, [pc, #8]	@ (80055c8 <__malloc_lock+0xc>)
 80055c0:	f7ff ff0e 	bl	80053e0 <__retarget_lock_acquire_recursive>
 80055c4:	bd10      	pop	{r4, pc}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	20000358 	.word	0x20000358

080055cc <__malloc_unlock>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4802      	ldr	r0, [pc, #8]	@ (80055d8 <__malloc_unlock+0xc>)
 80055d0:	f7ff ff07 	bl	80053e2 <__retarget_lock_release_recursive>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	20000358 	.word	0x20000358

080055dc <__ssputs_r>:
 80055dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055de:	688e      	ldr	r6, [r1, #8]
 80055e0:	b085      	sub	sp, #20
 80055e2:	001f      	movs	r7, r3
 80055e4:	000c      	movs	r4, r1
 80055e6:	680b      	ldr	r3, [r1, #0]
 80055e8:	9002      	str	r0, [sp, #8]
 80055ea:	9203      	str	r2, [sp, #12]
 80055ec:	42be      	cmp	r6, r7
 80055ee:	d830      	bhi.n	8005652 <__ssputs_r+0x76>
 80055f0:	210c      	movs	r1, #12
 80055f2:	5e62      	ldrsh	r2, [r4, r1]
 80055f4:	2190      	movs	r1, #144	@ 0x90
 80055f6:	00c9      	lsls	r1, r1, #3
 80055f8:	420a      	tst	r2, r1
 80055fa:	d028      	beq.n	800564e <__ssputs_r+0x72>
 80055fc:	2003      	movs	r0, #3
 80055fe:	6921      	ldr	r1, [r4, #16]
 8005600:	1a5b      	subs	r3, r3, r1
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	6963      	ldr	r3, [r4, #20]
 8005606:	4343      	muls	r3, r0
 8005608:	9801      	ldr	r0, [sp, #4]
 800560a:	0fdd      	lsrs	r5, r3, #31
 800560c:	18ed      	adds	r5, r5, r3
 800560e:	1c7b      	adds	r3, r7, #1
 8005610:	181b      	adds	r3, r3, r0
 8005612:	106d      	asrs	r5, r5, #1
 8005614:	42ab      	cmp	r3, r5
 8005616:	d900      	bls.n	800561a <__ssputs_r+0x3e>
 8005618:	001d      	movs	r5, r3
 800561a:	0552      	lsls	r2, r2, #21
 800561c:	d528      	bpl.n	8005670 <__ssputs_r+0x94>
 800561e:	0029      	movs	r1, r5
 8005620:	9802      	ldr	r0, [sp, #8]
 8005622:	f7ff ff4b 	bl	80054bc <_malloc_r>
 8005626:	1e06      	subs	r6, r0, #0
 8005628:	d02c      	beq.n	8005684 <__ssputs_r+0xa8>
 800562a:	9a01      	ldr	r2, [sp, #4]
 800562c:	6921      	ldr	r1, [r4, #16]
 800562e:	f000 fade 	bl	8005bee <memcpy>
 8005632:	89a2      	ldrh	r2, [r4, #12]
 8005634:	4b18      	ldr	r3, [pc, #96]	@ (8005698 <__ssputs_r+0xbc>)
 8005636:	401a      	ands	r2, r3
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	4313      	orrs	r3, r2
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	6126      	str	r6, [r4, #16]
 8005642:	18f6      	adds	r6, r6, r3
 8005644:	6026      	str	r6, [r4, #0]
 8005646:	003e      	movs	r6, r7
 8005648:	6165      	str	r5, [r4, #20]
 800564a:	1aed      	subs	r5, r5, r3
 800564c:	60a5      	str	r5, [r4, #8]
 800564e:	42be      	cmp	r6, r7
 8005650:	d900      	bls.n	8005654 <__ssputs_r+0x78>
 8005652:	003e      	movs	r6, r7
 8005654:	0032      	movs	r2, r6
 8005656:	9903      	ldr	r1, [sp, #12]
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	f000 fa99 	bl	8005b90 <memmove>
 800565e:	2000      	movs	r0, #0
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	1b9b      	subs	r3, r3, r6
 8005664:	60a3      	str	r3, [r4, #8]
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	199b      	adds	r3, r3, r6
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	b005      	add	sp, #20
 800566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005670:	002a      	movs	r2, r5
 8005672:	9802      	ldr	r0, [sp, #8]
 8005674:	f000 fac4 	bl	8005c00 <_realloc_r>
 8005678:	1e06      	subs	r6, r0, #0
 800567a:	d1e0      	bne.n	800563e <__ssputs_r+0x62>
 800567c:	6921      	ldr	r1, [r4, #16]
 800567e:	9802      	ldr	r0, [sp, #8]
 8005680:	f7ff feb0 	bl	80053e4 <_free_r>
 8005684:	230c      	movs	r3, #12
 8005686:	2001      	movs	r0, #1
 8005688:	9a02      	ldr	r2, [sp, #8]
 800568a:	4240      	negs	r0, r0
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	89a2      	ldrh	r2, [r4, #12]
 8005690:	3334      	adds	r3, #52	@ 0x34
 8005692:	4313      	orrs	r3, r2
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	e7e9      	b.n	800566c <__ssputs_r+0x90>
 8005698:	fffffb7f 	.word	0xfffffb7f

0800569c <_svfiprintf_r>:
 800569c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569e:	b0a1      	sub	sp, #132	@ 0x84
 80056a0:	9003      	str	r0, [sp, #12]
 80056a2:	001d      	movs	r5, r3
 80056a4:	898b      	ldrh	r3, [r1, #12]
 80056a6:	000f      	movs	r7, r1
 80056a8:	0016      	movs	r6, r2
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	d511      	bpl.n	80056d2 <_svfiprintf_r+0x36>
 80056ae:	690b      	ldr	r3, [r1, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10e      	bne.n	80056d2 <_svfiprintf_r+0x36>
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	f7ff ff01 	bl	80054bc <_malloc_r>
 80056ba:	6038      	str	r0, [r7, #0]
 80056bc:	6138      	str	r0, [r7, #16]
 80056be:	2800      	cmp	r0, #0
 80056c0:	d105      	bne.n	80056ce <_svfiprintf_r+0x32>
 80056c2:	230c      	movs	r3, #12
 80056c4:	9a03      	ldr	r2, [sp, #12]
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	2001      	movs	r0, #1
 80056ca:	4240      	negs	r0, r0
 80056cc:	e0cf      	b.n	800586e <_svfiprintf_r+0x1d2>
 80056ce:	2340      	movs	r3, #64	@ 0x40
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	2300      	movs	r3, #0
 80056d4:	ac08      	add	r4, sp, #32
 80056d6:	6163      	str	r3, [r4, #20]
 80056d8:	3320      	adds	r3, #32
 80056da:	7663      	strb	r3, [r4, #25]
 80056dc:	3310      	adds	r3, #16
 80056de:	76a3      	strb	r3, [r4, #26]
 80056e0:	9507      	str	r5, [sp, #28]
 80056e2:	0035      	movs	r5, r6
 80056e4:	782b      	ldrb	r3, [r5, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <_svfiprintf_r+0x52>
 80056ea:	2b25      	cmp	r3, #37	@ 0x25
 80056ec:	d148      	bne.n	8005780 <_svfiprintf_r+0xe4>
 80056ee:	1bab      	subs	r3, r5, r6
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	42b5      	cmp	r5, r6
 80056f4:	d00b      	beq.n	800570e <_svfiprintf_r+0x72>
 80056f6:	0032      	movs	r2, r6
 80056f8:	0039      	movs	r1, r7
 80056fa:	9803      	ldr	r0, [sp, #12]
 80056fc:	f7ff ff6e 	bl	80055dc <__ssputs_r>
 8005700:	3001      	adds	r0, #1
 8005702:	d100      	bne.n	8005706 <_svfiprintf_r+0x6a>
 8005704:	e0ae      	b.n	8005864 <_svfiprintf_r+0x1c8>
 8005706:	6963      	ldr	r3, [r4, #20]
 8005708:	9a05      	ldr	r2, [sp, #20]
 800570a:	189b      	adds	r3, r3, r2
 800570c:	6163      	str	r3, [r4, #20]
 800570e:	782b      	ldrb	r3, [r5, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d100      	bne.n	8005716 <_svfiprintf_r+0x7a>
 8005714:	e0a6      	b.n	8005864 <_svfiprintf_r+0x1c8>
 8005716:	2201      	movs	r2, #1
 8005718:	2300      	movs	r3, #0
 800571a:	4252      	negs	r2, r2
 800571c:	6062      	str	r2, [r4, #4]
 800571e:	a904      	add	r1, sp, #16
 8005720:	3254      	adds	r2, #84	@ 0x54
 8005722:	1852      	adds	r2, r2, r1
 8005724:	1c6e      	adds	r6, r5, #1
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	60e3      	str	r3, [r4, #12]
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	7013      	strb	r3, [r2, #0]
 800572e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005730:	4b54      	ldr	r3, [pc, #336]	@ (8005884 <_svfiprintf_r+0x1e8>)
 8005732:	2205      	movs	r2, #5
 8005734:	0018      	movs	r0, r3
 8005736:	7831      	ldrb	r1, [r6, #0]
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	f000 fa4d 	bl	8005bd8 <memchr>
 800573e:	1c75      	adds	r5, r6, #1
 8005740:	2800      	cmp	r0, #0
 8005742:	d11f      	bne.n	8005784 <_svfiprintf_r+0xe8>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	06d3      	lsls	r3, r2, #27
 8005748:	d504      	bpl.n	8005754 <_svfiprintf_r+0xb8>
 800574a:	2353      	movs	r3, #83	@ 0x53
 800574c:	a904      	add	r1, sp, #16
 800574e:	185b      	adds	r3, r3, r1
 8005750:	2120      	movs	r1, #32
 8005752:	7019      	strb	r1, [r3, #0]
 8005754:	0713      	lsls	r3, r2, #28
 8005756:	d504      	bpl.n	8005762 <_svfiprintf_r+0xc6>
 8005758:	2353      	movs	r3, #83	@ 0x53
 800575a:	a904      	add	r1, sp, #16
 800575c:	185b      	adds	r3, r3, r1
 800575e:	212b      	movs	r1, #43	@ 0x2b
 8005760:	7019      	strb	r1, [r3, #0]
 8005762:	7833      	ldrb	r3, [r6, #0]
 8005764:	2b2a      	cmp	r3, #42	@ 0x2a
 8005766:	d016      	beq.n	8005796 <_svfiprintf_r+0xfa>
 8005768:	0035      	movs	r5, r6
 800576a:	2100      	movs	r1, #0
 800576c:	200a      	movs	r0, #10
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	782a      	ldrb	r2, [r5, #0]
 8005772:	1c6e      	adds	r6, r5, #1
 8005774:	3a30      	subs	r2, #48	@ 0x30
 8005776:	2a09      	cmp	r2, #9
 8005778:	d950      	bls.n	800581c <_svfiprintf_r+0x180>
 800577a:	2900      	cmp	r1, #0
 800577c:	d111      	bne.n	80057a2 <_svfiprintf_r+0x106>
 800577e:	e017      	b.n	80057b0 <_svfiprintf_r+0x114>
 8005780:	3501      	adds	r5, #1
 8005782:	e7af      	b.n	80056e4 <_svfiprintf_r+0x48>
 8005784:	9b05      	ldr	r3, [sp, #20]
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	1ac0      	subs	r0, r0, r3
 800578a:	2301      	movs	r3, #1
 800578c:	4083      	lsls	r3, r0
 800578e:	4313      	orrs	r3, r2
 8005790:	002e      	movs	r6, r5
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	e7cc      	b.n	8005730 <_svfiprintf_r+0x94>
 8005796:	9b07      	ldr	r3, [sp, #28]
 8005798:	1d19      	adds	r1, r3, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	9107      	str	r1, [sp, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	db01      	blt.n	80057a6 <_svfiprintf_r+0x10a>
 80057a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057a4:	e004      	b.n	80057b0 <_svfiprintf_r+0x114>
 80057a6:	425b      	negs	r3, r3
 80057a8:	60e3      	str	r3, [r4, #12]
 80057aa:	2302      	movs	r3, #2
 80057ac:	4313      	orrs	r3, r2
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	782b      	ldrb	r3, [r5, #0]
 80057b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057b4:	d10c      	bne.n	80057d0 <_svfiprintf_r+0x134>
 80057b6:	786b      	ldrb	r3, [r5, #1]
 80057b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ba:	d134      	bne.n	8005826 <_svfiprintf_r+0x18a>
 80057bc:	9b07      	ldr	r3, [sp, #28]
 80057be:	3502      	adds	r5, #2
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9207      	str	r2, [sp, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da01      	bge.n	80057ce <_svfiprintf_r+0x132>
 80057ca:	2301      	movs	r3, #1
 80057cc:	425b      	negs	r3, r3
 80057ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d0:	4e2d      	ldr	r6, [pc, #180]	@ (8005888 <_svfiprintf_r+0x1ec>)
 80057d2:	2203      	movs	r2, #3
 80057d4:	0030      	movs	r0, r6
 80057d6:	7829      	ldrb	r1, [r5, #0]
 80057d8:	f000 f9fe 	bl	8005bd8 <memchr>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d006      	beq.n	80057ee <_svfiprintf_r+0x152>
 80057e0:	2340      	movs	r3, #64	@ 0x40
 80057e2:	1b80      	subs	r0, r0, r6
 80057e4:	4083      	lsls	r3, r0
 80057e6:	6822      	ldr	r2, [r4, #0]
 80057e8:	3501      	adds	r5, #1
 80057ea:	4313      	orrs	r3, r2
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	7829      	ldrb	r1, [r5, #0]
 80057f0:	2206      	movs	r2, #6
 80057f2:	4826      	ldr	r0, [pc, #152]	@ (800588c <_svfiprintf_r+0x1f0>)
 80057f4:	1c6e      	adds	r6, r5, #1
 80057f6:	7621      	strb	r1, [r4, #24]
 80057f8:	f000 f9ee 	bl	8005bd8 <memchr>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d038      	beq.n	8005872 <_svfiprintf_r+0x1d6>
 8005800:	4b23      	ldr	r3, [pc, #140]	@ (8005890 <_svfiprintf_r+0x1f4>)
 8005802:	2b00      	cmp	r3, #0
 8005804:	d122      	bne.n	800584c <_svfiprintf_r+0x1b0>
 8005806:	2207      	movs	r2, #7
 8005808:	9b07      	ldr	r3, [sp, #28]
 800580a:	3307      	adds	r3, #7
 800580c:	4393      	bics	r3, r2
 800580e:	3308      	adds	r3, #8
 8005810:	9307      	str	r3, [sp, #28]
 8005812:	6963      	ldr	r3, [r4, #20]
 8005814:	9a04      	ldr	r2, [sp, #16]
 8005816:	189b      	adds	r3, r3, r2
 8005818:	6163      	str	r3, [r4, #20]
 800581a:	e762      	b.n	80056e2 <_svfiprintf_r+0x46>
 800581c:	4343      	muls	r3, r0
 800581e:	0035      	movs	r5, r6
 8005820:	2101      	movs	r1, #1
 8005822:	189b      	adds	r3, r3, r2
 8005824:	e7a4      	b.n	8005770 <_svfiprintf_r+0xd4>
 8005826:	2300      	movs	r3, #0
 8005828:	200a      	movs	r0, #10
 800582a:	0019      	movs	r1, r3
 800582c:	3501      	adds	r5, #1
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	782a      	ldrb	r2, [r5, #0]
 8005832:	1c6e      	adds	r6, r5, #1
 8005834:	3a30      	subs	r2, #48	@ 0x30
 8005836:	2a09      	cmp	r2, #9
 8005838:	d903      	bls.n	8005842 <_svfiprintf_r+0x1a6>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0c8      	beq.n	80057d0 <_svfiprintf_r+0x134>
 800583e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005840:	e7c6      	b.n	80057d0 <_svfiprintf_r+0x134>
 8005842:	4341      	muls	r1, r0
 8005844:	0035      	movs	r5, r6
 8005846:	2301      	movs	r3, #1
 8005848:	1889      	adds	r1, r1, r2
 800584a:	e7f1      	b.n	8005830 <_svfiprintf_r+0x194>
 800584c:	aa07      	add	r2, sp, #28
 800584e:	9200      	str	r2, [sp, #0]
 8005850:	0021      	movs	r1, r4
 8005852:	003a      	movs	r2, r7
 8005854:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <_svfiprintf_r+0x1f8>)
 8005856:	9803      	ldr	r0, [sp, #12]
 8005858:	e000      	b.n	800585c <_svfiprintf_r+0x1c0>
 800585a:	bf00      	nop
 800585c:	9004      	str	r0, [sp, #16]
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	3301      	adds	r3, #1
 8005862:	d1d6      	bne.n	8005812 <_svfiprintf_r+0x176>
 8005864:	89bb      	ldrh	r3, [r7, #12]
 8005866:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005868:	065b      	lsls	r3, r3, #25
 800586a:	d500      	bpl.n	800586e <_svfiprintf_r+0x1d2>
 800586c:	e72c      	b.n	80056c8 <_svfiprintf_r+0x2c>
 800586e:	b021      	add	sp, #132	@ 0x84
 8005870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005872:	aa07      	add	r2, sp, #28
 8005874:	9200      	str	r2, [sp, #0]
 8005876:	0021      	movs	r1, r4
 8005878:	003a      	movs	r2, r7
 800587a:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <_svfiprintf_r+0x1f8>)
 800587c:	9803      	ldr	r0, [sp, #12]
 800587e:	f000 f87b 	bl	8005978 <_printf_i>
 8005882:	e7eb      	b.n	800585c <_svfiprintf_r+0x1c0>
 8005884:	08005e98 	.word	0x08005e98
 8005888:	08005e9e 	.word	0x08005e9e
 800588c:	08005ea2 	.word	0x08005ea2
 8005890:	00000000 	.word	0x00000000
 8005894:	080055dd 	.word	0x080055dd

08005898 <_printf_common>:
 8005898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589a:	0016      	movs	r6, r2
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	688a      	ldr	r2, [r1, #8]
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	000c      	movs	r4, r1
 80058a4:	9000      	str	r0, [sp, #0]
 80058a6:	4293      	cmp	r3, r2
 80058a8:	da00      	bge.n	80058ac <_printf_common+0x14>
 80058aa:	0013      	movs	r3, r2
 80058ac:	0022      	movs	r2, r4
 80058ae:	6033      	str	r3, [r6, #0]
 80058b0:	3243      	adds	r2, #67	@ 0x43
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	2a00      	cmp	r2, #0
 80058b6:	d001      	beq.n	80058bc <_printf_common+0x24>
 80058b8:	3301      	adds	r3, #1
 80058ba:	6033      	str	r3, [r6, #0]
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	069b      	lsls	r3, r3, #26
 80058c0:	d502      	bpl.n	80058c8 <_printf_common+0x30>
 80058c2:	6833      	ldr	r3, [r6, #0]
 80058c4:	3302      	adds	r3, #2
 80058c6:	6033      	str	r3, [r6, #0]
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	2306      	movs	r3, #6
 80058cc:	0015      	movs	r5, r2
 80058ce:	401d      	ands	r5, r3
 80058d0:	421a      	tst	r2, r3
 80058d2:	d027      	beq.n	8005924 <_printf_common+0x8c>
 80058d4:	0023      	movs	r3, r4
 80058d6:	3343      	adds	r3, #67	@ 0x43
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	4193      	sbcs	r3, r2
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	0692      	lsls	r2, r2, #26
 80058e2:	d430      	bmi.n	8005946 <_printf_common+0xae>
 80058e4:	0022      	movs	r2, r4
 80058e6:	9901      	ldr	r1, [sp, #4]
 80058e8:	9800      	ldr	r0, [sp, #0]
 80058ea:	9d08      	ldr	r5, [sp, #32]
 80058ec:	3243      	adds	r2, #67	@ 0x43
 80058ee:	47a8      	blx	r5
 80058f0:	3001      	adds	r0, #1
 80058f2:	d025      	beq.n	8005940 <_printf_common+0xa8>
 80058f4:	2206      	movs	r2, #6
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	2500      	movs	r5, #0
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d105      	bne.n	800590c <_printf_common+0x74>
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	68e5      	ldr	r5, [r4, #12]
 8005904:	1aed      	subs	r5, r5, r3
 8005906:	43eb      	mvns	r3, r5
 8005908:	17db      	asrs	r3, r3, #31
 800590a:	401d      	ands	r5, r3
 800590c:	68a3      	ldr	r3, [r4, #8]
 800590e:	6922      	ldr	r2, [r4, #16]
 8005910:	4293      	cmp	r3, r2
 8005912:	dd01      	ble.n	8005918 <_printf_common+0x80>
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	18ed      	adds	r5, r5, r3
 8005918:	2600      	movs	r6, #0
 800591a:	42b5      	cmp	r5, r6
 800591c:	d120      	bne.n	8005960 <_printf_common+0xc8>
 800591e:	2000      	movs	r0, #0
 8005920:	e010      	b.n	8005944 <_printf_common+0xac>
 8005922:	3501      	adds	r5, #1
 8005924:	68e3      	ldr	r3, [r4, #12]
 8005926:	6832      	ldr	r2, [r6, #0]
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	42ab      	cmp	r3, r5
 800592c:	ddd2      	ble.n	80058d4 <_printf_common+0x3c>
 800592e:	0022      	movs	r2, r4
 8005930:	2301      	movs	r3, #1
 8005932:	9901      	ldr	r1, [sp, #4]
 8005934:	9800      	ldr	r0, [sp, #0]
 8005936:	9f08      	ldr	r7, [sp, #32]
 8005938:	3219      	adds	r2, #25
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d1f0      	bne.n	8005922 <_printf_common+0x8a>
 8005940:	2001      	movs	r0, #1
 8005942:	4240      	negs	r0, r0
 8005944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005946:	2030      	movs	r0, #48	@ 0x30
 8005948:	18e1      	adds	r1, r4, r3
 800594a:	3143      	adds	r1, #67	@ 0x43
 800594c:	7008      	strb	r0, [r1, #0]
 800594e:	0021      	movs	r1, r4
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	3145      	adds	r1, #69	@ 0x45
 8005954:	7809      	ldrb	r1, [r1, #0]
 8005956:	18a2      	adds	r2, r4, r2
 8005958:	3243      	adds	r2, #67	@ 0x43
 800595a:	3302      	adds	r3, #2
 800595c:	7011      	strb	r1, [r2, #0]
 800595e:	e7c1      	b.n	80058e4 <_printf_common+0x4c>
 8005960:	0022      	movs	r2, r4
 8005962:	2301      	movs	r3, #1
 8005964:	9901      	ldr	r1, [sp, #4]
 8005966:	9800      	ldr	r0, [sp, #0]
 8005968:	9f08      	ldr	r7, [sp, #32]
 800596a:	321a      	adds	r2, #26
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	d0e6      	beq.n	8005940 <_printf_common+0xa8>
 8005972:	3601      	adds	r6, #1
 8005974:	e7d1      	b.n	800591a <_printf_common+0x82>
	...

08005978 <_printf_i>:
 8005978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597a:	b08b      	sub	sp, #44	@ 0x2c
 800597c:	9206      	str	r2, [sp, #24]
 800597e:	000a      	movs	r2, r1
 8005980:	3243      	adds	r2, #67	@ 0x43
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	9005      	str	r0, [sp, #20]
 8005986:	9203      	str	r2, [sp, #12]
 8005988:	7e0a      	ldrb	r2, [r1, #24]
 800598a:	000c      	movs	r4, r1
 800598c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800598e:	2a78      	cmp	r2, #120	@ 0x78
 8005990:	d809      	bhi.n	80059a6 <_printf_i+0x2e>
 8005992:	2a62      	cmp	r2, #98	@ 0x62
 8005994:	d80b      	bhi.n	80059ae <_printf_i+0x36>
 8005996:	2a00      	cmp	r2, #0
 8005998:	d100      	bne.n	800599c <_printf_i+0x24>
 800599a:	e0ba      	b.n	8005b12 <_printf_i+0x19a>
 800599c:	497a      	ldr	r1, [pc, #488]	@ (8005b88 <_printf_i+0x210>)
 800599e:	9104      	str	r1, [sp, #16]
 80059a0:	2a58      	cmp	r2, #88	@ 0x58
 80059a2:	d100      	bne.n	80059a6 <_printf_i+0x2e>
 80059a4:	e08e      	b.n	8005ac4 <_printf_i+0x14c>
 80059a6:	0025      	movs	r5, r4
 80059a8:	3542      	adds	r5, #66	@ 0x42
 80059aa:	702a      	strb	r2, [r5, #0]
 80059ac:	e022      	b.n	80059f4 <_printf_i+0x7c>
 80059ae:	0010      	movs	r0, r2
 80059b0:	3863      	subs	r0, #99	@ 0x63
 80059b2:	2815      	cmp	r0, #21
 80059b4:	d8f7      	bhi.n	80059a6 <_printf_i+0x2e>
 80059b6:	f7fa fbaf 	bl	8000118 <__gnu_thumb1_case_shi>
 80059ba:	0016      	.short	0x0016
 80059bc:	fff6001f 	.word	0xfff6001f
 80059c0:	fff6fff6 	.word	0xfff6fff6
 80059c4:	001ffff6 	.word	0x001ffff6
 80059c8:	fff6fff6 	.word	0xfff6fff6
 80059cc:	fff6fff6 	.word	0xfff6fff6
 80059d0:	0036009f 	.word	0x0036009f
 80059d4:	fff6007e 	.word	0xfff6007e
 80059d8:	00b0fff6 	.word	0x00b0fff6
 80059dc:	0036fff6 	.word	0x0036fff6
 80059e0:	fff6fff6 	.word	0xfff6fff6
 80059e4:	0082      	.short	0x0082
 80059e6:	0025      	movs	r5, r4
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	3542      	adds	r5, #66	@ 0x42
 80059ec:	1d11      	adds	r1, r2, #4
 80059ee:	6019      	str	r1, [r3, #0]
 80059f0:	6813      	ldr	r3, [r2, #0]
 80059f2:	702b      	strb	r3, [r5, #0]
 80059f4:	2301      	movs	r3, #1
 80059f6:	e09e      	b.n	8005b36 <_printf_i+0x1be>
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	6809      	ldr	r1, [r1, #0]
 80059fc:	1d02      	adds	r2, r0, #4
 80059fe:	060d      	lsls	r5, r1, #24
 8005a00:	d50b      	bpl.n	8005a1a <_printf_i+0xa2>
 8005a02:	6806      	ldr	r6, [r0, #0]
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	da03      	bge.n	8005a12 <_printf_i+0x9a>
 8005a0a:	232d      	movs	r3, #45	@ 0x2d
 8005a0c:	9a03      	ldr	r2, [sp, #12]
 8005a0e:	4276      	negs	r6, r6
 8005a10:	7013      	strb	r3, [r2, #0]
 8005a12:	4b5d      	ldr	r3, [pc, #372]	@ (8005b88 <_printf_i+0x210>)
 8005a14:	270a      	movs	r7, #10
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	e018      	b.n	8005a4c <_printf_i+0xd4>
 8005a1a:	6806      	ldr	r6, [r0, #0]
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	0649      	lsls	r1, r1, #25
 8005a20:	d5f1      	bpl.n	8005a06 <_printf_i+0x8e>
 8005a22:	b236      	sxth	r6, r6
 8005a24:	e7ef      	b.n	8005a06 <_printf_i+0x8e>
 8005a26:	6808      	ldr	r0, [r1, #0]
 8005a28:	6819      	ldr	r1, [r3, #0]
 8005a2a:	c940      	ldmia	r1!, {r6}
 8005a2c:	0605      	lsls	r5, r0, #24
 8005a2e:	d402      	bmi.n	8005a36 <_printf_i+0xbe>
 8005a30:	0640      	lsls	r0, r0, #25
 8005a32:	d500      	bpl.n	8005a36 <_printf_i+0xbe>
 8005a34:	b2b6      	uxth	r6, r6
 8005a36:	6019      	str	r1, [r3, #0]
 8005a38:	4b53      	ldr	r3, [pc, #332]	@ (8005b88 <_printf_i+0x210>)
 8005a3a:	270a      	movs	r7, #10
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005a40:	d100      	bne.n	8005a44 <_printf_i+0xcc>
 8005a42:	3f02      	subs	r7, #2
 8005a44:	0023      	movs	r3, r4
 8005a46:	2200      	movs	r2, #0
 8005a48:	3343      	adds	r3, #67	@ 0x43
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	60a3      	str	r3, [r4, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	db06      	blt.n	8005a62 <_printf_i+0xea>
 8005a54:	2104      	movs	r1, #4
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	9d03      	ldr	r5, [sp, #12]
 8005a5a:	438a      	bics	r2, r1
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	4333      	orrs	r3, r6
 8005a60:	d00c      	beq.n	8005a7c <_printf_i+0x104>
 8005a62:	9d03      	ldr	r5, [sp, #12]
 8005a64:	0030      	movs	r0, r6
 8005a66:	0039      	movs	r1, r7
 8005a68:	f7fa fbe6 	bl	8000238 <__aeabi_uidivmod>
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	3d01      	subs	r5, #1
 8005a70:	5c5b      	ldrb	r3, [r3, r1]
 8005a72:	702b      	strb	r3, [r5, #0]
 8005a74:	0033      	movs	r3, r6
 8005a76:	0006      	movs	r6, r0
 8005a78:	429f      	cmp	r7, r3
 8005a7a:	d9f3      	bls.n	8005a64 <_printf_i+0xec>
 8005a7c:	2f08      	cmp	r7, #8
 8005a7e:	d109      	bne.n	8005a94 <_printf_i+0x11c>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	d506      	bpl.n	8005a94 <_printf_i+0x11c>
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	dc02      	bgt.n	8005a94 <_printf_i+0x11c>
 8005a8e:	2330      	movs	r3, #48	@ 0x30
 8005a90:	3d01      	subs	r5, #1
 8005a92:	702b      	strb	r3, [r5, #0]
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	1b5b      	subs	r3, r3, r5
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	9b07      	ldr	r3, [sp, #28]
 8005a9c:	0021      	movs	r1, r4
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	9805      	ldr	r0, [sp, #20]
 8005aa2:	9b06      	ldr	r3, [sp, #24]
 8005aa4:	aa09      	add	r2, sp, #36	@ 0x24
 8005aa6:	f7ff fef7 	bl	8005898 <_printf_common>
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d148      	bne.n	8005b40 <_printf_i+0x1c8>
 8005aae:	2001      	movs	r0, #1
 8005ab0:	4240      	negs	r0, r0
 8005ab2:	b00b      	add	sp, #44	@ 0x2c
 8005ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	6809      	ldr	r1, [r1, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	6022      	str	r2, [r4, #0]
 8005abe:	2278      	movs	r2, #120	@ 0x78
 8005ac0:	4932      	ldr	r1, [pc, #200]	@ (8005b8c <_printf_i+0x214>)
 8005ac2:	9104      	str	r1, [sp, #16]
 8005ac4:	0021      	movs	r1, r4
 8005ac6:	3145      	adds	r1, #69	@ 0x45
 8005ac8:	700a      	strb	r2, [r1, #0]
 8005aca:	6819      	ldr	r1, [r3, #0]
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	c940      	ldmia	r1!, {r6}
 8005ad0:	0610      	lsls	r0, r2, #24
 8005ad2:	d402      	bmi.n	8005ada <_printf_i+0x162>
 8005ad4:	0650      	lsls	r0, r2, #25
 8005ad6:	d500      	bpl.n	8005ada <_printf_i+0x162>
 8005ad8:	b2b6      	uxth	r6, r6
 8005ada:	6019      	str	r1, [r3, #0]
 8005adc:	07d3      	lsls	r3, r2, #31
 8005ade:	d502      	bpl.n	8005ae6 <_printf_i+0x16e>
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	d001      	beq.n	8005aee <_printf_i+0x176>
 8005aea:	2710      	movs	r7, #16
 8005aec:	e7aa      	b.n	8005a44 <_printf_i+0xcc>
 8005aee:	2220      	movs	r2, #32
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	4393      	bics	r3, r2
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	e7f8      	b.n	8005aea <_printf_i+0x172>
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	680d      	ldr	r5, [r1, #0]
 8005afc:	1d10      	adds	r0, r2, #4
 8005afe:	6949      	ldr	r1, [r1, #20]
 8005b00:	6018      	str	r0, [r3, #0]
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	062e      	lsls	r6, r5, #24
 8005b06:	d501      	bpl.n	8005b0c <_printf_i+0x194>
 8005b08:	6019      	str	r1, [r3, #0]
 8005b0a:	e002      	b.n	8005b12 <_printf_i+0x19a>
 8005b0c:	066d      	lsls	r5, r5, #25
 8005b0e:	d5fb      	bpl.n	8005b08 <_printf_i+0x190>
 8005b10:	8019      	strh	r1, [r3, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9d03      	ldr	r5, [sp, #12]
 8005b16:	6123      	str	r3, [r4, #16]
 8005b18:	e7bf      	b.n	8005a9a <_printf_i+0x122>
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	1d11      	adds	r1, r2, #4
 8005b1e:	6019      	str	r1, [r3, #0]
 8005b20:	6815      	ldr	r5, [r2, #0]
 8005b22:	2100      	movs	r1, #0
 8005b24:	0028      	movs	r0, r5
 8005b26:	6862      	ldr	r2, [r4, #4]
 8005b28:	f000 f856 	bl	8005bd8 <memchr>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d001      	beq.n	8005b34 <_printf_i+0x1bc>
 8005b30:	1b40      	subs	r0, r0, r5
 8005b32:	6060      	str	r0, [r4, #4]
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9a03      	ldr	r2, [sp, #12]
 8005b3c:	7013      	strb	r3, [r2, #0]
 8005b3e:	e7ac      	b.n	8005a9a <_printf_i+0x122>
 8005b40:	002a      	movs	r2, r5
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	9906      	ldr	r1, [sp, #24]
 8005b46:	9805      	ldr	r0, [sp, #20]
 8005b48:	9d07      	ldr	r5, [sp, #28]
 8005b4a:	47a8      	blx	r5
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d0ae      	beq.n	8005aae <_printf_i+0x136>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	d415      	bmi.n	8005b82 <_printf_i+0x20a>
 8005b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b58:	68e0      	ldr	r0, [r4, #12]
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	daa9      	bge.n	8005ab2 <_printf_i+0x13a>
 8005b5e:	0018      	movs	r0, r3
 8005b60:	e7a7      	b.n	8005ab2 <_printf_i+0x13a>
 8005b62:	0022      	movs	r2, r4
 8005b64:	2301      	movs	r3, #1
 8005b66:	9906      	ldr	r1, [sp, #24]
 8005b68:	9805      	ldr	r0, [sp, #20]
 8005b6a:	9e07      	ldr	r6, [sp, #28]
 8005b6c:	3219      	adds	r2, #25
 8005b6e:	47b0      	blx	r6
 8005b70:	3001      	adds	r0, #1
 8005b72:	d09c      	beq.n	8005aae <_printf_i+0x136>
 8005b74:	3501      	adds	r5, #1
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dcf0      	bgt.n	8005b62 <_printf_i+0x1ea>
 8005b80:	e7e9      	b.n	8005b56 <_printf_i+0x1de>
 8005b82:	2500      	movs	r5, #0
 8005b84:	e7f7      	b.n	8005b76 <_printf_i+0x1fe>
 8005b86:	46c0      	nop			@ (mov r8, r8)
 8005b88:	08005ea9 	.word	0x08005ea9
 8005b8c:	08005eba 	.word	0x08005eba

08005b90 <memmove>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	4288      	cmp	r0, r1
 8005b94:	d902      	bls.n	8005b9c <memmove+0xc>
 8005b96:	188b      	adds	r3, r1, r2
 8005b98:	4298      	cmp	r0, r3
 8005b9a:	d308      	bcc.n	8005bae <memmove+0x1e>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d007      	beq.n	8005bb2 <memmove+0x22>
 8005ba2:	5ccc      	ldrb	r4, [r1, r3]
 8005ba4:	54c4      	strb	r4, [r0, r3]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	e7f9      	b.n	8005b9e <memmove+0xe>
 8005baa:	5c8b      	ldrb	r3, [r1, r2]
 8005bac:	5483      	strb	r3, [r0, r2]
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	d2fb      	bcs.n	8005baa <memmove+0x1a>
 8005bb2:	bd10      	pop	{r4, pc}

08005bb4 <_sbrk_r>:
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	b570      	push	{r4, r5, r6, lr}
 8005bb8:	4d06      	ldr	r5, [pc, #24]	@ (8005bd4 <_sbrk_r+0x20>)
 8005bba:	0004      	movs	r4, r0
 8005bbc:	0008      	movs	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fb f90a 	bl	8000dd8 <_sbrk>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d103      	bne.n	8005bd0 <_sbrk_r+0x1c>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d000      	beq.n	8005bd0 <_sbrk_r+0x1c>
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	20000354 	.word	0x20000354

08005bd8 <memchr>:
 8005bd8:	b2c9      	uxtb	r1, r1
 8005bda:	1882      	adds	r2, r0, r2
 8005bdc:	4290      	cmp	r0, r2
 8005bde:	d101      	bne.n	8005be4 <memchr+0xc>
 8005be0:	2000      	movs	r0, #0
 8005be2:	4770      	bx	lr
 8005be4:	7803      	ldrb	r3, [r0, #0]
 8005be6:	428b      	cmp	r3, r1
 8005be8:	d0fb      	beq.n	8005be2 <memchr+0xa>
 8005bea:	3001      	adds	r0, #1
 8005bec:	e7f6      	b.n	8005bdc <memchr+0x4>

08005bee <memcpy>:
 8005bee:	2300      	movs	r3, #0
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d100      	bne.n	8005bf8 <memcpy+0xa>
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	5ccc      	ldrb	r4, [r1, r3]
 8005bfa:	54c4      	strb	r4, [r0, r3]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	e7f8      	b.n	8005bf2 <memcpy+0x4>

08005c00 <_realloc_r>:
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c02:	0006      	movs	r6, r0
 8005c04:	000c      	movs	r4, r1
 8005c06:	0015      	movs	r5, r2
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	d105      	bne.n	8005c18 <_realloc_r+0x18>
 8005c0c:	0011      	movs	r1, r2
 8005c0e:	f7ff fc55 	bl	80054bc <_malloc_r>
 8005c12:	0004      	movs	r4, r0
 8005c14:	0020      	movs	r0, r4
 8005c16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d103      	bne.n	8005c24 <_realloc_r+0x24>
 8005c1c:	f7ff fbe2 	bl	80053e4 <_free_r>
 8005c20:	002c      	movs	r4, r5
 8005c22:	e7f7      	b.n	8005c14 <_realloc_r+0x14>
 8005c24:	f000 f81c 	bl	8005c60 <_malloc_usable_size_r>
 8005c28:	0007      	movs	r7, r0
 8005c2a:	4285      	cmp	r5, r0
 8005c2c:	d802      	bhi.n	8005c34 <_realloc_r+0x34>
 8005c2e:	0843      	lsrs	r3, r0, #1
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	d3ef      	bcc.n	8005c14 <_realloc_r+0x14>
 8005c34:	0029      	movs	r1, r5
 8005c36:	0030      	movs	r0, r6
 8005c38:	f7ff fc40 	bl	80054bc <_malloc_r>
 8005c3c:	9001      	str	r0, [sp, #4]
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d101      	bne.n	8005c46 <_realloc_r+0x46>
 8005c42:	9c01      	ldr	r4, [sp, #4]
 8005c44:	e7e6      	b.n	8005c14 <_realloc_r+0x14>
 8005c46:	002a      	movs	r2, r5
 8005c48:	42bd      	cmp	r5, r7
 8005c4a:	d900      	bls.n	8005c4e <_realloc_r+0x4e>
 8005c4c:	003a      	movs	r2, r7
 8005c4e:	0021      	movs	r1, r4
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	f7ff ffcc 	bl	8005bee <memcpy>
 8005c56:	0021      	movs	r1, r4
 8005c58:	0030      	movs	r0, r6
 8005c5a:	f7ff fbc3 	bl	80053e4 <_free_r>
 8005c5e:	e7f0      	b.n	8005c42 <_realloc_r+0x42>

08005c60 <_malloc_usable_size_r>:
 8005c60:	1f0b      	subs	r3, r1, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	1f18      	subs	r0, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da01      	bge.n	8005c6e <_malloc_usable_size_r+0xe>
 8005c6a:	580b      	ldr	r3, [r1, r0]
 8005c6c:	18c0      	adds	r0, r0, r3
 8005c6e:	4770      	bx	lr

08005c70 <_init>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr

08005c7c <_fini>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr
